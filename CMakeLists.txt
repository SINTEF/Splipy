PROJECT(GoTools-python-bindings)

SET(GEOMODELLER_VERSION_MAJOR 0)
SET(GEOMODELLER_VERSION_MINOR 3)
SET(GEOMODELLER_VERSION_PATCH 3)
SET(GEOMODELLER_VERSION ${GEOMODELLER_VERSION_MAJOR}.${GEOMODELLER_VERSION_MINOR}.${GEOMODELLER_VERSION_PATCH})

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

ENABLE_LANGUAGE(CXX)

OPTION(USE_OPENNURBS "Use OpenNURBS?" ON)
OPTION(USE_HDF5 "Use HDF5?" ON)

FIND_PACKAGE(PythonLibs REQUIRED)
FIND_PACKAGE(PythonInterp REQUIRED)
FIND_PACKAGE(GoTools REQUIRED)
FIND_PACKAGE(GoTrivariate REQUIRED)
FIND_PACKAGE(GoCompositeModel REQUIRED)
FIND_PACKAGE(SISL REQUIRED)
FIND_PACKAGE(Parametrization REQUIRED)
FIND_PACKAGE(TTL REQUIRED)
FIND_PACKAGE(Newmat REQUIRED)
FIND_PACKAGE(GoIgeslib REQUIRED)
FIND_PACKAGE(GoTopology REQUIRED)
FIND_PACKAGE(GoImplicitization REQUIRED)
FIND_PACKAGE(GoIntersections REQUIRED)
IF(USE_OPENNURBS)
  FIND_PACKAGE(OpenNURBS)
ENDIF(USE_OPENNURBS)
IF(USE_HDF5)
  FIND_PACKAGE(HDF5)
ENDIF(USE_HDF5)

# Generate header with version info
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/include/geomodversion.h.in
               ${PROJECT_SOURCE_DIR}/include/geomodversion.h @ONLY)
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/fixupdebs.sh.in
               ${PROJECT_SOURCE_DIR}/doc/fixupdebs.sh @ONLY)

# Mimimum GoTools version
IF(GoTools_VERSION_MAJOR LESS 4 OR NOT GoTools_VERSION_MAJOR)
  MESSAGE(FATAL_ERROR "GoTools >= 4.0.0 required. bailing")
ENDIF(GoTools_VERSION_MAJOR LESS 4 OR NOT GoTools_VERSION_MAJOR)

# Order of GoTools libraries is not random!
SET(DEPLIBS ${PYTHON_LIBRARIES}
            ${GoCompositeModel_LIBRARIES}
            ${SISL_LIBRARIES}
            ${Parametrization_LIBRARIES}
            ${TTL_LIBRARIES}
            ${GoIgeslib_LIBRARIES}
            ${GoTopology_LIBRARIES}
            ${GoIntersections_LIBRARIES}
            ${GoImplicitization_LIBRARIES}
            ${Newmat_LIBRARIES}
            ${GoTools_LIBRARIES}
            ${GoTrivariate_LIBRARIES})


SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GoTools_CXX_FLAGS} -fPIC")
SET(INCLUDE_DIRS ${GoTools_INCLUDE_DIRS}
                 ${PYTHON_INCLUDE_DIRS} 
                 ${PROJECT_SOURCE_DIR}/include)

IF(OpenNURBS_LIBRARIES AND OpenNURBS_INCLUDE_DIRS)
  SET(INCLUDE_DIRS ${INCLUDE_DIRS}
                   ${OpenNURBS_INCLUDE_DIRS})
  SET(DEPLIBS ${DEPLIBS}
              ${OpenNURBS_LIBRARIES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DENABLE_OPENNURBS=1")
ENDIF(OpenNURBS_LIBRARIES AND OpenNURBS_INCLUDE_DIRS)

IF(HDF5_LIBRARIES AND HDF5_INCLUDE_DIRS)
  SET(DEPLIBS ${DEPLIBS}
              ${HDF5_LIBRARIES})
  SET(INCLUDE_DIRS ${INCLUDE_DIRS}
                   ${HDF5_INCLUDE_DIRS})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DENABLE_HDF5=1")
ENDIF(HDF5_LIBRARIES AND HDF5_INCLUDE_DIRS)

INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

# Additional compiler flags required by GoTools
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GoTools_CXX_FLAGS}")

FILE(GLOB_RECURSE SRCS src/*.C)

PYTHON_ADD_MODULE(GoTools ${SRCS})
TARGET_LINK_LIBRARIES(GoTools ${DEPLIBS})

ADD_EXECUTABLE(geoModeler app/geoModeler.C ${SRCS})
TARGET_LINK_LIBRARIES(geoModeler ${DEPLIBS})

EXECUTE_PROCESS(COMMAND python -c "import sys; print sys.version[:3]" OUTPUT_VARIABLE PYTHON_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)

ADD_CUSTOM_TARGET(doc PYTHONPATH=${PROJECT_SOURCE_DIR} ${PYTHON_EXECUTABLE}
                      ${CMAKE_SOURCE_DIR}/doc/gendocumentation.py
                      DEPENDS GoTools
                      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
                      COMMENT "Generating API documentation" VERBATIM)

ADD_CUSTOM_TARGET(pdfdoc pdflatex
                  api.tex
                  DEPENDS doc
                  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/doc/latex
                  COMMENT "Compiling documentation to PDF (doc/latex/api.pdf)" VERBATIM)

SET(TAR_BALL GoTools-python-bindings-${GEOMODELLER_VERSION_MAJOR}.${GEOMODELLER_VERSION_MINOR}.${GEOMODELLER_VERSION_PATCH}.tar.bz2)
FILE(GLOB_RECURSE DIST_SRCS RELATIVE ${PROJECT_SOURCE_DIR} CMakeLists.txt src/*.C include/*.h include/*.in app/*.C doc/gendocumentation.py cmake/*.cmake)
STRING(REGEX REPLACE "include/geomodversion.h;" "" DIST_SRCS "${DIST_SRCS}")
ADD_CUSTOM_TARGET(dist tar jcvf ${TAR_BALL} ${DIST_SRCS} > /dev/null
                  DEPENDS GoTools
                  COMMENT "Building tar ball \"${TAR_BALL}\"" VERBATIM)
SET_DIRECTORY_PROPERTIES(${PROJECT_SOURCE_DIR} ADDITIONAL_MAKE_CLEAN_FILES ${TAR_BALL})
SET_DIRECTORY_PROPERTIES(${PROJECT_SOURCE_DIR}/doc ADDITIONAL_MAKE_CLEAN_DIRECTORIES html)

INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/doc/html DESTINATION share/doc/python-GoTools
        COMPONENT doc)
INSTALL(TARGETS GoTools DESTINATION lib/python${PYTHON_VERSION}/dist-packages/ COMPONENT bin)
INSTALL(TARGETS geoModeler DESTINATION bin COMPONENT bin)

# Add correct path to the geomod binary for convenience
SET(GEOMOD_BINARY ${CMAKE_BINARY_DIR}/geoModeler)
SET(PROJECT_PATH ${PROJECT_SOURCE_DIR})
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/tests/makereg.in
               ${PROJECT_SOURCE_DIR}/tests/makereg)
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/tests/dotest.in
               ${PROJECT_SOURCE_DIR}/tests/dotest)

FILE(GLOB GEOUTILS_SRCS RELATIVE ${PROJECT_SOURCE_DIR} GeoUtils/*.py)
INSTALL(FILES ${GEOUTILS_SRCS} DESTINATION lib/python${PYTHON_VERSION}/dist-packages/GeoUtils
        COMPONENT bin)

ENABLE_TESTING()
FILE(GLOB_RECURSE GEOMOD_TESTFILES RELATIVE ${PROJECT_SOURCE_DIR}/tests ${PROJECT_SOURCE_DIR}/tests/*.reg)
FOREACH(TESTFILE ${GEOMOD_TESTFILES})
  STRING(REGEX REPLACE ".reg" ".py" TESTSCRIPT ${TESTFILE})
  ADD_TEST(${TESTFILE} ${PROJECT_SOURCE_DIR}/tests/dotest ${CMAKE_BINARY_DIR}/geoModeler ${PROJECT_SOURCE_DIR}/scripts/${TESTSCRIPT} ${PROJECT_SOURCE_DIR}/tests/${TESTFILE})
ENDFOREACH()

# 'install' target
# Make install force doc build
INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_BUILD_TOOL} doc WORKING_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")" COMPONENT doc)

# Packaging
EXECUTE_PROCESS(COMMAND lsb_release "-sc" OUTPUT_VARIABLE CODENAME)
STRING(REGEX REPLACE "\n" "" SYSTEM_CODENAME ${CODENAME})
EXECUTE_PROCESS(COMMAND lsb_release "-si" OUTPUT_VARIABLE VENDOR)
STRING(REGEX REPLACE "\n" "" SYSTEM_VENDOR ${VENDOR})

IF (SYSTEM_VENDOR STREQUAL "Ubuntu" OR SYSTEM_VENDOR STREQUAL "Debian")
  EXECUTE_PROCESS(COMMAND dpkg --print-architecture OUTPUT_VARIABLE ARCHITECTURE)
  STRING(REGEX REPLACE "\n" "" CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${ARCHITECTURE})
  SET(SYSTEM_ARCHITECTURE ${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})
  SET(CPACK_GENERATOR "DEB")
  SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Arne Morten Kvarving <arne.morten.kvarving@sintef.no>")
  SET(CPACK_DEB_COMPONENT_INSTALL ON)
ENDIF (SYSTEM_VENDOR STREQUAL "Ubuntu" OR SYSTEM_VENDOR STREQUAL "Debian")

SET(CPACK_PACKAGE_NAME "libifem-geomodeler")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "GeoModeler - a python/GoTools based geometry modeler")
SET(CPACK_PACKAGE_VERSION "${GEOMODELLER_VERSION}")
SET(CPACK_PACKAGE_VERSION_MAJOR ${GEOMODELLER_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${GEOMODELLER_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${GEOMODELLER_VERSION_PATCH})
SET(CPACK_PACKAGE_FILE_NAME "libifem-geomodeler_${CPACK_PACKAGE_VERSION}_${SYSTEM_ARCHITECTURE}-${SYSTEM_CODENAME}")
#SET(CPACK_RESOURCE_FILE_LICENSE ${PROJECT_SOURCE_DIR}/COPYING)
SET(CPACK_STRIP_FILES "geoModeler GoTools.so")

INCLUDE(CPack)

ADD_CUSTOM_TARGET(ubuntu 
                  COMMAND make package
                  COMMAND ${PROJECT_SOURCE_DIR}/doc/fixupdebs.sh
                  COMMAND echo "All done. Packages are in UbuntuDebs/"
                  COMMENT "Generating and fixing up Ubuntu packages" VERBATIM)
