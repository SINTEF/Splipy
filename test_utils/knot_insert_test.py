# --- Automatic generated test file  ---
# Generator    : generate_knot_insert.py
# Date         : 2016-01-29
# Git revision : 8d0dc5a99fc2d41964f0eced89a17fe40c1bb482

import numpy as np
from GeoMod import Volume, Surface, Curve, BSplineBasis
from math import sqrt
import unittest


class TestInsertKnot(unittest.TestCase):
    def test_curve_2D_p3_rational(self):
        controlpoints = np.array([[  4. ,   1. ,   1.1],
       [ 19. ,  -4. ,   0.6],
       [ 28. ,   0. ,   1.3],
       [ 37. ,   2. ,   1.2],
       [ 59. ,   2. ,   1.3],
       [ 74. ,  -2. ,   1.2],
       [ 83. ,  -2. ,   0.9],
       [ 95. ,   1. ,   1. ]])
        basis0 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1.2,  1.9,  3.2,  4.1,  4.7,  6. ,  6. ,  6. ]))
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([1.757]*1) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 12)
        crv2.insert_knot([4.625]*2) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 14)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p42_rational(self):
        controlpoints = np.array([[  -2. ,   -1. ,    1.4],
       [  20. ,   -3. ,    0.6],
       [  35. ,   -3. ,    1.3],
       [  64. ,   -3. ,    0.6],
       [  79. ,    2. ,    1.1],
       [  98. ,    1. ,    0.7],
       [   3. ,   52. ,    0.5],
       [  18. ,   51. ,    0.5],
       [  44. ,   50. ,    0.7],
       [  58. ,   47. ,    0.7],
       [  84. ,   45. ,    1.4],
       [  95. ,   50. ,    1.1],
       [   1. ,  103. ,    1.5],
       [  18. ,  104. ,    0.6],
       [  41. ,  103. ,    1.3],
       [  59. ,  101. ,    0.6],
       [  78. ,  104. ,    1.2],
       [ 102. ,   96. ,    1.2]])
        basis0 = BSplineBasis(4, np.array([ 0. ,  0. ,  0. ,  0. ,  0.7,  2. ,  3. ,  3. ,  3. ,  3. ]))
        basis1 = BSplineBasis(2, np.array([ 0. ,  0. ,  0.6,  2. ,  2. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [1.955]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 11)
        surf2.insert_knot(0, [0.924]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 13)
        surf2.insert_knot(0, [1.027]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [0.600]*1) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 6)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p4_rational_C0_periodic(self):
        controlpoints = np.array([[  96. ,   -5. ,    0.9],
       [  74. ,   73. ,    0.8],
       [  -4. ,  104. ,    0.7],
       [ -74. ,   67. ,    1.1],
       [ -97. ,   -4. ,    0.6],
       [ -76. ,  -74. ,    0.6],
       [  -3. , -100. ,    0.8],
       [  67. ,  -69. ,    0.6]])
        basis0 = BSplineBasis(4, np.array([-0.6,  0. ,  0. ,  0. ,  1.3,  1.9,  3. ,  3.9,  5.4,  6. ,  6. ,  6. ,  7.3]),0)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([2.321]*1) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 14)
        crv2.insert_knot([5.296]*2) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 16)
        crv2.insert_knot([2.383]*3) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 19)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p44_rational_C0_periodic(self):
        controlpoints = np.array([[  62. ,   -1. ,    1.1],       [  45. ,   42. ,    1.4],       [  -3. ,   58. ,    0.7],       [ -46. ,   41. ,    1.1],       [ -63. ,    0. ,    1.1],       [ -43. ,  -43. ,    1.4],       [   3. ,  -58. ,    1.4],       [  45. ,  -39. ,    0.8],       [  61. ,   -1. ,    0.9],       [  44. ,   45. ,    1.2],       [   2. ,   66. ,    0.6],       [ -45. ,   48. ,    1. ],       [ -67. ,    1. ,    1.4],       [ -44. ,  -50. ,    1. ],       [   1. ,  -64. ,    0.7],       [  45. ,  -51. ,    1.5],       [  65. ,    3. ,    1. ],       [  51. ,   52. ,    1.1],       [   2. ,   67. ,    1. ],       [ -53. ,   51. ,    1.3],       [ -71. ,    1. ,    0.5],       [ -46. ,  -51. ,    0.9],       [  -4. ,  -66. ,    1.5],       [  48. ,  -54. ,    1. ],       [  78. ,    4. ,    0.6],       [  48. ,   54. ,    0.7],       [  -3. ,   76. ,    0.6],       [ -53. ,   49. ,    0.7],       [ -76. ,   -4. ,    0.7],       [ -53. ,  -53. ,    1. ],       [  -5. ,  -79. ,    0.7],       [  51. ,  -54. ,    1.2],       [  79. ,    2. ,    1.4],       [  57. ,   55. ,    1.3],       [  -1. ,   77. ,    0.8],       [ -53. ,   53. ,    1.5],       [ -78. ,   -2. ,    0.8],       [ -54. ,  -58. ,    0.9],       [   4. ,  -82. ,    0.6],       [  59. ,  -58. ,    1.1],       [  85. ,   -3. ,    0.9],       [  61. ,   60. ,    1.1],       [   3. ,   84. ,    1.3],       [ -61. ,   62. ,    0.7],       [ -86. ,    0. ,    1.2],       [ -59. ,  -64. ,    0.9],       [   2. ,  -81. ,    0.7],       [  61. ,  -64. ,    1.2],       [  90. ,    1. ,    0.7],       [  62. ,   63. ,    0.7],       [   1. ,   91. ,    1.4],       [ -62. ,   59. ,    1. ],       [ -89. ,   -1. ,    0.7],       [ -64. ,  -62. ,    1.1],       [   4. ,  -94. ,    1.1],       [  60. ,  -61. ,    1.3],       [  92. ,   -4. ,    0.6],       [  67. ,   62. ,    1.4],       [  -1. ,   99. ,    1.1],       [ -63. ,   71. ,    0.7],       [ -91. ,   -1. ,    1.2],       [ -70. ,  -71. ,    1.2],       [   3. ,  -96. ,    1.5],       [  64. ,  -72. ,    1.1],       [ 102. ,   -5. ,    1.5],       [  74. ,   71. ,    1.2],       [  -1. ,   99. ,    0.7],       [ -67. ,   68. ,    0.8],       [ -98. ,    2. ,    1.2],       [ -73. ,  -72. ,    0.5],       [  -1. , -104. ,    0.9],       [  69. ,  -75. ,    0.7]])
        basis0 = BSplineBasis(4, np.array([-1.1,  0. ,  0. ,  0. ,  1. ,  2.2,  2.9,  4.4,  4.9,  6. ,  6. ,  6. ,  7. ]),0)
        basis1 = BSplineBasis(4, np.array([ 0. ,  0. ,  0. ,  0. ,  1.2,  2.1,  3.1,  4.1,  5.3,  6. ,  6. ,  6. ,  6. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [3.553]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 14)
        surf2.insert_knot(0, [3.909]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 16)
        surf2.insert_knot(0, [1.714]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(1, [4.933]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 14)
        surf2.insert_knot(1, [2.469]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [3.064]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 19)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p3(self):
        controlpoints = np.array([[   4.,    4.],
       [   9.,    3.],
       [  29.,    3.],
       [  47.,   -2.],
       [  58.,   -4.],
       [  66.,    1.],
       [  86.,    3.],
       [ 101.,   -1.]])
        basis0 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1.3,  2.4,  2.7,  3.9,  4.6,  6. ,  6. ,  6. ]))
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([3.583]*1) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 12)
        crv2.insert_knot([2.132]*2) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 14)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p43(self):
        controlpoints = np.array([[  -4.,    4.],       [  15.,   -3.],       [  29.,    3.],       [  42.,    3.],       [  48.,   -1.],       [  61.,    1.],       [  73.,    4.],       [  84.,   -2.],       [ 101.,   -3.],       [   0.,   16.],       [  14.,   13.],       [  27.,   13.],       [  39.,   14.],       [  51.,   19.],       [  66.,   11.],       [  78.,   14.],       [  87.,   14.],       [  96.,   17.],       [   1.,   37.],       [  16.,   32.],       [  25.,   32.],       [  38.,   33.],       [  50.,   35.],       [  67.,   33.],       [  70.,   28.],       [  90.,   28.],       [  98.,   31.],       [   3.,   53.],       [  14.,   49.],       [  20.,   52.],       [  32.,   46.],       [  51.,   54.],       [  64.,   52.],       [  79.,   48.],       [  91.,   47.],       [  96.,   50.],       [  -5.,   62.],       [  13.,   71.],       [  27.,   64.],       [  38.,   67.],       [  53.,   64.],       [  61.,   63.],       [  79.,   62.],       [  85.,   63.],       [  95.,   70.],       [   3.,   88.],       [  14.,   85.],       [  22.,   80.],       [  36.,   78.],       [  48.,   78.],       [  66.,   82.],       [  71.,   82.],       [  88.,   86.],       [ 100.,   83.],       [   1.,  100.],       [  12.,  101.],       [  23.,   97.],       [  36.,  100.],       [  45.,   99.],       [  57.,  103.],       [  73.,  102.],       [  87.,  102.],       [ 102.,   95.]])
        basis0 = BSplineBasis(4, np.array([ 0. ,  0. ,  0. ,  0. ,  1.3,  2.2,  2.7,  4.4,  5.1,  6. ,  6. ,  6. ,  6. ]))
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1.1,  2.1,  2.9,  3.7,  5. ,  5. ,  5. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [3.336]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 14)
        surf2.insert_knot(0, [3.233]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 16)
        surf2.insert_knot(0, [4.150]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(1, [2.412]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 11)
        surf2.insert_knot(1, [2.284]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 13)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p4_C0_periodic(self):
        controlpoints = np.array([[ 104.,   -2.],
       [  77.,   68.],
       [  19.,  100.],
       [ -46.,   83.],
       [ -92.,   36.],
       [ -93.,  -36.],
       [ -49.,  -89.],
       [  19., -100.],
       [  80.,  -62.]])
        basis0 = BSplineBasis(4, np.array([-0.7,  0. ,  0. ,  0. ,  1.1,  2.1,  3.3,  4.3,  5.1,  6.3,  7. ,  7. ,  7. ,  8.1]),0)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([3.676]*1) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 15)
        crv2.insert_knot([3.556]*2) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 17)
        crv2.insert_knot([5.748]*3) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 20)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p24_C0_periodic(self):
        controlpoints = np.array([[  57.,   -5.],
       [   1.,   61.],
       [ -57.,    2.],
       [  -1.,  -58.],
       [  67.,   -3.],
       [  -4.,   63.],
       [ -69.,    1.],
       [  -2.,  -64.],
       [  72.,   -3.],
       [  -3.,   73.],
       [ -78.,   -4.],
       [  -4.,  -74.],
       [  82.,   -4.],
       [   1.,   77.],
       [ -77.,   -5.],
       [  -2.,  -83.],
       [  89.,    4.],
       [  -2.,   85.],
       [ -90.,   -2.],
       [  -4.,  -85.],
       [  95.,    1.],
       [   0.,   90.],
       [ -98.,    4.],
       [  -4.,  -93.],
       [  95.,    4.],
       [   1.,  100.],
       [-100.,    2.],
       [   2., -100.]])
        basis0 = BSplineBasis(2, np.array([-1.4,  0. ,  1.3,  1.8,  2.6,  4. ,  5.3]),0)
        basis1 = BSplineBasis(4, np.array([ 0. ,  0. ,  0. ,  0. ,  0.9,  1.8,  3.3,  4. ,  4. ,  4. ,  4. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [1.665]*1) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 8)
        surf2.insert_knot(1, [2.021]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 12)
        surf2.insert_knot(1, [1.290]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 14)
        surf2.insert_knot(1, [1.791]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 17)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p43_C1_periodic(self):
        controlpoints = np.array([[  61.,    3.],       [  48.,   37.],       [  20.,   53.],       [ -23.,   60.],       [ -47.,   38.],       [ -61.,    4.],       [ -46.,  -32.],       [ -19.,  -56.],       [  19.,  -57.],       [  48.,  -31.],       [  68.,   -1.],       [  58.,   36.],       [  16.,   68.],       [ -19.,   59.],       [ -54.,   38.],       [ -71.,   -4.],       [ -51.,  -40.],       [ -21.,  -67.],       [  19.,  -68.],       [  50.,  -41.],       [  80.,    2.],       [  65.,   47.],       [  21.,   69.],       [ -21.,   75.],       [ -58.,   47.],       [ -80.,    4.],       [ -58.,  -47.],       [ -25.,  -73.],       [  26.,  -74.],       [  61.,  -40.],       [  85.,   -1.],       [  64.,   48.],       [  25.,   76.],       [ -25.,   76.],       [ -67.,   52.],       [ -88.,    2.],       [ -73.,  -48.],       [ -22.,  -76.],       [  30.,  -78.],       [  72.,  -45.],       [  88.,    2.],       [  77.,   52.],       [  25.,   84.],       [ -28.,   90.],       [ -80.,   52.],       [ -92.,   -5.],       [ -77.,  -57.],       [ -25.,  -89.],       [  27.,  -91.],       [  70.,  -50.],       [ 101.,   -5.],       [  85.,   61.],       [  33.,   96.],       [ -31.,   91.],       [ -81.,   54.],       [-103.,   -3.],       [ -86.,  -60.],       [ -31.,  -91.],       [  27.,  -92.],       [  82.,  -55.]])
        basis0 = BSplineBasis(4, np.array([ -1.6,  -0.8,   0. ,   0. ,   0.8,   2. ,   2.9,   4.1,   5.4,   6. ,   7.4,   8.2,   9. ,
         9. ,   9.8,  11. ]),1)
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1. ,  1.7,  2.7,  4. ,  4. ,  4. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [1.221]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 17)
        surf2.insert_knot(0, [4.042]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(0, [3.410]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(1, [1.925]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 10)
        surf2.insert_knot(1, [1.586]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 12)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p4_C2_periodic(self):
        controlpoints = np.array([[  99.,    4.],
       [  86.,   45.],
       [  50.,   85.],
       [   3.,   96.],
       [ -46.,   84.],
       [ -82.,   47.],
       [-102.,   -3.],
       [ -92.,  -52.],
       [ -51.,  -89.],
       [  -2., -100.],
       [  45.,  -86.],
       [  86.,  -52.]])
        basis0 = BSplineBasis(4, np.array([ -2.9,  -2.3,  -1.3,   0. ,   1.3,   2.2,   3.2,   4.4,   4.9,   5.9,   7. ,   7.9,   9.1,
         9.7,  10.7,  12. ,  13.3,  14.2,  15.2]),2)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([5.761]*1) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 20)
        crv2.insert_knot([3.488]*2) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 22)
        crv2.insert_knot([8.178]*3) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 25)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p44_C2_periodic(self):
        controlpoints = np.array([[  58.,    0.],       [  54.,   34.],       [  27.,   56.],       [  -4.,   57.],       [ -26.,   56.],       [ -52.,   29.],       [ -60.,   -1.],       [ -57.,  -27.],       [ -28.,  -55.],       [   0.,  -63.],       [  32.,  -52.],       [  54.,  -30.],       [  70.,    4.],       [  61.,   34.],       [  34.,   54.],       [   0.,   69.],       [ -39.,   61.],       [ -59.,   33.],       [ -66.,    3.],       [ -57.,  -34.],       [ -38.,  -56.],       [   2.,  -65.],       [  30.,  -57.],       [  60.,  -30.],       [  76.,   -5.],       [  65.,   34.],       [  39.,   61.],       [   0.,   78.],       [ -41.,   67.],       [ -66.,   39.],       [ -74.,    0.],       [ -69.,  -43.],       [ -37.,  -62.],       [   0.,  -79.],       [  34.,  -70.],       [  61.,  -40.],       [  83.,    1.],       [  72.,   37.],       [  37.,   72.],       [  -4.,   83.],       [ -43.,   77.],       [ -71.,   44.],       [ -89.,    0.],       [ -76.,  -40.],       [ -42.,  -69.],       [  -5.,  -82.],       [  37.,  -77.],       [  72.,  -38.],       [  93.,   -4.],       [  84.,   42.],       [  50.,   83.],       [  -3.,   96.],       [ -43.,   79.],       [ -83.,   46.],       [ -92.,   -4.],       [ -78.,  -42.],       [ -49.,  -78.],       [  -2.,  -93.],       [  45.,  -81.],       [  83.,  -47.],       [ 100.,    4.],       [  82.,   46.],       [  50.,   90.],       [  -3.,  102.],       [ -54.,   85.],       [ -82.,   45.],       [-102.,   -2.],       [ -86.,  -47.],       [ -49.,  -89.],       [   1., -100.],       [  48.,  -86.],       [  90.,  -50.]])
        basis0 = BSplineBasis(4, np.array([ -3.2,  -2. ,  -0.6,   0. ,   1.3,   2.3,   3.1,   4.4,   4.9,   6.1,   7.3,   8.4,   8.8,
        10. ,  11.4,  12. ,  13.3,  14.3,  15.1]),2)
        basis1 = BSplineBasis(4, np.array([ 0. ,  0. ,  0. ,  0. ,  1.1,  2. ,  3. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [8.084]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 20)
        surf2.insert_knot(0, [6.561]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [9.785]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(1, [1.272]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 11)
        surf2.insert_knot(1, [1.177]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 13)
        surf2.insert_knot(1, [1.583]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p3_rational(self):
        controlpoints = np.array([[  -2. ,   -5. ,   -2. ,    0.7],
       [  24. ,    4. ,   -3. ,    1.4],
       [  51. ,   -3. ,    3. ,    1.3],
       [  79. ,    1. ,   -2. ,    0.7],
       [ 100. ,   -1. ,    4. ,    1.2]])
        basis0 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1. ,  2.3,  3. ,  3. ,  3. ]))
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([1.985]*1) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 9)
        crv2.insert_knot([1.649]*2) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 11)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p23_rational(self):
        controlpoints = np.array([[   3. ,    1. ,   -5. ,    1.5],       [  18. ,    3. ,    3. ,    0.5],       [  30. ,   -3. ,   -4. ,    1.4],       [  47. ,    2. ,    1. ,    1.4],       [  63. ,    2. ,   -4. ,    1.1],       [  83. ,    4. ,    2. ,    1.3],       [ 102. ,    0. ,    3. ,    0.7],       [  -4. ,   15. ,    0. ,    1.4],       [  20. ,   15. ,   -2. ,    0.9],       [  34. ,   16. ,    0. ,    0.8],       [  53. ,   14. ,    4. ,    0.8],       [  62. ,   17. ,   -4. ,    0.6],       [  86. ,   19. ,   -5. ,    0.9],       [  99. ,   11. ,   -1. ,    1.1],       [  -4. ,   32. ,   -5. ,    0.9],       [  15. ,   23. ,    1. ,    0.6],       [  28. ,   30. ,    4. ,    1. ],       [  50. ,   32. ,    0. ,    1. ],       [  67. ,   30. ,   -2. ,    1. ],       [  81. ,   25. ,    0. ,    1.4],       [  98. ,   24. ,    0. ,    1.4],       [   3. ,   45. ,   -1. ,    0.7],       [  18. ,   42. ,    3. ,    0.7],       [  34. ,   41. ,   -5. ,    0.7],       [  50. ,   46. ,    2. ,    1. ],       [  65. ,   43. ,    3. ,    0.8],       [  88. ,   40. ,    4. ,    1.2],       [ 103. ,   40. ,    0. ,    0.8],       [  -1. ,   56. ,   -1. ,    1.2],       [  17. ,   58. ,   -5. ,    1.5],       [  32. ,   59. ,   -2. ,    0.9],       [  46. ,   56. ,   -5. ,    1. ],       [  63. ,   61. ,    4. ,    1. ],       [  86. ,   55. ,   -5. ,    1.1],       [ 100. ,   58. ,   -4. ,    0.6],       [  -4. ,   71. ,    2. ,    1.4],       [  12. ,   67. ,   -3. ,    0.7],       [  32. ,   67. ,    4. ,    0.6],       [  48. ,   74. ,   -2. ,    0.9],       [  69. ,   69. ,    3. ,    0.6],       [  79. ,   73. ,    3. ,    1. ],       [ 103. ,   76. ,   -2. ,    1. ],       [  -2. ,   86. ,    4. ,    0.5],       [  19. ,   84. ,    4. ,    1.4],       [  34. ,   83. ,    3. ,    0.8],       [  51. ,   88. ,   -3. ,    1.1],       [  67. ,   81. ,    2. ,    1.1],       [  81. ,   86. ,   -1. ,    0.7],       [ 104. ,   85. ,    3. ,    1.1],       [  -3. ,   98. ,   -4. ,    1. ],       [  17. ,  100. ,    3. ,    0.7],       [  37. ,  102. ,    0. ,    0.8],       [  46. ,   99. ,    4. ,    1.4],       [  65. ,   97. ,   -5. ,    0.8],       [  82. ,   97. ,    3. ,    1.2],       [  99. ,   95. ,    3. ,    1.4]])
        basis0 = BSplineBasis(2, np.array([ 0. ,  0. ,  0.7,  2.1,  3.3,  4.3,  5. ,  6. ,  6. ]))
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  0.9,  1.8,  2.7,  4.3,  5. ,  6. ,  6. ,  6. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [2.195]*1) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 10)
        surf2.insert_knot(1, [2.214]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 12)
        surf2.insert_knot(1, [2.195]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 14)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p222_rational(self):
        controlpoints = np.array([[   1. ,   -4. ,    1. ,    1. ],       [  30. ,   -5. ,    1. ,    1. ],       [  62. ,    3. ,    1. ,    1.3],       [ 104. ,    0. ,   -1. ,    0.9],       [  -1. ,   17. ,    2. ,    0.9],       [  28. ,   22. ,   -1. ,    1.4],       [  68. ,   21. ,    0. ,    0.7],       [  97. ,   20. ,   -3. ,    1.2],       [   1. ,   36. ,   -2. ,    0.6],       [  32. ,   36. ,    1. ,    1.1],       [  67. ,   40. ,   -2. ,    0.5],       [  98. ,   37. ,    2. ,    1.2],       [  -1. ,   56. ,   -2. ,    0.9],       [  36. ,   59. ,   -4. ,    0.6],       [  62. ,   55. ,   -1. ,    0.7],       [  98. ,   58. ,   -3. ,    1.2],       [  -5. ,   84. ,    1. ,    1.3],       [  31. ,   78. ,   -3. ,    0.8],       [  70. ,   82. ,    2. ,    0.9],       [  97. ,   82. ,   -3. ,    1.1],       [   3. ,   95. ,    1. ,    0.6],       [  31. ,  104. ,   -5. ,    1.2],       [  71. ,   98. ,   -1. ,    1.2],       [ 102. ,   96. ,   -5. ,    1.5],       [   2. ,    1. ,   23. ,    1. ],       [  29. ,    0. ,   19. ,    0.6],       [  66. ,    0. ,   18. ,    0.7],       [  98. ,   -2. ,   24. ,    0.8],       [   1. ,   17. ,   23. ,    0.8],       [  30. ,   24. ,   23. ,    1.4],       [  65. ,   15. ,   24. ,    0.9],       [  95. ,   15. ,   22. ,    0.6],       [  -3. ,   43. ,   24. ,    0.8],       [  34. ,   38. ,   22. ,    1.5],       [  64. ,   43. ,   19. ,    0.9],       [ 101. ,   42. ,   16. ,    0.9],       [   4. ,   62. ,   17. ,    1.3],       [  29. ,   57. ,   19. ,    1.3],       [  66. ,   60. ,   23. ,    0.9],       [  99. ,   60. ,   22. ,    0.9],       [  -4. ,   76. ,   24. ,    1.2],       [  36. ,   83. ,   23. ,    0.8],       [  63. ,   84. ,   20. ,    0.8],       [  96. ,   75. ,   21. ,    1.4],       [   4. ,  102. ,   20. ,    0.7],       [  34. ,  103. ,   22. ,    0.9],       [  69. ,   95. ,   18. ,    1. ],       [ 103. ,  103. ,   19. ,    1. ],       [   2. ,    4. ,   42. ,    1.3],       [  31. ,   -3. ,   38. ,    1.2],       [  70. ,    0. ,   37. ,    1.3],       [ 104. ,    4. ,   35. ,    0.9],       [   0. ,   23. ,   37. ,    1.2],       [  29. ,   22. ,   38. ,    1. ],       [  70. ,   23. ,   37. ,    1.2],       [ 104. ,   23. ,   44. ,    1.1],       [   3. ,   42. ,   41. ,    1.2],       [  33. ,   35. ,   35. ,    1.1],       [  62. ,   42. ,   43. ,    0.6],       [ 102. ,   43. ,   37. ,    0.5],       [   0. ,   64. ,   38. ,    0.8],       [  31. ,   59. ,   35. ,    0.5],       [  62. ,   58. ,   43. ,    1.2],       [ 100. ,   56. ,   44. ,    1. ],       [  -4. ,   83. ,   44. ,    0.5],       [  35. ,   83. ,   36. ,    0.6],       [  68. ,   81. ,   41. ,    1.2],       [  96. ,   84. ,   37. ,    0.8],       [  -5. ,  101. ,   40. ,    1.3],       [  37. ,  102. ,   35. ,    1.1],       [  62. ,   98. ,   40. ,    0.8],       [ 104. ,  104. ,   42. ,    1. ],       [  -5. ,   -4. ,   56. ,    1.3],       [  29. ,   -4. ,   59. ,    0.9],       [  65. ,   -3. ,   58. ,    0.8],       [ 102. ,    3. ,   57. ,    0.6],       [   1. ,   24. ,   61. ,    0.8],       [  30. ,   17. ,   58. ,    1.5],       [  71. ,   22. ,   58. ,    1. ],       [  97. ,   21. ,   62. ,    0.5],       [   3. ,   35. ,   57. ,    0.9],       [  36. ,   36. ,   62. ,    1. ],       [  63. ,   40. ,   63. ,    1.3],       [  96. ,   43. ,   56. ,    0.6],       [  -4. ,   60. ,   64. ,    0.9],       [  36. ,   60. ,   61. ,    1.4],       [  65. ,   58. ,   60. ,    0.9],       [ 101. ,   57. ,   56. ,    1.1],       [  -5. ,   82. ,   64. ,    1. ],       [  30. ,   75. ,   63. ,    0.6],       [  61. ,   80. ,   56. ,    0.9],       [  97. ,   80. ,   56. ,    0.9],       [  -1. ,  104. ,   55. ,    0.7],       [  31. ,   98. ,   59. ,    0.7],       [  66. ,  103. ,   63. ,    0.7],       [ 100. ,   95. ,   57. ,    1.5],       [   1. ,   -1. ,   78. ,    1. ],       [  33. ,   -5. ,   77. ,    0.6],       [  62. ,   -5. ,   81. ,    0.7],       [  99. ,    3. ,   81. ,    0.6],       [  -4. ,   22. ,   82. ,    1.1],       [  37. ,   17. ,   79. ,    1.3],       [  71. ,   19. ,   75. ,    1.2],       [  97. ,   20. ,   80. ,    1.3],       [   4. ,   42. ,   79. ,    0.8],       [  31. ,   42. ,   81. ,    0.6],       [  61. ,   43. ,   78. ,    1. ],       [  95. ,   40. ,   81. ,    1.5],       [  -2. ,   62. ,   82. ,    0.8],       [  38. ,   58. ,   78. ,    1.3],       [  71. ,   55. ,   82. ,    1.1],       [  96. ,   55. ,   82. ,    1.3],       [   4. ,   84. ,   78. ,    0.7],       [  36. ,   75. ,   84. ,    0.8],       [  71. ,   83. ,   80. ,    0.8],       [ 104. ,   81. ,   79. ,    1.4],       [   2. ,   98. ,   84. ,    0.8],       [  32. ,  103. ,   76. ,    0.8],       [  65. ,  104. ,   79. ,    1.3],       [ 103. ,   98. ,   84. ,    0.8],       [  -1. ,    3. ,  101. ,    0.9],       [  29. ,    4. ,   99. ,    1.2],       [  65. ,   -3. ,  102. ,    1. ],       [ 103. ,   -3. ,   96. ,    0.6],       [  -1. ,   23. ,   98. ,    1.2],       [  36. ,   17. ,  102. ,    1. ],       [  62. ,   22. ,   96. ,    1.2],       [  98. ,   16. ,  102. ,    1.1],       [  -1. ,   36. ,  103. ,    1. ],       [  36. ,   43. ,   96. ,    0.8],       [  62. ,   39. ,   95. ,    1.4],       [  97. ,   39. ,  103. ,    0.9],       [  -1. ,   62. ,  101. ,    1. ],       [  28. ,   59. ,   95. ,    0.7],       [  67. ,   62. ,   95. ,    1.1],       [ 103. ,   56. ,  101. ,    0.9],       [  -4. ,   75. ,   95. ,    0.6],       [  35. ,   79. ,   95. ,    0.6],       [  70. ,   81. ,  104. ,    0.8],       [  95. ,   81. ,  100. ,    1. ],       [   0. ,  101. ,   99. ,    0.5],       [  35. ,  104. ,   97. ,    0.7],       [  65. ,  102. ,  100. ,    0.9],       [  97. ,   96. ,   95. ,    0.8]])
        basis0 = BSplineBasis(2, np.array([ 0. ,  0. ,  1.1,  2.2,  3. ,  3. ]))
        basis1 = BSplineBasis(2, np.array([ 0. ,  0. ,  0.9,  2.2,  3. ,  4.1,  5. ,  5. ]))
        basis2 = BSplineBasis(2, np.array([ 0. ,  0. ,  1.2,  2. ,  3.4,  3.8,  5. ,  5. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,True)
        vol2 = vol.clone()
        vol2.insert_knot(0, [1.632]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 7)
        vol2.insert_knot(1, [2.136]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 9)
        vol2.insert_knot(2, [2.777]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 9)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p3_rational_C0_periodic(self):
        controlpoints = np.array([[ 101. ,   -4. ,   -3. ,    1.1],
       [  46. ,   84. ,   -5. ,    0.6],
       [ -54. ,   82. ,   -1. ,    0.8],
       [-104. ,   -4. ,    1. ,    1.3],
       [ -55. ,  -83. ,    3. ,    1.2],
       [  50. ,  -92. ,   -4. ,    1.1]])
        basis0 = BSplineBasis(3, np.array([-1.1,  0. ,  0. ,  1.3,  2.3,  2.7,  3.9,  5. ,  5. ,  6.3]),0)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([3.818]*1) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 11)
        crv2.insert_knot([1.491]*2) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 13)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p43_rational_C0_periodic(self):
        controlpoints = np.array([[  56. ,   -3. ,   -5. ,    1.3],       [  39. ,   46. ,    2. ,    1.4],       [  -5. ,   61. ,   -1. ,    1. ],       [ -43. ,   39. ,    0. ,    1.2],       [ -61. ,   -4. ,    1. ,    1.3],       [ -42. ,  -47. ,    1. ,    1. ],       [   4. ,  -62. ,    2. ,    0.6],       [  38. ,  -45. ,    1. ,    0.9],       [  69. ,    2. ,   -5. ,    1.4],       [  48. ,   47. ,   -5. ,    1.2],       [  -2. ,   69. ,   -2. ,    1.2],       [ -49. ,   49. ,   -2. ,    0.7],       [ -75. ,   -4. ,   -4. ,    0.7],       [ -53. ,  -52. ,    3. ,    0.8],       [  -3. ,  -70. ,    4. ,    0.9],       [  44. ,  -54. ,    4. ,    0.9],       [  77. ,    1. ,   -3. ,    0.6],       [  61. ,   52. ,    2. ,    0.7],       [   1. ,   82. ,    2. ,    1.3],       [ -53. ,   56. ,    0. ,    0.5],       [ -76. ,   -5. ,    1. ,    1.1],       [ -56. ,  -53. ,   -2. ,    0.7],       [  -5. ,  -81. ,    0. ,    1.3],       [  56. ,  -59. ,    4. ,    0.5],       [  88. ,   -4. ,   -5. ,    0.9],       [  65. ,   59. ,   -3. ,    0.7],       [  -4. ,   85. ,    1. ,    1. ],       [ -68. ,   64. ,   -1. ,    1. ],       [ -92. ,    1. ,   -3. ,    0.6],       [ -63. ,  -66. ,    3. ,    1. ],       [  -3. ,  -89. ,    3. ,    0.6],       [  65. ,  -69. ,   -4. ,    1.2],       [ 103. ,    3. ,   -3. ,    1.4],       [  69. ,   69. ,    2. ,    1.3],       [  -1. ,  103. ,    3. ,    0.7],       [ -73. ,   68. ,   -2. ,    1.4],       [ -99. ,    2. ,    2. ,    1.2],       [ -74. ,  -72. ,   -1. ,    1.2],       [   4. , -102. ,    0. ,    0.5],       [  66. ,  -70. ,    4. ,    0.8]])
        basis0 = BSplineBasis(4, np.array([-1.3,  0. ,  0. ,  0. ,  1.1,  2.3,  3.1,  4.2,  4.7,  6. ,  6. ,  6. ,  7.1]),0)
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1.1,  2. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [2.434]*1) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 14)
        surf2.insert_knot(0, [4.449]*2) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 16)
        surf2.insert_knot(0, [1.738]*3) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(1, [1.942]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 9)
        surf2.insert_knot(1, [1.585]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 11)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p433_rational_C0_periodic(self):
        controlpoints = np.array([[  45. ,   -3. ,   -1. ,    1.3],       [  33. ,   31. ,    2. ,    1.2],       [   1. ,   53. ,   -5. ,    1.1],       [ -37. ,   38. ,   -5. ,    1.1],       [ -55. ,    0. ,    3. ,    0.9],       [ -32. ,  -38. ,   -3. ,    0.8],       [   3. ,  -46. ,    2. ,    1.2],       [  31. ,  -39. ,    0. ,    0.6],       [  58. ,    4. ,   -4. ,    1. ],       [  39. ,   41. ,   -1. ,    0.8],       [  -2. ,   61. ,    2. ,    0.6],       [ -42. ,   40. ,   -4. ,    1.3],       [ -64. ,    2. ,    3. ,    0.6],       [ -38. ,  -45. ,   -2. ,    1. ],       [  -1. ,  -59. ,   -4. ,    0.9],       [  38. ,  -42. ,   -2. ,    1.4],       [  73. ,   -5. ,   -4. ,    0.8],       [  47. ,   47. ,   -4. ,    0.8],       [  -3. ,   69. ,   -1. ,    0.9],       [ -47. ,   45. ,   -5. ,    1.1],       [ -66. ,    1. ,   -1. ,    1.2],       [ -51. ,  -51. ,   -3. ,    1.5],       [  -1. ,  -71. ,    0. ,    0.5],       [  53. ,  -52. ,    2. ,    1.3],       [  75. ,    1. ,   -5. ,    0.8],       [  52. ,   53. ,   -1. ,    0.8],       [   2. ,   81. ,   -4. ,    1.1],       [ -61. ,   53. ,   -1. ,    0.6],       [ -84. ,    4. ,    4. ,    1.1],       [ -55. ,  -56. ,   -1. ,    0.7],       [   2. ,  -80. ,   -4. ,    0.6],       [  59. ,  -53. ,   -3. ,    0.6],       [  94. ,   -2. ,    0. ,    0.7],       [  67. ,   62. ,   -5. ,    1.5],       [   3. ,   92. ,    2. ,    1. ],       [ -66. ,   61. ,   -3. ,    1.1],       [ -94. ,    3. ,   -4. ,    0.6],       [ -68. ,  -64. ,   -2. ,    1.1],       [  -5. ,  -93. ,    0. ,    0.6],       [  62. ,  -66. ,   -5. ,    0.8],       [  97. ,    4. ,    1. ,    1.1],       [  67. ,   65. ,    0. ,    1.2],       [   3. ,  102. ,   -1. ,    0.9],       [ -75. ,   75. ,    1. ,    1.2],       [-102. ,    0. ,   -1. ,    1.5],       [ -69. ,  -72. ,   -1. ,    0.5],       [  -5. , -101. ,    0. ,    0.7],       [  74. ,  -70. ,   -4. ,    1.3],       [  45. ,   -5. ,   11. ,    1.3],       [  36. ,   31. ,   13. ,    1.3],       [   4. ,   47. ,   13. ,    0.9],       [ -36. ,   34. ,    6. ,    1.3],       [ -47. ,   -2. ,    5. ,    0.7],       [ -33. ,  -32. ,   14. ,    0.8],       [  -2. ,  -50. ,   13. ,    1.3],       [  34. ,  -34. ,    6. ,    1.1],       [  57. ,    1. ,   13. ,    0.8],       [  42. ,   45. ,    8. ,    0.9],       [  -2. ,   63. ,   10. ,    1.4],       [ -47. ,   47. ,   13. ,    1.1],       [ -64. ,   -1. ,    9. ,    0.6],       [ -40. ,  -39. ,   10. ,    1.3],       [   4. ,  -65. ,    7. ,    0.5],       [  43. ,  -40. ,   10. ,    1.3],       [  70. ,   -1. ,   11. ,    1.4],       [  48. ,   49. ,    5. ,    0.7],       [  -2. ,   68. ,    5. ,    0.7],       [ -46. ,   48. ,   13. ,    0.7],       [ -67. ,   -5. ,    5. ,    1.3],       [ -50. ,  -52. ,   13. ,    1.2],       [   0. ,  -75. ,    8. ,    0.6],       [  47. ,  -47. ,    5. ,    1.1],       [  75. ,    4. ,    5. ,    1.2],       [  58. ,   56. ,   13. ,    0.7],       [   1. ,   81. ,   10. ,    0.9],       [ -60. ,   55. ,   12. ,    0.6],       [ -85. ,    2. ,    9. ,    1.1],       [ -56. ,  -58. ,    5. ,    1.4],       [   2. ,  -77. ,   10. ,    1.1],       [  53. ,  -58. ,   10. ,    1.4],       [  88. ,    0. ,    8. ,    1.3],       [  63. ,   59. ,   11. ,    0.6],       [  -5. ,   89. ,   12. ,    1. ],       [ -60. ,   62. ,    6. ,    1.4],       [ -87. ,   -1. ,   12. ,    1.4],       [ -65. ,  -60. ,   14. ,    1.4],       [   1. ,  -86. ,    9. ,    0.5],       [  59. ,  -67. ,    5. ,    1. ],       [ 104. ,    3. ,   13. ,    0.8],       [  72. ,   68. ,   10. ,    1.4],       [   2. ,  101. ,    9. ,    1.1],       [ -72. ,   74. ,    6. ,    0.5],       [-104. ,   -2. ,    6. ,    0.6],       [ -75. ,  -72. ,    5. ,    1.3],       [  -3. , -101. ,    6. ,    0.6],       [  75. ,  -74. ,   12. ,    0.8],       [  54. ,    2. ,   17. ,    0.6],       [  37. ,   38. ,   17. ,    1.2],       [   3. ,   49. ,   15. ,    1.3],       [ -40. ,   34. ,   17. ,    0.9],       [ -46. ,   -1. ,   22. ,    1.1],       [ -37. ,  -36. ,   16. ,    0.8],       [   2. ,  -55. ,   17. ,    0.5],       [  38. ,  -35. ,   23. ,    1.1],       [  57. ,   -5. ,   16. ,    1. ],       [  40. ,   46. ,   22. ,    1. ],       [   4. ,   63. ,   15. ,    1.1],       [ -46. ,   41. ,   22. ,    1. ],       [ -61. ,   -1. ,   23. ,    1.3],       [ -45. ,  -48. ,   15. ,    0.7],       [  -2. ,  -59. ,   24. ,    1.1],       [  47. ,  -38. ,   16. ,    1.5],       [  70. ,    4. ,   18. ,    0.9],       [  50. ,   44. ,   23. ,    1.4],       [   0. ,   71. ,   15. ,    1. ],       [ -54. ,   47. ,   21. ,    0.9],       [ -73. ,    1. ,   19. ,    1.1],       [ -49. ,  -54. ,   18. ,    0.6],       [  -1. ,  -75. ,   19. ,    1.1],       [  51. ,  -50. ,   16. ,    1.1],       [  78. ,    0. ,   19. ,    1.4],       [  58. ,   55. ,   18. ,    0.8],       [   3. ,   76. ,   23. ,    1.4],       [ -55. ,   58. ,   18. ,    0.9],       [ -79. ,   -2. ,   20. ,    0.9],       [ -55. ,  -57. ,   21. ,    1.1],       [  -2. ,  -85. ,   20. ,    1.3],       [  59. ,  -53. ,   23. ,    1.3],       [  94. ,   -3. ,   22. ,    1.2],       [  63. ,   62. ,   21. ,    0.5],       [   4. ,   88. ,   18. ,    0.6],       [ -65. ,   60. ,   24. ,    0.6],       [ -92. ,   -5. ,   15. ,    1.3],       [ -66. ,  -67. ,   20. ,    0.9],       [   0. ,  -87. ,   24. ,    1.3],       [  64. ,  -67. ,   18. ,    1. ],       [ 103. ,   -4. ,   18. ,    0.7],       [  72. ,   75. ,   24. ,    0.6],       [  -2. ,  101. ,   22. ,    1.1],       [ -68. ,   70. ,   21. ,    1. ],       [-103. ,    2. ,   16. ,    1.1],       [ -76. ,  -70. ,   17. ,    1.4],       [   3. ,  -98. ,   20. ,    0.6],       [  66. ,  -72. ,   15. ,    0.5],       [  50. ,    2. ,   31. ,    1. ],       [  33. ,   30. ,   29. ,    1.2],       [   2. ,   48. ,   25. ,    0.7],       [ -39. ,   31. ,   29. ,    0.9],       [ -53. ,   -3. ,   30. ,    1. ],       [ -33. ,  -35. ,   33. ,    0.8],       [  -5. ,  -47. ,   33. ,    1. ],       [  39. ,  -34. ,   25. ,    1. ],       [  63. ,   -3. ,   29. ,    0.7],       [  46. ,   39. ,   34. ,    1. ],       [   2. ,   57. ,   26. ,    0.5],       [ -46. ,   44. ,   30. ,    1.1],       [ -60. ,   -5. ,   33. ,    1. ],       [ -40. ,  -40. ,   26. ,    1.5],       [   2. ,  -65. ,   27. ,    1.4],       [  46. ,  -40. ,   33. ,    1.3],       [  67. ,    3. ,   33. ,    0.9],       [  49. ,   46. ,   27. ,    0.9],       [   0. ,   68. ,   30. ,    1.4],       [ -51. ,   51. ,   29. ,    0.8],       [ -66. ,   -4. ,   31. ,    1.1],       [ -53. ,  -49. ,   25. ,    1.1],       [   2. ,  -74. ,   31. ,    0.9],       [  54. ,  -53. ,   34. ,    0.9],       [  77. ,   -4. ,   25. ,    0.6],       [  55. ,   59. ,   25. ,    0.5],       [   0. ,   79. ,   31. ,    1.5],       [ -57. ,   57. ,   27. ,    1. ],       [ -76. ,    1. ,   28. ,    0.6],       [ -55. ,  -55. ,   34. ,    0.9],       [  -1. ,  -80. ,   33. ,    1.4],       [  60. ,  -61. ,   29. ,    1.2],       [  85. ,    0. ,   25. ,    1.3],       [  68. ,   66. ,   27. ,    0.8],       [  -3. ,   85. ,   25. ,    0.9],       [ -68. ,   65. ,   28. ,    0.5],       [ -86. ,   -1. ,   27. ,    0.7],       [ -62. ,  -65. ,   31. ,    1.2],       [  -5. ,  -92. ,   33. ,    0.7],       [  66. ,  -63. ,   26. ,    1.1],       [ 101. ,    1. ,   26. ,    0.6],       [  72. ,   68. ,   34. ,    1.5],       [   4. ,   99. ,   33. ,    0.5],       [ -72. ,   71. ,   30. ,    0.9],       [ -98. ,    1. ,   33. ,    0.5],       [ -72. ,  -73. ,   26. ,    1.1],       [   2. , -104. ,   32. ,    1. ],       [  70. ,  -74. ,   28. ,    0.8],       [  51. ,   -5. ,   36. ,    1.2],       [  36. ,   37. ,   38. ,    0.8],       [  -3. ,   50. ,   36. ,    1.2],       [ -38. ,   35. ,   42. ,    0.8],       [ -47. ,   -3. ,   42. ,    0.5],       [ -31. ,  -33. ,   36. ,    0.6],       [   2. ,  -55. ,   39. ,    1. ],       [  31. ,  -39. ,   39. ,    0.5],       [  58. ,   -2. ,   44. ,    0.8],       [  43. ,   44. ,   38. ,    0.6],       [   4. ,   64. ,   37. ,    0.6],       [ -42. ,   38. ,   44. ,    0.8],       [ -62. ,   -4. ,   43. ,    0.9],       [ -46. ,  -40. ,   39. ,    1.1],       [  -4. ,  -59. ,   38. ,    0.8],       [  42. ,  -47. ,   42. ,    1. ],       [  68. ,   -3. ,   39. ,    1.5],       [  48. ,   51. ,   35. ,    1.5],       [   3. ,   71. ,   43. ,    1.3],       [ -52. ,   45. ,   42. ,    1.4],       [ -74. ,   -3. ,   41. ,    0.5],       [ -53. ,  -51. ,   41. ,    0.6],       [   4. ,  -72. ,   35. ,    0.7],       [  53. ,  -53. ,   42. ,    1.4],       [  79. ,   -4. ,   41. ,    0.8],       [  60. ,   53. ,   38. ,    0.5],       [   3. ,   77. ,   35. ,    0.7],       [ -60. ,   56. ,   37. ,    0.9],       [ -76. ,    2. ,   38. ,    1.4],       [ -62. ,  -56. ,   40. ,    0.9],       [   1. ,  -85. ,   40. ,    1.4],       [  56. ,  -54. ,   44. ,    0.8],       [  86. ,   -5. ,   40. ,    0.8],       [  61. ,   61. ,   40. ,    0.9],       [   1. ,   94. ,   39. ,    0.5],       [ -65. ,   61. ,   35. ,    0.8],       [ -88. ,    4. ,   41. ,    0.9],       [ -60. ,  -61. ,   43. ,    1.4],       [   0. ,  -91. ,   40. ,    1.2],       [  60. ,  -68. ,   39. ,    1.1],       [ 104. ,   -2. ,   38. ,    0.6],       [  71. ,   73. ,   36. ,    0.9],       [  -1. ,  103. ,   42. ,    1.4],       [ -74. ,   71. ,   42. ,    0.8],       [ -96. ,    2. ,   37. ,    0.8],       [ -74. ,  -69. ,   40. ,    1.4],       [   3. ,  -98. ,   37. ,    0.6],       [  71. ,  -74. ,   35. ,    0.6]])
        basis0 = BSplineBasis(4, np.array([-1.3,  0. ,  0. ,  0. ,  1. ,  1.6,  3.1,  4.3,  4.7,  6. ,  6. ,  6. ,  7. ]),0)
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1.4,  2.3,  2.7,  4. ,  4. ,  4. ]))
        basis2 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  0.7,  2.4,  3. ,  3. ,  3. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,True)
        vol2 = vol.clone()
        vol2.insert_knot(0, [1.363]*1) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 14)
        vol2.insert_knot(0, [3.132]*2) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 16)
        vol2.insert_knot(0, [4.000]*3) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 19)
        vol2.insert_knot(1, [1.587]*1) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 10)
        vol2.insert_knot(1, [2.419]*2) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 12)
        vol2.insert_knot(2, [1.367]*1) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 9)
        vol2.insert_knot(2, [1.941]*2) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 11)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p3_rational_C1_periodic(self):
        controlpoints = np.array([[ 103. ,    2. ,   -4. ,    0.7],
       [  75. ,   72. ,    1. ,    0.9],
       [  -2. ,  103. ,   -1. ,    0.8],
       [ -76. ,   73. ,    1. ,    0.6],
       [-105. ,    4. ,   -2. ,    0.9],
       [ -75. ,  -75. ,   -1. ,    1.4],
       [   1. , -103. ,   -2. ,    0.8],
       [  69. ,  -68. ,   -3. ,    0.7]])
        basis0 = BSplineBasis(3, np.array([ -2.3,  -1.1,   0. ,   1.3,   2.1,   2.9,   3.8,   5.4,   5.7,   6.9,   8. ,   9.3,  10.1]),1)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([1.422]*1) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 14)
        crv2.insert_knot([6.423]*2) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 16)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p33_rational_C1_periodic(self):
        controlpoints = np.array([[  60. ,    4. ,    1. ,    1.4],       [  38. ,   47. ,    2. ,    0.9],       [  -2. ,   57. ,    0. ,    1.2],       [ -39. ,   40. ,   -2. ,    1.3],       [ -65. ,   -1. ,   -5. ,    0.6],       [ -45. ,  -48. ,   -5. ,    1.1],       [   0. ,  -56. ,    4. ,    1.2],       [  37. ,  -44. ,    0. ,    0.6],       [  69. ,    4. ,   -5. ,    1.2],       [  56. ,   51. ,    0. ,    1.3],       [   3. ,   74. ,    4. ,    1.1],       [ -53. ,   47. ,    2. ,    1. ],       [ -72. ,    0. ,   -4. ,    1.1],       [ -55. ,  -56. ,    3. ,    0.5],       [   3. ,  -78. ,    0. ,    1.3],       [  48. ,  -57. ,   -5. ,    1. ],       [  86. ,    0. ,   -1. ,    1.3],       [  65. ,   64. ,    0. ,    1. ],       [   0. ,   85. ,    0. ,    0.5],       [ -66. ,   60. ,   -1. ,    1.5],       [ -83. ,   -2. ,    1. ,    0.8],       [ -66. ,  -63. ,   -3. ,    1. ],       [   2. ,  -89. ,    0. ,    0.7],       [  56. ,  -65. ,    2. ,    1.2],       [ 102. ,   -5. ,   -3. ,    1. ],       [  70. ,   73. ,   -3. ,    0.7],       [   1. ,  101. ,   -1. ,    0.6],       [ -70. ,   70. ,   -1. ,    1.5],       [-101. ,   -3. ,   -2. ,    1.4],       [ -72. ,  -69. ,    3. ,    0.7],       [  -2. , -100. ,    1. ,    0.6],       [  68. ,  -71. ,   -5. ,    0.7]])
        basis0 = BSplineBasis(3, np.array([-1.7, -1. ,  0. ,  1.1,  1.9,  3. ,  4.1,  4.9,  6.3,  7. ,  8. ,  9.1,  9.9]),1)
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  0.7,  2. ,  2. ,  2. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [3.435]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 14)
        surf2.insert_knot(0, [2.921]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [0.700]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 8)
        surf2.insert_knot(1, [0.700]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 10)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p424_rational_C1_periodic(self):
        controlpoints = np.array([[  47. ,    1. ,    3. ,    0.7],       [  39. ,   31. ,   -3. ,    1. ],       [  12. ,   46. ,    2. ,    1.4],       [ -13. ,   46. ,    4. ,    0.6],       [ -42. ,   25. ,    2. ,    0.6],       [ -54. ,   -3. ,    3. ,    1. ],       [ -40. ,  -34. ,   -1. ,    0.6],       [ -21. ,  -51. ,    1. ,    1.3],       [  14. ,  -52. ,   -1. ,    1.4],       [  44. ,  -31. ,   -1. ,    0.5],       [  54. ,    1. ,   -5. ,    1. ],       [  51. ,   35. ,   -2. ,    1.2],       [  19. ,   50. ,   -5. ,    1.3],       [ -15. ,   59. ,    3. ,    0.6],       [ -48. ,   31. ,   -1. ,    0.6],       [ -60. ,   -4. ,   -1. ,    1.4],       [ -50. ,  -32. ,    4. ,    1.1],       [ -23. ,  -54. ,   -2. ,    0.8],       [  15. ,  -53. ,   -4. ,    0.8],       [  45. ,  -30. ,    2. ,    1.5],       [  61. ,   -5. ,    2. ,    1.2],       [  49. ,   41. ,    4. ,    0.7],       [  22. ,   65. ,   -5. ,    1.2],       [ -25. ,   68. ,    3. ,    0.7],       [ -50. ,   39. ,   -4. ,    0.5],       [ -69. ,   -4. ,   -1. ,    0.7],       [ -53. ,  -44. ,   -2. ,    0.8],       [ -22. ,  -59. ,   -3. ,    1.2],       [  20. ,  -66. ,   -4. ,    1.4],       [  55. ,  -44. ,   -1. ,    0.7],       [  77. ,   -4. ,    1. ,    0.5],       [  63. ,   41. ,    1. ,    0.5],       [  21. ,   67. ,    3. ,    1.1],       [ -21. ,   74. ,    3. ,    1.2],       [ -64. ,   39. ,    3. ,    1.1],       [ -78. ,    2. ,   -3. ,    1.1],       [ -62. ,  -44. ,    3. ,    1.4],       [ -26. ,  -69. ,   -3. ,    1.3],       [  25. ,  -75. ,    0. ,    0.5],       [  61. ,  -40. ,    1. ,    0.6],       [  84. ,   -3. ,   -3. ,    0.5],       [  63. ,   46. ,   -3. ,    1.3],       [  25. ,   79. ,    3. ,    1.2],       [ -28. ,   77. ,    3. ,    1. ],       [ -66. ,   48. ,    0. ,    1.2],       [ -83. ,   -5. ,   -4. ,    1.3],       [ -66. ,  -48. ,   -2. ,    1.3],       [ -23. ,  -81. ,   -5. ,    0.5],       [  21. ,  -81. ,   -2. ,    0.9],       [  68. ,  -53. ,   -1. ,    0.7],       [  93. ,    3. ,   -1. ,    0.5],       [  79. ,   56. ,   -5. ,    0.9],       [  25. ,   88. ,   -1. ,    0.9],       [ -29. ,   90. ,   -3. ,    1.1],       [ -72. ,   48. ,    0. ,    0.5],       [ -90. ,   -3. ,    1. ,    1.1],       [ -72. ,  -53. ,    1. ,    0.7],       [ -27. ,  -89. ,    1. ,    0.8],       [  23. ,  -84. ,    1. ,    1.1],       [  78. ,  -53. ,   -2. ,    1.3],       [  96. ,   -1. ,   -4. ,    1.4],       [  84. ,   60. ,    4. ,    1. ],       [  32. ,   98. ,    1. ,    0.9],       [ -34. ,   99. ,   -5. ,    1. ],       [ -85. ,   63. ,    1. ,    1.4],       [ -99. ,    3. ,   -3. ,    1.5],       [ -86. ,  -63. ,    3. ,    0.8],       [ -31. ,  -96. ,    3. ,    0.5],       [  34. , -101. ,    4. ,    0.7],       [  83. ,  -55. ,   -5. ,    1.4],       [  54. ,   -3. ,    4. ,    1.1],       [  43. ,   25. ,    9. ,    1.4],       [  16. ,   47. ,    2. ,    0.9],       [ -18. ,   51. ,    6. ,    0.9],       [ -45. ,   28. ,    3. ,    1.2],       [ -51. ,    2. ,    7. ,    0.8],       [ -44. ,  -31. ,    4. ,    1.2],       [ -20. ,  -52. ,    4. ,    1.2],       [  12. ,  -47. ,    4. ,    1.2],       [  42. ,  -31. ,    7. ,    1.4],       [  59. ,   -3. ,    9. ,    0.9],       [  51. ,   33. ,    2. ,    0.9],       [  17. ,   60. ,    5. ,    1.4],       [ -21. ,   52. ,    7. ,    1.3],       [ -44. ,   31. ,    8. ,    0.8],       [ -54. ,   -5. ,    1. ,    1. ],       [ -48. ,  -30. ,    4. ,    1.4],       [ -20. ,  -51. ,    6. ,    1.4],       [  18. ,  -59. ,    4. ,    1.5],       [  48. ,  -36. ,   10. ,    1.4],       [  63. ,   -5. ,    0. ,    1.2],       [  50. ,   42. ,    2. ,    1.3],       [  21. ,   64. ,    7. ,    1.2],       [ -23. ,   62. ,    4. ,    1. ],       [ -57. ,   35. ,    2. ,    0.8],       [ -70. ,   -4. ,    8. ,    1.2],       [ -51. ,  -38. ,    1. ,    1.1],       [ -18. ,  -67. ,    5. ,    1.1],       [  20. ,  -68. ,    6. ,    1.3],       [  56. ,  -35. ,   10. ,    0.7],       [  73. ,   -3. ,    7. ,    0.5],       [  62. ,   47. ,    3. ,    1.3],       [  27. ,   75. ,    1. ,    1. ],       [ -26. ,   69. ,    6. ,    1. ],       [ -59. ,   45. ,    2. ,    1. ],       [ -73. ,   -5. ,    7. ,    1.3],       [ -57. ,  -45. ,    9. ,    1. ],       [ -22. ,  -67. ,    1. ,    1.4],       [  26. ,  -72. ,   10. ,    1.1],       [  58. ,  -47. ,    3. ,    1.5],       [  78. ,    0. ,    5. ,    0.8],       [  67. ,   45. ,    2. ,    1.1],       [  25. ,   82. ,    4. ,    0.7],       [ -27. ,   75. ,    7. ,    1.1],       [ -72. ,   44. ,    5. ,    1.2],       [ -84. ,   -4. ,   10. ,    0.5],       [ -69. ,  -51. ,    4. ,    0.8],       [ -28. ,  -76. ,    5. ,    1.3],       [  27. ,  -79. ,    2. ,    1.1],       [  67. ,  -48. ,    9. ,    0.9],       [  89. ,   -5. ,    3. ,    1.1],       [  69. ,   57. ,   10. ,    0.7],       [  30. ,   89. ,    8. ,    1.2],       [ -32. ,   86. ,    4. ,    0.8],       [ -75. ,   57. ,    9. ,    0.8],       [ -93. ,   -1. ,    5. ,    0.8],       [ -74. ,  -57. ,    6. ,    1.5],       [ -34. ,  -84. ,    2. ,    0.7],       [  24. ,  -83. ,    6. ,    0.6],       [  77. ,  -58. ,    2. ,    0.6],       [ 102. ,    3. ,    2. ,    0.5],       [  83. ,   59. ,    8. ,    1. ],       [  32. ,   96. ,   10. ,    0.8],       [ -34. ,   93. ,    1. ,    0.9],       [ -84. ,   63. ,    8. ,    0.9],       [ -96. ,   -1. ,    9. ,    1.2],       [ -81. ,  -55. ,    4. ,    0.9],       [ -26. ,  -91. ,    3. ,    0.7],       [  30. ,  -97. ,    5. ,    0.7],       [  81. ,  -57. ,    4. ,    0.6],       [  53. ,    4. ,    6. ,    1.2],       [  41. ,   34. ,    7. ,    1.5],       [  20. ,   46. ,   10. ,    1.2],       [ -13. ,   51. ,   15. ,    1.3],       [ -42. ,   28. ,    7. ,    1.1],       [ -55. ,    3. ,   12. ,    0.8],       [ -44. ,  -30. ,   14. ,    1.4],       [ -14. ,  -49. ,   14. ,    1.4],       [  13. ,  -48. ,   16. ,    1.3],       [  40. ,  -30. ,    7. ,    1.3],       [  59. ,    4. ,   13. ,    1.1],       [  44. ,   30. ,   13. ,    0.9],       [  13. ,   52. ,    7. ,    0.6],       [ -23. ,   56. ,   13. ,    1.4],       [ -44. ,   35. ,    9. ,    0.7],       [ -61. ,   -2. ,    9. ,    1.2],       [ -47. ,  -39. ,   13. ,    1. ],       [ -18. ,  -58. ,   12. ,    1.3],       [  14. ,  -54. ,    7. ,    0.7],       [  49. ,  -33. ,    8. ,    1.1],       [  66. ,    0. ,   11. ,    1.3],       [  50. ,   37. ,   16. ,    0.9],       [  21. ,   61. ,   10. ,    0.6],       [ -22. ,   58. ,   13. ,    1.5],       [ -59. ,   37. ,    7. ,    0.9],       [ -65. ,   -5. ,   10. ,    0.7],       [ -55. ,  -45. ,    8. ,    0.8],       [ -23. ,  -63. ,   13. ,    0.6],       [  21. ,  -67. ,    8. ,    0.6],       [  57. ,  -36. ,   14. ,    1. ],       [  79. ,    4. ,    7. ,    0.9],       [  57. ,   46. ,    9. ,    1. ],       [  26. ,   73. ,    7. ,    1.4],       [ -26. ,   72. ,   11. ,    1.1],       [ -66. ,   42. ,   15. ,    1.5],       [ -78. ,    2. ,    8. ,    0.8],       [ -66. ,  -42. ,   10. ,    0.9],       [ -28. ,  -68. ,   11. ,    1.3],       [  24. ,  -71. ,    8. ,    1.3],       [  64. ,  -45. ,   12. ,    0.7],       [  84. ,    3. ,   14. ,    0.8],       [  64. ,   52. ,    6. ,    1.2],       [  25. ,   83. ,   11. ,    1.2],       [ -22. ,   80. ,    8. ,    0.6],       [ -67. ,   45. ,   12. ,    0.9],       [ -82. ,   -1. ,    9. ,    0.5],       [ -69. ,  -45. ,    9. ,    1.4],       [ -23. ,  -78. ,    8. ,    0.9],       [  23. ,  -80. ,    9. ,    0.8],       [  63. ,  -52. ,   12. ,    0.8],       [  93. ,    0. ,   15. ,    1.1],       [  71. ,   53. ,   11. ,    0.7],       [  30. ,   86. ,    7. ,    1. ],       [ -32. ,   90. ,    7. ,    0.9],       [ -76. ,   49. ,   15. ,    0.9],       [ -89. ,   -4. ,   11. ,    1.4],       [ -73. ,  -50. ,   13. ,    1.1],       [ -27. ,  -91. ,   10. ,    1. ],       [  30. ,  -86. ,   11. ,    1.3],       [  74. ,  -56. ,   12. ,    1.1],       [  97. ,   -4. ,    9. ,    1.4],       [  85. ,   57. ,    7. ,    0.6],       [  28. ,   90. ,   10. ,    0.9],       [ -33. ,   98. ,   12. ,    1.2],       [ -77. ,   55. ,   11. ,    1.3],       [-105. ,   -2. ,   10. ,    0.7],       [ -85. ,  -61. ,   11. ,    1.5],       [ -28. ,  -97. ,    8. ,    1.2],       [  26. ,  -95. ,   12. ,    1.2],       [  85. ,  -57. ,   12. ,    1.3],       [  45. ,   -4. ,   17. ,    0.5],       [  40. ,   28. ,   15. ,    0.9],       [  16. ,   49. ,   17. ,    1. ],       [ -11. ,   47. ,   15. ,    0.8],       [ -41. ,   29. ,   12. ,    0.8],       [ -55. ,    0. ,   14. ,    1.1],       [ -43. ,  -31. ,   18. ,    0.6],       [ -17. ,  -49. ,   20. ,    0.8],       [  18. ,  -51. ,   21. ,    1.2],       [  36. ,  -28. ,   16. ,    1.2],       [  57. ,    2. ,   13. ,    0.9],       [  47. ,   32. ,   16. ,    1.4],       [  20. ,   52. ,   18. ,    0.8],       [ -21. ,   54. ,   13. ,    1. ],       [ -49. ,   39. ,   18. ,    0.7],       [ -62. ,   -4. ,   18. ,    0.6],       [ -49. ,  -37. ,   15. ,    0.7],       [ -15. ,  -55. ,   13. ,    1.2],       [  15. ,  -56. ,   19. ,    1.4],       [  48. ,  -37. ,   16. ,    1.2],       [  62. ,    3. ,   14. ,    0.8],       [  55. ,   36. ,   17. ,    0.9],       [  24. ,   66. ,   20. ,    1.3],       [ -25. ,   63. ,   15. ,    0.7],       [ -56. ,   42. ,   14. ,    1.2],       [ -70. ,   -4. ,   19. ,    1. ],       [ -54. ,  -44. ,   19. ,    0.8],       [ -18. ,  -63. ,   12. ,    0.7],       [  17. ,  -63. ,   13. ,    0.8],       [  54. ,  -39. ,   17. ,    1.3],       [  72. ,    1. ,   19. ,    1.1],       [  65. ,   46. ,   18. ,    0.6],       [  20. ,   72. ,   18. ,    0.7],       [ -19. ,   73. ,   17. ,    1.4],       [ -64. ,   44. ,   19. ,    0.9],       [ -76. ,    1. ,   21. ,    0.9],       [ -60. ,  -43. ,   19. ,    1.5],       [ -27. ,  -74. ,   19. ,    1.1],       [  26. ,  -77. ,   21. ,    0.8],       [  59. ,  -44. ,   17. ,    0.9],       [  80. ,    3. ,   14. ,    0.6],       [  70. ,   44. ,   13. ,    1.1],       [  27. ,   74. ,   18. ,    0.7],       [ -23. ,   79. ,   17. ,    0.8],       [ -68. ,   44. ,   18. ,    1.2],       [ -88. ,    2. ,   14. ,    1. ],       [ -70. ,  -49. ,   18. ,    1.4],       [ -28. ,  -84. ,   15. ,    1.3],       [  22. ,  -80. ,   16. ,    0.7],       [  64. ,  -46. ,   19. ,    0.5],       [  95. ,    3. ,   13. ,    1.2],       [  74. ,   50. ,   18. ,    1. ],       [  24. ,   89. ,   16. ,    1.2],       [ -31. ,   86. ,   13. ,    0.6],       [ -76. ,   55. ,   20. ,    0.9],       [ -91. ,    0. ,   20. ,    1.4],       [ -76. ,  -50. ,   15. ,    1.3],       [ -25. ,  -92. ,   17. ,    0.6],       [  26. ,  -91. ,   18. ,    0.6],       [  76. ,  -57. ,   17. ,    1.4],       [ 103. ,    0. ,   17. ,    0.8],       [  77. ,   56. ,   15. ,    1.1],       [  29. ,   93. ,   18. ,    0.5],       [ -32. ,   99. ,   18. ,    1.4],       [ -78. ,   57. ,   16. ,    0.6],       [-101. ,    2. ,   12. ,    1. ],       [ -86. ,  -64. ,   16. ,    0.8],       [ -35. ,  -93. ,   21. ,    1.2],       [  35. ,  -93. ,   16. ,    1.4],       [  84. ,  -57. ,   17. ,    1. ],       [  45. ,   -4. ,   17. ,    0.7],       [  40. ,   27. ,   26. ,    0.9],       [  18. ,   51. ,   18. ,    1. ],       [ -13. ,   52. ,   19. ,    1.3],       [ -40. ,   31. ,   23. ,    0.5],       [ -51. ,   -3. ,   24. ,    0.7],       [ -44. ,  -30. ,   21. ,    1.3],       [ -16. ,  -48. ,   25. ,    0.6],       [  11. ,  -47. ,   21. ,    0.6],       [  43. ,  -35. ,   25. ,    0.6],       [  62. ,   -4. ,   19. ,    1. ],       [  43. ,   36. ,   20. ,    1. ],       [  16. ,   52. ,   23. ,    1.5],       [ -16. ,   54. ,   22. ,    1.5],       [ -49. ,   36. ,   20. ,    0.5],       [ -59. ,   -3. ,   18. ,    1.5],       [ -43. ,  -37. ,   19. ,    1. ],       [ -15. ,  -51. ,   22. ,    1.2],       [  17. ,  -53. ,   25. ,    1.3],       [  43. ,  -37. ,   26. ,    1.4],       [  66. ,   -5. ,   25. ,    0.7],       [  51. ,   34. ,   18. ,    1.4],       [  22. ,   65. ,   19. ,    0.7],       [ -17. ,   60. ,   18. ,    0.5],       [ -59. ,   43. ,   24. ,    0.6],       [ -66. ,   -2. ,   18. ,    1.1],       [ -58. ,  -42. ,   26. ,    1.1],       [ -19. ,  -65. ,   26. ,    1.1],       [  17. ,  -62. ,   23. ,    1.1],       [  53. ,  -38. ,   19. ,    1. ],       [  76. ,   -2. ,   19. ,    1.4],       [  63. ,   44. ,   27. ,    1.1],       [  23. ,   71. ,   21. ,    1.3],       [ -28. ,   67. ,   23. ,    0.5],       [ -64. ,   44. ,   24. ,    0.7],       [ -76. ,   -2. ,   24. ,    1.2],       [ -64. ,  -44. ,   21. ,    1.5],       [ -26. ,  -68. ,   18. ,    0.7],       [  24. ,  -76. ,   22. ,    0.6],       [  60. ,  -45. ,   20. ,    0.7],       [  85. ,    0. ,   22. ,    1. ],       [  65. ,   44. ,   17. ,    1. ],       [  30. ,   83. ,   20. ,    1.4],       [ -24. ,   83. ,   23. ,    1.3],       [ -71. ,   49. ,   18. ,    0.9],       [ -87. ,   -4. ,   25. ,    1.4],       [ -66. ,  -50. ,   22. ,    0.8],       [ -26. ,  -79. ,   24. ,    1.3],       [  25. ,  -78. ,   20. ,    0.9],       [  64. ,  -50. ,   18. ,    1.4],       [  93. ,   -4. ,   19. ,    0.9],       [  71. ,   54. ,   21. ,    0.9],       [  29. ,   86. ,   25. ,    1.4],       [ -26. ,   88. ,   23. ,    1.5],       [ -76. ,   57. ,   19. ,    1.4],       [ -94. ,   -3. ,   21. ,    1.2],       [ -77. ,  -59. ,   18. ,    1.2],       [ -26. ,  -89. ,   25. ,    1.2],       [  24. ,  -87. ,   23. ,    0.6],       [  76. ,  -53. ,   24. ,    0.6],       [ 104. ,   -5. ,   26. ,    1.3],       [  82. ,   61. ,   26. ,    1.1],       [  31. ,   98. ,   20. ,    1.3],       [ -32. ,   97. ,   27. ,    0.9],       [ -83. ,   58. ,   20. ,    0.7],       [-101. ,   -4. ,   18. ,    1.5],       [ -86. ,  -64. ,   27. ,    0.9],       [ -33. ,  -94. ,   25. ,    0.6],       [  27. ,  -91. ,   23. ,    0.5],       [  79. ,  -59. ,   24. ,    1.5],       [  47. ,   -3. ,   32. ,    0.7],       [  41. ,   31. ,   31. ,    1.2],       [  17. ,   45. ,   31. ,    0.7],       [ -20. ,   49. ,   26. ,    1.1],       [ -42. ,   32. ,   30. ,    1.1],       [ -50. ,    0. ,   28. ,    1.1],       [ -45. ,  -33. ,   25. ,    0.5],       [ -18. ,  -44. ,   32. ,    1.1],       [  15. ,  -48. ,   32. ,    1.3],       [  38. ,  -34. ,   30. ,    0.7],       [  61. ,   -3. ,   30. ,    1.2],       [  46. ,   32. ,   32. ,    1.1],       [  22. ,   53. ,   28. ,    1.2],       [ -21. ,   56. ,   25. ,    0.7],       [ -45. ,   29. ,   30. ,    0.9],       [ -63. ,    3. ,   32. ,    0.9],       [ -50. ,  -38. ,   28. ,    1.2],       [ -14. ,  -53. ,   28. ,    0.7],       [  15. ,  -54. ,   25. ,    0.9],       [  45. ,  -38. ,   31. ,    1.2],       [  70. ,   -4. ,   30. ,    1.5],       [  55. ,   42. ,   27. ,    0.7],       [  22. ,   66. ,   30. ,    0.7],       [ -20. ,   67. ,   31. ,    0.5],       [ -56. ,   36. ,   28. ,    1.4],       [ -66. ,   -1. ,   24. ,    1.3],       [ -57. ,  -43. ,   31. ,    1.4],       [ -20. ,  -60. ,   26. ,    1. ],       [  18. ,  -60. ,   24. ,    1.3],       [  51. ,  -36. ,   23. ,    0.7],       [  77. ,    2. ,   27. ,    0.8],       [  56. ,   43. ,   28. ,    0.6],       [  26. ,   75. ,   23. ,    1.3],       [ -26. ,   73. ,   29. ,    1.1],       [ -59. ,   42. ,   29. ,    1.1],       [ -80. ,    4. ,   32. ,    0.6],       [ -57. ,  -44. ,   31. ,    0.6],       [ -29. ,  -70. ,   31. ,    0.7],       [  18. ,  -72. ,   27. ,    1. ],       [  57. ,  -44. ,   33. ,    1.3],       [  86. ,    2. ,   31. ,    1.4],       [  64. ,   45. ,   29. ,    0.5],       [  26. ,   77. ,   25. ,    1.3],       [ -30. ,   80. ,   26. ,    0.7],       [ -68. ,   52. ,   25. ,    1.3],       [ -80. ,   -1. ,   29. ,    1.2],       [ -69. ,  -45. ,   29. ,    1.5],       [ -26. ,  -84. ,   25. ,    0.6],       [  25. ,  -79. ,   29. ,    0.9],       [  66. ,  -48. ,   33. ,    1. ],       [  96. ,   -5. ,   32. ,    1. ],       [  71. ,   49. ,   25. ,    0.8],       [  24. ,   89. ,   27. ,    0.7],       [ -31. ,   88. ,   24. ,    0.9],       [ -79. ,   50. ,   29. ,    0.9],       [ -88. ,   -4. ,   24. ,    1.2],       [ -75. ,  -54. ,   25. ,    0.8],       [ -32. ,  -88. ,   32. ,    0.8],       [  23. ,  -92. ,   33. ,    1.2],       [  75. ,  -58. ,   27. ,    0.9],       [ 100. ,   -4. ,   33. ,    0.6],       [  82. ,   55. ,   31. ,    1.3],       [  27. ,   96. ,   24. ,    1.4],       [ -36. ,   93. ,   26. ,    0.9],       [ -82. ,   59. ,   32. ,    1.3],       [-100. ,    3. ,   32. ,    1.3],       [ -86. ,  -60. ,   24. ,    1. ],       [ -31. ,  -92. ,   33. ,    0.7],       [  28. ,  -92. ,   24. ,    1. ],       [  82. ,  -63. ,   29. ,    1.2],       [  52. ,   -1. ,   36. ,    0.8],       [  39. ,   25. ,   35. ,    0.9],       [  10. ,   46. ,   29. ,    0.8],       [ -11. ,   48. ,   38. ,    1.5],       [ -36. ,   25. ,   30. ,    1.5],       [ -49. ,    2. ,   30. ,    1.4],       [ -43. ,  -31. ,   34. ,    0.9],       [ -18. ,  -49. ,   35. ,    0.6],       [  11. ,  -47. ,   31. ,    1.1],       [  41. ,  -26. ,   31. ,    1.2],       [  62. ,    2. ,   33. ,    1.5],       [  42. ,   30. ,   31. ,    1.3],       [  18. ,   58. ,   35. ,    1. ],       [ -15. ,   57. ,   31. ,    0.5],       [ -44. ,   34. ,   32. ,    1.2],       [ -61. ,   -4. ,   34. ,    1.1],       [ -51. ,  -36. ,   34. ,    0.6],       [ -23. ,  -56. ,   31. ,    1.1],       [  13. ,  -54. ,   34. ,    1.2],       [  44. ,  -32. ,   31. ,    0.8],       [  66. ,   -3. ,   37. ,    1.3],       [  58. ,   38. ,   37. ,    0.6],       [  22. ,   63. ,   30. ,    1.1],       [ -22. ,   64. ,   30. ,    1. ],       [ -52. ,   42. ,   32. ,    0.7],       [ -66. ,    2. ,   36. ,    1. ],       [ -55. ,  -35. ,   32. ,    1.1],       [ -23. ,  -63. ,   37. ,    0.7],       [  23. ,  -62. ,   33. ,    1. ],       [  56. ,  -39. ,   33. ,    1.4],       [  75. ,   -4. ,   37. ,    0.6],       [  63. ,   40. ,   38. ,    1.5],       [  27. ,   72. ,   32. ,    1. ],       [ -25. ,   72. ,   32. ,    1.3],       [ -56. ,   41. ,   34. ,    0.6],       [ -76. ,    1. ,   32. ,    1.2],       [ -60. ,  -41. ,   39. ,    1. ],       [ -28. ,  -68. ,   31. ,    1.3],       [  25. ,  -67. ,   34. ,    1.1],       [  61. ,  -42. ,   37. ,    1.1],       [  88. ,    0. ,   35. ,    0.6],       [  68. ,   52. ,   37. ,    0.7],       [  21. ,   78. ,   31. ,    0.6],       [ -28. ,   78. ,   30. ,    1. ],       [ -71. ,   48. ,   33. ,    0.9],       [ -82. ,    4. ,   34. ,    0.9],       [ -67. ,  -53. ,   37. ,    0.9],       [ -23. ,  -79. ,   31. ,    1.1],       [  23. ,  -84. ,   32. ,    1.4],       [  70. ,  -52. ,   32. ,    0.8],       [  87. ,   -3. ,   32. ,    0.7],       [  75. ,   57. ,   30. ,    1.2],       [  31. ,   85. ,   34. ,    1.4],       [ -33. ,   83. ,   31. ,    1.4],       [ -75. ,   49. ,   29. ,    0.9],       [ -88. ,   -3. ,   30. ,    0.5],       [ -74. ,  -50. ,   37. ,    1. ],       [ -25. ,  -86. ,   29. ,    1.3],       [  31. ,  -86. ,   32. ,    0.8],       [  75. ,  -58. ,   29. ,    1.5],       [ 101. ,   -5. ,   37. ,    0.7],       [  78. ,   61. ,   34. ,    1.2],       [  32. ,   96. ,   37. ,    1.2],       [ -33. ,   95. ,   34. ,    0.7],       [ -77. ,   58. ,   35. ,    0.5],       [ -99. ,    0. ,   29. ,    0.8],       [ -85. ,  -57. ,   36. ,    0.7],       [ -35. ,  -99. ,   30. ,    0.6],       [  35. ,  -94. ,   31. ,    0.5],       [  79. ,  -58. ,   33. ,    0.6],       [  49. ,    3. ,   40. ,    1.4],       [  42. ,   25. ,   42. ,    1.4],       [  19. ,   49. ,   38. ,    0.8],       [ -21. ,   45. ,   39. ,    1. ],       [ -38. ,   27. ,   39. ,    1.4],       [ -55. ,   -4. ,   40. ,    0.6],       [ -45. ,  -28. ,   39. ,    1. ],       [ -12. ,  -51. ,   35. ,    1. ],       [  14. ,  -51. ,   35. ,    0.7],       [  42. ,  -32. ,   37. ,    0.9],       [  59. ,   -5. ,   35. ,    1.5],       [  47. ,   31. ,   41. ,    1.2],       [  21. ,   57. ,   37. ,    1.4],       [ -14. ,   57. ,   36. ,    1. ],       [ -43. ,   38. ,   42. ,    1.3],       [ -63. ,    4. ,   39. ,    0.6],       [ -50. ,  -31. ,   35. ,    0.6],       [ -23. ,  -61. ,   39. ,    1. ],       [  20. ,  -57. ,   42. ,    1.3],       [  48. ,  -34. ,   41. ,    0.6],       [  69. ,   -5. ,   39. ,    0.9],       [  55. ,   34. ,   41. ,    1.2],       [  24. ,   68. ,   37. ,    1.1],       [ -16. ,   59. ,   44. ,    1.2],       [ -56. ,   42. ,   43. ,    0.8],       [ -66. ,    3. ,   39. ,    1.3],       [ -50. ,  -37. ,   36. ,    0.7],       [ -24. ,  -64. ,   41. ,    0.8],       [  21. ,  -61. ,   41. ,    0.7],       [  53. ,  -42. ,   43. ,    1.3],       [  73. ,    0. ,   43. ,    0.8],       [  57. ,   46. ,   37. ,    1.1],       [  24. ,   72. ,   36. ,    1.2],       [ -27. ,   68. ,   37. ,    0.7],       [ -58. ,   44. ,   40. ,    1.1],       [ -76. ,   -3. ,   35. ,    1.5],       [ -65. ,  -41. ,   36. ,    1.3],       [ -24. ,  -69. ,   35. ,    0.9],       [  26. ,  -73. ,   44. ,    0.8],       [  62. ,  -40. ,   38. ,    1. ],       [  84. ,    4. ,   38. ,    0.6],       [  62. ,   53. ,   35. ,    0.8],       [  23. ,   74. ,   40. ,    1. ],       [ -24. ,   80. ,   35. ,    1.2],       [ -68. ,   52. ,   40. ,    1.5],       [ -79. ,    0. ,   41. ,    0.7],       [ -69. ,  -53. ,   41. ,    1.2],       [ -26. ,  -84. ,   37. ,    0.7],       [  29. ,  -78. ,   40. ,    1.3],       [  65. ,  -54. ,   36. ,    1.3],       [  94. ,   -5. ,   42. ,    0.9],       [  69. ,   51. ,   43. ,    0.9],       [  25. ,   89. ,   44. ,    0.7],       [ -34. ,   91. ,   40. ,    1.1],       [ -77. ,   49. ,   37. ,    0.8],       [ -92. ,   -3. ,   38. ,    1.1],       [ -76. ,  -51. ,   41. ,    1.1],       [ -33. ,  -84. ,   41. ,    1. ],       [  24. ,  -84. ,   40. ,    0.7],       [  70. ,  -51. ,   38. ,    1.3],       [ 101. ,   -5. ,   41. ,    1.1],       [  85. ,   61. ,   38. ,    0.8],       [  28. ,   92. ,   44. ,    1. ],       [ -31. ,   94. ,   37. ,    0.8],       [ -82. ,   55. ,   36. ,    0.6],       [-105. ,   -1. ,   38. ,    1.1],       [ -78. ,  -55. ,   40. ,    1. ],       [ -33. ,  -98. ,   44. ,    1.4],       [  34. ,  -94. ,   36. ,    0.9],       [  82. ,  -58. ,   39. ,    0.8]])
        basis0 = BSplineBasis(4, np.array([ -2.1,  -1.2,   0. ,   0. ,   1. ,   1.6,   2.8,   3.7,   4.9,   5.8,   6.9,   7.8,   9. ,
         9. ,  10. ,  10.6]),1)
        basis1 = BSplineBasis(2, np.array([ 0. ,  0. ,  1.2,  2.1,  3. ,  4.3,  5.2,  6. ,  6. ]))
        basis2 = BSplineBasis(4, np.array([ 0. ,  0. ,  0. ,  0. ,  1.2,  2.4,  3. ,  4.2,  5. ,  5. ,  5. ,  5. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,True)
        vol2 = vol.clone()
        vol2.insert_knot(0, [1.513]*1) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 17)
        vol2.insert_knot(0, [4.357]*2) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 19)
        vol2.insert_knot(0, [7.584]*3) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 22)
        vol2.insert_knot(1, [4.162]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 10)
        vol2.insert_knot(2, [3.965]*1) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 13)
        vol2.insert_knot(2, [3.466]*2) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 15)
        vol2.insert_knot(2, [1.615]*3) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 18)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p2(self):
        controlpoints = np.array([[   0.,   -4.,   -4.],
       [  20.,    0.,   -4.],
       [  54.,   -5.,   -1.],
       [  76.,    1.,   -4.],
       [ 103.,   -3.,   -4.]])
        basis0 = BSplineBasis(2, np.array([ 0. ,  0. ,  1.1,  2. ,  3.3,  4. ,  4. ]))
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([3.176]*1) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 8)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p23(self):
        controlpoints = np.array([[  -1.,   -5.,   -3.],       [  20.,   -4.,    4.],       [  33.,   -5.,   -1.],       [  45.,    4.,    3.],       [  69.,   -1.,    4.],       [  87.,    2.,   -5.],       [ 102.,    1.,    2.],       [  -3.,   22.,    4.],       [  19.,   22.,   -2.],       [  35.,   22.,    2.],       [  52.,   23.,   -2.],       [  67.,   17.,   -3.],       [  81.,   20.,   -4.],       [  97.,   17.,    2.],       [   2.,   36.,    4.],       [  21.,   39.,   -2.],       [  37.,   37.,    2.],       [  49.,   38.,    4.],       [  65.,   41.,    2.],       [  80.,   36.,   -1.],       [  97.,   38.,    0.],       [  -4.,   57.,    1.],       [  16.,   56.,    4.],       [  29.,   57.,   -2.],       [  47.,   56.,    3.],       [  65.,   64.,   -2.],       [  80.,   64.,   -1.],       [  97.,   61.,    3.],       [  -3.,   80.,    2.],       [  18.,   77.,   -3.],       [  38.,   75.,   -2.],       [  51.,   76.,    1.],       [  64.,   83.,    0.],       [  82.,   80.,    0.],       [ 102.,   79.,    0.],       [  -5.,   95.,    0.],       [  12.,   99.,    4.],       [  37.,  102.,    1.],       [  46.,   97.,    1.],       [  70.,   97.,    1.],       [  82.,  101.,    1.],       [ 101.,   96.,   -2.]])
        basis0 = BSplineBasis(2, np.array([ 0. ,  0. ,  0.7,  2.1,  3.3,  3.9,  5.1,  6. ,  6. ]))
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  0.9,  2. ,  2.6,  4. ,  4. ,  4. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [4.828]*1) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 10)
        surf2.insert_knot(1, [2.319]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 10)
        surf2.insert_knot(1, [2.414]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 12)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p322(self):
        controlpoints = np.array([[  -3.,    4.,    0.],       [  20.,   -3.,   -2.],       [  31.,    4.,    1.],       [  50.,    3.,    3.],       [  62.,   -1.,    2.],       [  78.,   -4.,   -3.],       [ 103.,   -3.,    3.],       [   1.,   23.,   -2.],       [  16.,   21.,    0.],       [  38.,   21.,   -3.],       [  48.,   16.,    2.],       [  71.,   15.,   -3.],       [  78.,   15.,   -4.],       [  98.,   18.,   -5.],       [   4.,   44.,   -3.],       [  18.,   36.,    1.],       [  32.,   40.,    0.],       [  54.,   36.,   -3.],       [  65.,   40.,   -1.],       [  86.,   40.,    2.],       [  99.,   37.,   -2.],       [   4.,   61.,    0.],       [  15.,   55.,    4.],       [  35.,   59.,   -4.],       [  45.,   57.,   -5.],       [  71.,   60.,    3.],       [  86.,   63.,    3.],       [ 102.,   63.,    2.],       [   1.,   76.,    1.],       [  21.,   81.,    2.],       [  35.,   75.,   -3.],       [  45.,   81.,   -2.],       [  69.,   84.,    2.],       [  87.,   77.,   -1.],       [ 101.,   75.,    0.],       [   3.,  103.,   -3.],       [  17.,  101.,   -1.],       [  31.,  101.,    0.],       [  51.,  104.,   -2.],       [  67.,  103.,   -2.],       [  79.,   97.,    4.],       [ 101.,  101.,   -2.],       [   1.,    1.,   31.],       [  16.,    3.,   30.],       [  37.,   -5.,   34.],       [  46.,    0.,   30.],       [  69.,    0.,   31.],       [  81.,   -2.,   33.],       [ 102.,    2.,   29.],       [  -5.,   15.,   35.],       [  12.,   20.,   38.],       [  30.,   16.,   28.],       [  47.,   20.,   31.],       [  68.,   23.,   28.],       [  85.,   23.,   32.],       [ 104.,   21.,   29.],       [  -4.,   43.,   32.],       [  11.,   41.,   31.],       [  36.,   44.,   37.],       [  51.,   35.,   34.],       [  66.,   38.,   31.],       [  84.,   43.,   36.],       [  95.,   39.,   34.],       [   2.,   57.,   35.],       [  18.,   64.,   29.],       [  34.,   60.,   29.],       [  54.,   61.,   30.],       [  64.,   58.,   28.],       [  87.,   56.,   31.],       [ 102.,   64.,   32.],       [  -3.,   81.,   33.],       [  11.,   77.,   35.],       [  34.,   83.,   31.],       [  52.,   80.,   29.],       [  61.,   79.,   34.],       [  82.,   77.,   37.],       [ 103.,   79.,   34.],       [   1.,  102.,   30.],       [  16.,  103.,   37.],       [  38.,  100.,   32.],       [  53.,   98.,   36.],       [  64.,   96.,   29.],       [  86.,  100.,   34.],       [  95.,  100.,   33.],       [   1.,    4.,   66.],       [  12.,    4.,   65.],       [  35.,    1.,   62.],       [  51.,    4.,   66.],       [  62.,    0.,   68.],       [  87.,    3.,   63.],       [ 103.,   -2.,   64.],       [   1.,   16.,   69.],       [  20.,   22.,   63.],       [  28.,   18.,   68.],       [  45.,   17.,   70.],       [  70.,   15.,   63.],       [  80.,   15.,   67.],       [ 103.,   19.,   63.],       [   4.,   41.,   62.],       [  17.,   37.,   62.],       [  32.,   36.,   66.],       [  53.,   36.,   61.],       [  70.,   42.,   66.],       [  81.,   42.,   64.],       [  98.,   43.,   70.],       [  -3.,   60.,   62.],       [  20.,   58.,   69.],       [  31.,   55.,   62.],       [  50.,   61.,   66.],       [  63.,   58.,   68.],       [  79.,   64.,   63.],       [  98.,   57.,   70.],       [   2.,   78.,   65.],       [  15.,   79.,   63.],       [  37.,   79.,   69.],       [  49.,   81.,   64.],       [  67.,   83.,   61.],       [  79.,   82.,   66.],       [  98.,   82.,   68.],       [  -5.,   99.,   62.],       [  19.,  104.,   68.],       [  30.,   96.,   65.],       [  53.,  100.,   64.],       [  70.,   96.,   71.],       [  86.,  104.,   64.],       [ 104.,  104.,   67.],       [   2.,   -5.,   98.],       [  13.,   -3.,  101.],       [  36.,    0.,  102.],       [  49.,    4.,  102.],       [  67.,    1.,   96.],       [  85.,   -2.,  100.],       [ 104.,   -2.,  100.],       [  -3.,   16.,  103.],       [  19.,   15.,  100.],       [  34.,   15.,  103.],       [  53.,   22.,  101.],       [  67.,   16.,   99.],       [  87.,   24.,  102.],       [ 103.,   16.,   98.],       [  -1.,   43.,  104.],       [  21.,   37.,  101.],       [  36.,   41.,   99.],       [  50.,   41.,   97.],       [  62.,   35.,   98.],       [  80.,   42.,  104.],       [  96.,   43.,   99.],       [   1.,   57.,  104.],       [  21.,   55.,   97.],       [  33.,   55.,  104.],       [  48.,   63.,   97.],       [  65.,   62.,   97.],       [  81.,   62.,  104.],       [  95.,   62.,   97.],       [   1.,   78.,  100.],       [  18.,   81.,  103.],       [  28.,   80.,   96.],       [  54.,   82.,  101.],       [  63.,   75.,  103.],       [  79.,   84.,  103.],       [ 104.,   79.,  100.],       [   2.,   99.,  103.],       [  15.,   96.,  103.],       [  29.,   98.,   98.],       [  51.,  103.,   97.],       [  68.,  101.,  103.],       [  83.,  101.,  104.],       [  98.,  104.,   99.]])
        basis0 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  0.9,  2.3,  2.9,  4.3,  5. ,  5. ,  5. ]))
        basis1 = BSplineBasis(2, np.array([ 0. ,  0. ,  1. ,  2.3,  3. ,  3.9,  5. ,  5. ]))
        basis2 = BSplineBasis(2, np.array([ 0. ,  0. ,  1.3,  2.1,  3. ,  3. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,False)
        vol2 = vol.clone()
        vol2.insert_knot(0, [1.167]*1) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 11)
        vol2.insert_knot(0, [2.130]*2) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 13)
        vol2.insert_knot(1, [2.516]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 9)
        vol2.insert_knot(2, [1.377]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 7)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p4_C0_periodic(self):
        controlpoints = np.array([[  96.,   -2.,   -2.],
       [  81.,   67.,   -3.],
       [  14.,  100.,    4.],
       [ -52.,   88.,    3.],
       [ -97.,   33.,    2.],
       [ -95.,  -34.,    3.],
       [ -53.,  -85.,   -1.],
       [  14., -101.,   -1.],
       [  80.,  -69.,    0.]])
        basis0 = BSplineBasis(4, np.array([-0.9,  0. ,  0. ,  0. ,  0.7,  1.8,  3.1,  3.7,  4.8,  6.1,  7. ,  7. ,  7. ,  7.7]),0)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([4.545]*1) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 15)
        crv2.insert_knot([5.801]*2) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 17)
        crv2.insert_knot([3.966]*3) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 20)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p23_C0_periodic(self):
        controlpoints = np.array([[  57.,   -2.,   -4.],
       [  -1.,   59.,   -4.],
       [ -65.,   -3.,   -1.],
       [   4.,  -65.,   -5.],
       [  68.,    4.,   -3.],
       [  -5.,   67.,   -2.],
       [ -65.,   -1.,   -3.],
       [  -5.,  -72.,   -4.],
       [  77.,   -2.,    2.],
       [   3.,   74.,   -2.],
       [ -78.,    2.,   -5.],
       [   1.,  -75.,    2.],
       [  81.,    4.,    0.],
       [   3.,   83.,    0.],
       [ -84.,   -5.,    0.],
       [   0.,  -80.,   -3.],
       [  96.,   -2.,   -4.],
       [  -4.,   88.,   -1.],
       [ -96.,   -5.,    2.],
       [   4.,  -95.,    4.],
       [  97.,   -5.,   -4.],
       [  -2.,  102.,    0.],
       [ -96.,   -2.,    4.],
       [   2., -101.,    3.]])
        basis0 = BSplineBasis(2, np.array([-1. ,  0. ,  0.7,  2.1,  3. ,  4. ,  4.7]),0)
        basis1 = BSplineBasis(3, np.array([ 0. ,  0. ,  0. ,  1.3,  2. ,  3.2,  4. ,  4. ,  4. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [1.422]*1) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 8)
        surf2.insert_knot(1, [2.461]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 10)
        surf2.insert_knot(1, [1.320]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 12)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p224_C0_periodic(self):
        controlpoints = np.array([[  52.,   -2.,    0.],       [   3.,   49.,   -2.],       [ -54.,   -5.,   -5.],       [  -4.,  -52.,   -2.],       [  58.,   -5.,   -5.],       [  -2.,   59.,   -1.],       [ -59.,   -5.,    3.],       [   4.,  -61.,   -1.],       [  74.,    3.,    3.],       [   2.,   72.,    0.],       [ -73.,    3.,   -4.],       [   4.,  -72.,   -2.],       [  86.,    4.,    4.],       [   4.,   87.,    1.],       [ -91.,   -3.,   -1.],       [  -4.,  -89.,   -3.],       [ 104.,   -5.,   -3.],       [   3.,  100.,   -3.],       [-104.,   -1.,   -3.],       [   3., -104.,   -5.],       [  51.,    4.,   12.],       [  -3.,   49.,    6.],       [ -47.,    0.,   14.],       [  -1.,  -55.,    6.],       [  64.,   -4.,   13.],       [  -5.,   63.,   14.],       [ -63.,    3.,   12.],       [   4.,  -61.,    5.],       [  77.,    3.,   11.],       [  -1.,   70.,    9.],       [ -79.,    4.,   11.],       [  -3.,  -74.,    5.],       [  90.,    4.,    5.],       [  -3.,   87.,   12.],       [ -91.,    1.,    9.],       [  -2.,  -90.,   13.],       [  99.,    0.,   12.],       [  -1.,   98.,    6.],       [ -99.,    0.,    7.],       [   3., -101.,    7.],       [  54.,    4.,   23.],       [   4.,   49.,   17.],       [ -50.,    2.,   15.],       [  -3.,  -55.,   23.],       [  61.,   -5.,   16.],       [   3.,   61.,   24.],       [ -67.,    4.,   24.],       [   0.,  -66.,   15.],       [  74.,    2.,   19.],       [   4.,   74.,   21.],       [ -79.,    1.,   23.],       [  -2.,  -78.,   23.],       [  88.,    0.,   23.],       [  -1.,   92.,   17.],       [ -91.,   -4.,   24.],       [   3.,  -87.,   19.],       [ 101.,    0.,   15.],       [   4.,   95.,   21.],       [-100.,    4.,   23.],       [   1., -105.,   23.],       [  48.,   -2.,   30.],       [   3.,   46.,   34.],       [ -54.,    1.,   28.],       [  -1.,  -51.,   31.],       [  63.,   -2.,   32.],       [   2.,   60.,   31.],       [ -63.,    1.,   26.],       [   4.,  -61.,   29.],       [  78.,   -5.,   30.],       [  -5.,   79.,   26.],       [ -75.,   -1.,   25.],       [   3.,  -72.,   30.],       [  90.,    4.,   29.],       [  -4.,   85.,   30.],       [ -84.,   -3.,   27.],       [   0.,  -90.,   27.],       [ 100.,   -4.,   31.],       [  -2.,   99.,   33.],       [-104.,   -2.,   26.],       [  -4.,  -98.,   33.],       [  53.,   -3.,   44.],       [  -5.,   54.,   44.],       [ -49.,    1.,   41.],       [  -5.,  -52.,   41.],       [  58.,    0.,   37.],       [  -1.,   64.,   38.],       [ -58.,   -3.,   38.],       [   1.,  -65.,   38.],       [  72.,   -4.,   44.],       [  -2.,   76.,   44.],       [ -79.,    0.,   37.],       [  -1.,  -71.,   40.],       [  85.,    1.,   35.],       [   2.,   89.,   41.],       [ -92.,    3.,   43.],       [   0.,  -87.,   36.],       [ 101.,    1.,   36.],       [   4.,  102.,   40.],       [-104.,    1.,   40.],       [  -2.,  -98.,   42.]])
        basis0 = BSplineBasis(2, np.array([-1.3,  0. ,  1.3,  1.9,  2.7,  4. ,  5.3]),0)
        basis1 = BSplineBasis(2, np.array([ 0. ,  0. ,  1.3,  1.9,  2.8,  4. ,  4. ]))
        basis2 = BSplineBasis(4, np.array([ 0. ,  0. ,  0. ,  0. ,  0.6,  2. ,  2. ,  2. ,  2. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,False)
        vol2 = vol.clone()
        vol2.insert_knot(0, [1.721]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 8)
        vol2.insert_knot(1, [2.723]*1) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 8)
        vol2.insert_knot(2, [0.600]*1) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 10)
        vol2.insert_knot(2, [0.600]*2) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 12)
        vol2.insert_knot(2, [0.600]*3) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 15)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p3_C1_periodic(self):
        controlpoints = np.array([[ 104.,    0.,   -3.],
       [  73.,   67.,    2.],
       [  -5.,  100.,   -4.],
       [ -74.,   69.,   -5.],
       [-104.,    0.,   -4.],
       [ -71.,  -66.,   -5.],
       [  -5.,  -96.,   -4.],
       [  71.,  -71.,   -1.]])
        basis0 = BSplineBasis(3, np.array([ -1.9,  -1.3,   0. ,   0.8,   2.1,   2.8,   4.2,   5.3,   6.1,   6.7,   8. ,   8.8,  10.1]),1)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([5.840]*1) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 14)
        crv2.insert_knot([1.235]*2) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 16)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p32_C1_periodic(self):
        controlpoints = np.array([[  63.,    1.,    1.],       [  45.,   47.,    0.],       [   2.,   57.,    2.],       [ -41.,   46.,   -2.],       [ -60.,   -1.,   -3.],       [ -47.,  -40.,   -4.],       [   2.,  -60.,    4.],       [  38.,  -41.,    2.],       [  75.,   -1.,   -3.],       [  56.,   53.,   -2.],       [   3.,   73.,   -4.],       [ -50.,   50.,    2.],       [ -79.,   -3.,   -2.],       [ -55.,  -54.,   -4.],       [   3.,  -77.,   -3.],       [  47.,  -50.,   -4.],       [  86.,   -3.,    2.],       [  62.,   65.,   -4.],       [   0.,   89.,   -4.],       [ -61.,   63.,   -4.],       [ -83.,    2.,    0.],       [ -65.,  -65.,    2.],       [   0.,  -84.,   -1.],       [  65.,  -63.,    2.],       [ 101.,   -4.,    0.],       [  70.,   71.,    4.],       [  -1.,   99.,    0.],       [ -70.,   67.,   -4.],       [-105.,   -1.,   -1.],       [ -71.,  -75.,   -5.],       [   3., -104.,   -5.],       [  71.,  -70.,    0.]])
        basis0 = BSplineBasis(3, np.array([-2.2, -1.3,  0. ,  0.7,  1.8,  3.2,  3.8,  5. ,  5.8,  6.7,  8. ,  8.7,  9.8]),1)
        basis1 = BSplineBasis(2, np.array([ 0. ,  0. ,  0.9,  1.9,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [3.488]*1) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 14)
        surf2.insert_knot(0, [2.608]*2) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [1.116]*1) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 7)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p5_rational(self):
        controlpoints = np.array([[ -3. ,  -4. ,   0.6],
       [ 17. ,  -5. ,   0.6],
       [ 26. ,  -1. ,   0.9],
       [ 41. ,  -5. ,   0.8],
       [ 57. ,  -5. ,   0.8],
       [ 69. ,  -2. ,   0.9],
       [ 88. ,  -4. ,   0.7],
       [ 95. ,   2. ,   0.8]])
        basis0 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  1.9,  3.1,  4. ,  4. ,  4. ,  4. ,  4. ]))
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([2.961]*1) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 14)
        crv2.insert_knot([1.074]*2) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 16)
        crv2.insert_knot([2.871]*3) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 19)
        crv2.insert_knot([2.241]*4) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 23)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p76_rational(self):
        controlpoints = np.array([[   2. ,    3. ,    1. ],       [   8. ,    2. ,    0.8],       [  13. ,    1. ,    0.9],       [  24. ,    2. ,    1.4],       [  38. ,   -2. ,    1.2],       [  44. ,   -2. ,    1. ],       [  50. ,    0. ,    0.8],       [  66. ,    0. ,    1. ],       [  72. ,   -3. ,    1.4],       [  82. ,    4. ,    1.4],       [  92. ,   -3. ,    1. ],       [  95. ,    1. ,    1.2],       [   0. ,   11. ,    1. ],       [  13. ,    9. ,    1.3],       [  14. ,    7. ,    0.5],       [  31. ,    7. ,    1.4],       [  34. ,   11. ,    1. ],       [  43. ,   16. ,    1.5],       [  56. ,    9. ,    0.7],       [  65. ,    7. ,    1. ],       [  77. ,    9. ,    1.4],       [  77. ,   11. ,    1.2],       [  87. ,   16. ,    1.1],       [ 104. ,   13. ,    1.2],       [  -5. ,   29. ,    1.5],       [  13. ,   29. ,    0.8],       [  13. ,   23. ,    1.3],       [  25. ,   26. ,    1.3],       [  39. ,   21. ,    1.3],       [  50. ,   20. ,    1.4],       [  56. ,   20. ,    0.6],       [  58. ,   28. ,    1.3],       [  67. ,   27. ,    0.6],       [  83. ,   25. ,    1.5],       [  93. ,   29. ,    0.7],       [ 102. ,   23. ,    0.9],       [   2. ,   34. ,    1.2],       [   8. ,   36. ,    1.2],       [  22. ,   36. ,    1.4],       [  23. ,   40. ,    0.5],       [  38. ,   36. ,    1.3],       [  43. ,   42. ,    0.8],       [  56. ,   41. ,    1. ],       [  65. ,   36. ,    1.1],       [  77. ,   38. ,    1.4],       [  83. ,   38. ,    1.4],       [  89. ,   39. ,    0.7],       [  96. ,   41. ,    0.7],       [  -4. ,   45. ,    1.3],       [  10. ,   47. ,    0.9],       [  17. ,   51. ,    0.8],       [  30. ,   50. ,    1. ],       [  38. ,   54. ,    1.1],       [  47. ,   46. ,    1.1],       [  50. ,   52. ,    1.4],       [  61. ,   48. ,    0.7],       [  76. ,   49. ,    0.7],       [  80. ,   54. ,    1.5],       [  90. ,   52. ,    1.1],       [  96. ,   47. ,    0.7],       [   2. ,   60. ,    1. ],       [   5. ,   61. ,    0.7],       [  13. ,   62. ,    1. ],       [  29. ,   65. ,    1. ],       [  38. ,   61. ,    1. ],       [  48. ,   67. ,    0.7],       [  56. ,   60. ,    0.9],       [  59. ,   62. ,    0.6],       [  73. ,   62. ,    0.8],       [  83. ,   61. ,    0.7],       [  88. ,   66. ,    0.9],       [  99. ,   65. ,    0.9],       [  -1. ,   76. ,    0.7],       [   9. ,   75. ,    1. ],       [  19. ,   70. ,    1.3],       [  23. ,   74. ,    1.3],       [  39. ,   73. ,    0.8],       [  43. ,   77. ,    1.1],       [  55. ,   72. ,    1.3],       [  66. ,   72. ,    0.9],       [  74. ,   76. ,    1.1],       [  80. ,   78. ,    1.1],       [  90. ,   79. ,    0.5],       [  98. ,   77. ,    0.7],       [  -2. ,   89. ,    1. ],       [   6. ,   89. ,    0.9],       [  15. ,   87. ,    0.7],       [  22. ,   85. ,    1.3],       [  38. ,   88. ,    1.5],       [  45. ,   82. ,    0.8],       [  51. ,   89. ,    0.6],       [  59. ,   85. ,    1.2],       [  76. ,   83. ,    1. ],       [  79. ,   87. ,    1.2],       [  88. ,   85. ,    1. ],       [  98. ,   82. ,    1.4],       [   4. ,   99. ,    1.2],       [  13. ,   99. ,    1.4],       [  20. ,   96. ,    0.7],       [  26. ,   95. ,    0.7],       [  37. ,  100. ,    0.9],       [  45. ,  103. ,    0.6],       [  50. ,  103. ,    0.6],       [  62. ,  104. ,    1.2],       [  76. ,   98. ,    0.9],       [  86. ,   97. ,    0.7],       [  90. ,   98. ,    0.8],       [  98. ,  101. ,    0.6]])
        basis0 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.3,  2.4,  3.1,  4.3,  5.3,  6. ,  6. ,  6. ,
        6. ,  6. ,  6. ,  6. ]))
        basis1 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  2.1,  2.6,  4. ,  4. ,  4. ,  4. ,  4. ,  4. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [4.347]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 20)
        surf2.insert_knot(0, [2.438]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [2.025]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [3.513]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(0, [5.065]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 34)
        surf2.insert_knot(0, [4.548]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 40)
        surf2.insert_knot(1, [0.923]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [1.478]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 18)
        surf2.insert_knot(1, [0.851]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 21)
        surf2.insert_knot(1, [1.640]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 25)
        surf2.insert_knot(1, [1.788]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 30)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p6_rational_C0_periodic(self):
        controlpoints = np.array([[ 101. ,    3. ,    1.2],
       [  82. ,   54. ,    1. ],
       [  45. ,   87. ,    1.3],
       [   4. ,  103. ,    1.4],
       [ -51. ,   84. ,    1.1],
       [ -92. ,   54. ,    1.3],
       [-105. ,    4. ,    0.7],
       [ -91. ,  -55. ,    0.9],
       [ -51. ,  -89. ,    1.3],
       [  -1. , -100. ,    0.9],
       [  49. ,  -83. ,    1.1],
       [  90. ,  -54. ,    0.9]])
        basis0 = BSplineBasis(6, np.array([-0.9,  0. ,  0. ,  0. ,  0. ,  0. ,  1.3,  2.2,  2.7,  3.7,  5.2,  5.6,  7.1,  8. ,  8. ,
        8. ,  8. ,  8. ,  9.3]),0)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([5.992]*1) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 20)
        crv2.insert_knot([3.622]*2) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 22)
        crv2.insert_knot([5.283]*3) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 25)
        crv2.insert_knot([3.280]*4) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 29)
        crv2.insert_knot([3.130]*5) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 34)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p55_rational_C0_periodic(self):
        controlpoints = np.array([[  60. ,   -3. ,    0.6],       [  46. ,   31. ,    1.2],       [  15. ,   55. ,    0.9],       [ -16. ,   52. ,    1.4],       [ -48. ,   32. ,    1.4],       [ -60. ,   -1. ,    1.4],       [ -45. ,  -32. ,    1.4],       [ -17. ,  -53. ,    1.5],       [  17. ,  -57. ,    1.1],       [  46. ,  -34. ,    0.9],       [  66. ,    4. ,    0.9],       [  49. ,   39. ,    1.1],       [  17. ,   59. ,    0.5],       [ -23. ,   64. ,    0.7],       [ -58. ,   40. ,    0.9],       [ -65. ,    2. ,    1.5],       [ -50. ,  -43. ,    0.9],       [ -20. ,  -67. ,    1.2],       [  20. ,  -60. ,    1.5],       [  54. ,  -37. ,    1. ],       [  68. ,    1. ,    1.3],       [  56. ,   42. ,    1. ],       [  25. ,   72. ,    0.6],       [ -20. ,   65. ,    0.6],       [ -57. ,   45. ,    0.8],       [ -75. ,   -5. ,    1.4],       [ -58. ,  -39. ,    0.8],       [ -21. ,  -74. ,    0.6],       [  17. ,  -69. ,    0.6],       [  55. ,  -41. ,    0.6],       [  82. ,    2. ,    1.5],       [  66. ,   51. ,    0.8],       [  29. ,   74. ,    1.1],       [ -24. ,   78. ,    1. ],       [ -63. ,   47. ,    1.3],       [ -79. ,   -5. ,    1.3],       [ -66. ,  -52. ,    0.6],       [ -25. ,  -76. ,    1.5],       [  24. ,  -81. ,    0.7],       [  61. ,  -52. ,    0.8],       [  83. ,    4. ,    1.1],       [  73. ,   49. ,    1.1],       [  31. ,   79. ,    0.8],       [ -27. ,   83. ,    0.9],       [ -72. ,   47. ,    1.3],       [ -89. ,   -2. ,    1.2],       [ -67. ,  -52. ,    1.4],       [ -26. ,  -79. ,    0.8],       [  31. ,  -84. ,    0.8],       [  67. ,  -48. ,    0.6],       [  94. ,    1. ,    1.5],       [  74. ,   53. ,    1. ],       [  25. ,   88. ,    0.7],       [ -28. ,   84. ,    1.3],       [ -73. ,   51. ,    0.7],       [ -99. ,    2. ,    1. ],       [ -71. ,  -55. ,    1.1],       [ -28. ,  -90. ,    0.6],       [  24. ,  -94. ,    1.3],       [  71. ,  -56. ,    0.9],       [ 101. ,    0. ,    1.3],       [  76. ,   60. ,    0.7],       [  33. ,   99. ,    0.7],       [ -36. ,   99. ,    0.8],       [ -84. ,   55. ,    1. ],       [-102. ,    2. ,    0.6],       [ -84. ,  -64. ,    1.3],       [ -33. , -100. ,    1.2],       [  26. ,  -91. ,    1.2],       [  83. ,  -59. ,    0.8]])
        basis0 = BSplineBasis(5, np.array([-0.6,  0. ,  0. ,  0. ,  0. ,  0.8,  2.2,  3.1,  3.7,  5.3,  6.4,  7. ,  7. ,  7. ,  7. ,
        7.8]),0)
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  2.3,  3. ,  3. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [2.049]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 17)
        surf2.insert_knot(0, [2.673]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(0, [3.387]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [1.974]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 26)
        surf2.insert_knot(1, [1.417]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 13)
        surf2.insert_knot(1, [1.168]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 15)
        surf2.insert_knot(1, [1.714]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 18)
        surf2.insert_knot(1, [1.275]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 22)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p6_rational_C1_periodic(self):
        controlpoints = np.array([[ 101. ,   -1. ,    1.4],
       [  94. ,   45. ,    1.1],
       [  63. ,   73. ,    1.4],
       [  19. ,   96. ,    1.5],
       [ -18. ,   95. ,    1. ],
       [ -62. ,   77. ,    1.1],
       [ -86. ,   48. ,    0.8],
       [ -98. ,   -4. ,    1.3],
       [ -88. ,  -39. ,    0.9],
       [ -61. ,  -74. ,    1.3],
       [ -19. ,  -94. ,    1.3],
       [  25. ,  -99. ,    1.5],
       [  62. ,  -78. ,    0.9],
       [  92. ,  -45. ,    0.9]])
        basis0 = BSplineBasis(6, np.array([ -2. ,  -1. ,   0. ,   0. ,   0. ,   0. ,   0.8,   1.8,   3. ,   4.3,   4.6,   5.8,   7.3,
         8. ,   9. ,  10. ,  11. ,  11. ,  11. ,  11. ,  11.8,  12.8]),1)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([9.292]*1) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 23)
        crv2.insert_knot([5.905]*2) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 25)
        crv2.insert_knot([5.442]*3) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 28)
        crv2.insert_knot([5.776]*4) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 32)
        crv2.insert_knot([4.550]*5) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 37)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p76_rational_C1_periodic(self):
        controlpoints = np.array([[  56. ,    2. ,    1.4],       [  51. ,   25. ,    0.6],       [  45. ,   44. ,    1.3],       [  20. ,   57. ,    1.4],       [   0. ,   63. ,    1.3],       [ -28. ,   56. ,    1.4],       [ -42. ,   38. ,    1. ],       [ -60. ,   24. ,    1.2],       [ -57. ,   -5. ,    1.5],       [ -52. ,  -21. ,    0.9],       [ -47. ,  -39. ,    0.7],       [ -23. ,  -52. ,    1.1],       [  -5. ,  -56. ,    1.2],       [  23. ,  -54. ,    1.2],       [  39. ,  -47. ,    1.2],       [  60. ,  -27. ,    0.9],       [  64. ,   -3. ,    0.9],       [  60. ,   27. ,    1.5],       [  48. ,   44. ,    0.9],       [  29. ,   61. ,    0.8],       [   2. ,   66. ,    1.3],       [ -29. ,   63. ,    0.7],       [ -50. ,   43. ,    1. ],       [ -65. ,   22. ,    0.7],       [ -69. ,    1. ,    0.7],       [ -65. ,  -27. ,    1.3],       [ -51. ,  -52. ,    1. ],       [ -23. ,  -62. ,    1.5],       [  -2. ,  -70. ,    1.4],       [  26. ,  -61. ,    1.1],       [  48. ,  -44. ,    1.3],       [  60. ,  -30. ,    1.3],       [  76. ,   -3. ,    1.3],       [  68. ,   26. ,    1.2],       [  55. ,   48. ,    0.7],       [  29. ,   64. ,    1.2],       [  -1. ,   74. ,    1.4],       [ -33. ,   65. ,    1.2],       [ -51. ,   53. ,    1.2],       [ -68. ,   28. ,    1.2],       [ -70. ,    4. ,    1.1],       [ -64. ,  -27. ,    1.5],       [ -51. ,  -55. ,    0.8],       [ -31. ,  -68. ,    0.9],       [   3. ,  -77. ,    0.7],       [  30. ,  -73. ,    1.5],       [  48. ,  -53. ,    1.2],       [  69. ,  -33. ,    0.6],       [  83. ,    0. ,    0.5],       [  78. ,   31. ,    1.2],       [  60. ,   55. ,    0.8],       [  34. ,   70. ,    0.6],       [  -1. ,   78. ,    1.4],       [ -33. ,   73. ,    1.2],       [ -62. ,   55. ,    1.2],       [ -77. ,   26. ,    1.3],       [ -76. ,   -3. ,    0.5],       [ -78. ,  -28. ,    0.8],       [ -60. ,  -62. ,    0.7],       [ -27. ,  -71. ,    1. ],       [   2. ,  -85. ,    1.3],       [  34. ,  -73. ,    0.5],       [  56. ,  -53. ,    0.7],       [  77. ,  -29. ,    1.1],       [  85. ,   -2. ,    0.7],       [  81. ,   29. ,    1.3],       [  56. ,   58. ,    0.6],       [  30. ,   82. ,    0.8],       [   2. ,   87. ,    1.1],       [ -37. ,   79. ,    1.2],       [ -60. ,   65. ,    1.2],       [ -81. ,   31. ,    0.9],       [ -89. ,   -1. ,    0.9],       [ -81. ,  -36. ,    1.2],       [ -61. ,  -59. ,    1. ],       [ -35. ,  -79. ,    0.6],       [   3. ,  -85. ,    0.7],       [  31. ,  -81. ,    1.3],       [  65. ,  -58. ,    0.6],       [  83. ,  -34. ,    1.1],       [  95. ,   -2. ,    1. ],       [  82. ,   30. ,    0.7],       [  69. ,   61. ,    1. ],       [  40. ,   87. ,    0.9],       [   4. ,   93. ,    1.2],       [ -33. ,   83. ,    0.8],       [ -66. ,   70. ,    0.7],       [ -84. ,   39. ,    1.3],       [ -91. ,    1. ,    1.3],       [ -85. ,  -36. ,    0.9],       [ -62. ,  -63. ,    0.7],       [ -37. ,  -86. ,    1.5],       [  -2. ,  -95. ,    1.4],       [  32. ,  -91. ,    0.6],       [  61. ,  -70. ,    0.8],       [  86. ,  -37. ,    0.8],       [  96. ,    0. ,    1.3],       [  88. ,   38. ,    1.4],       [  71. ,   74. ,    1.3],       [  35. ,   95. ,    0.9],       [   4. ,   95. ,    0.7],       [ -40. ,   95. ,    0.6],       [ -69. ,   71. ,    1.4],       [ -95. ,   41. ,    1. ],       [-105. ,    1. ,    0.9],       [ -97. ,  -40. ,    1.3],       [ -67. ,  -74. ,    1.1],       [ -43. ,  -93. ,    1.3],       [   0. , -104. ,    0.8],       [  42. ,  -89. ,    0.8],       [  66. ,  -72. ,    0.5],       [  91. ,  -41. ,    0.7]])
        basis0 = BSplineBasis(7, np.array([ -1.8,  -0.9,   0. ,   0. ,   0. ,   0. ,   0. ,   1.1,   1.8,   2.8,   3.9,   4.9,   6.1,
         6.9,   8.2,   8.8,  10.2,  11.1,  12. ,  12. ,  12. ,  12. ,  12. ,  13.1,  13.8]),1)
        basis1 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [4.721]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 26)
        surf2.insert_knot(0, [3.256]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 28)
        surf2.insert_knot(0, [7.875]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 31)
        surf2.insert_knot(0, [4.681]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 35)
        surf2.insert_knot(0, [3.210]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 40)
        surf2.insert_knot(0, [5.079]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 46)
        surf2.insert_knot(1, [0.800]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 14)
        surf2.insert_knot(1, [0.800]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [0.800]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 19)
        surf2.insert_knot(1, [0.800]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 23)
        surf2.insert_knot(1, [0.800]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 28)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p6_rational_C2_periodic(self):
        controlpoints = np.array([[ 103. ,    1. ,    1.1],
       [  93. ,   39. ,    1.5],
       [  72. ,   69. ,    0.5],
       [  40. ,   87. ,    1.5],
       [   4. ,   99. ,    1.5],
       [ -35. ,   91. ,    1.4],
       [ -75. ,   68. ,    0.6],
       [ -92. ,   40. ,    0.8],
       [ -96. ,    2. ,    1.2],
       [ -90. ,  -43. ,    1.2],
       [ -70. ,  -76. ,    1. ],
       [ -38. ,  -92. ,    1.2],
       [  -5. ,  -98. ,    1.1],
       [  33. ,  -97. ,    0.9],
       [  70. ,  -71. ,    1.3],
       [  95. ,  -36. ,    0.6]])
        basis0 = BSplineBasis(6, np.array([ -2.8,  -2. ,  -1.2,   0. ,   0. ,   0. ,   1.1,   2.1,   3.2,   4. ,   4.7,   5.7,   7.1,
         8.3,   9. ,   9.6,  11.2,  12. ,  12.8,  14. ,  14. ,  14. ,  15.1,  16.1,  17.2]),2)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([8.064]*1) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)
        crv2.insert_knot([2.907]*2) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 28)
        crv2.insert_knot([3.647]*3) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 31)
        crv2.insert_knot([11.513]*4) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 35)
        crv2.insert_knot([6.295]*5) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 40)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p67_rational_C2_periodic(self):
        controlpoints = np.array([[  61. ,    4. ,    0.6],       [  53. ,   27. ,    1.2],       [  46. ,   46. ,    1. ],       [  27. ,   55. ,    1.3],       [  -2. ,   60. ,    1.3],       [ -20. ,   59. ,    1.2],       [ -48. ,   43. ,    0.7],       [ -55. ,   23. ,    0.5],       [ -61. ,    3. ,    0.9],       [ -53. ,  -20. ,    0.9],       [ -47. ,  -43. ,    1.1],       [ -22. ,  -59. ,    0.9],       [   1. ,  -61. ,    1. ],       [  22. ,  -52. ,    1.5],       [  38. ,  -44. ,    0.8],       [  50. ,  -22. ,    1.2],       [  63. ,   -3. ,    1. ],       [  54. ,   23. ,    0.7],       [  40. ,   47. ,    0.8],       [  22. ,   59. ,    1.2],       [   2. ,   67. ,    0.6],       [ -25. ,   62. ,    1.2],       [ -42. ,   46. ,    0.8],       [ -56. ,   19. ,    1.4],       [ -61. ,    3. ,    0.8],       [ -63. ,  -23. ,    1.4],       [ -47. ,  -43. ,    0.8],       [ -27. ,  -59. ,    1.4],       [   3. ,  -61. ,    1.1],       [  21. ,  -57. ,    1.5],       [  41. ,  -41. ,    1.2],       [  58. ,  -21. ,    0.5],       [  69. ,    3. ,    0.6],       [  63. ,   27. ,    0.6],       [  52. ,   46. ,    1.4],       [  27. ,   57. ,    0.5],       [   4. ,   68. ,    1.4],       [ -31. ,   61. ,    1. ],       [ -52. ,   44. ,    0.7],       [ -63. ,   28. ,    1.5],       [ -71. ,    3. ,    1.2],       [ -66. ,  -30. ,    0.6],       [ -49. ,  -48. ,    1.1],       [ -30. ,  -63. ,    0.9],       [   0. ,  -64. ,    1.3],       [  24. ,  -65. ,    0.7],       [  44. ,  -48. ,    1. ],       [  65. ,  -30. ,    1.3],       [  69. ,   -4. ,    1.1],       [  66. ,   30. ,    0.8],       [  52. ,   50. ,    0.6],       [  23. ,   65. ,    0.8],       [  -4. ,   74. ,    0.9],       [ -25. ,   66. ,    1. ],       [ -53. ,   53. ,    1.4],       [ -62. ,   29. ,    0.9],       [ -74. ,   -5. ,    0.8],       [ -64. ,  -33. ,    1.3],       [ -50. ,  -55. ,    1.1],       [ -26. ,  -64. ,    0.8],       [   3. ,  -77. ,    1.5],       [  31. ,  -66. ,    1.3],       [  50. ,  -48. ,    1.3],       [  70. ,  -27. ,    0.8],       [  73. ,   -3. ,    0.5],       [  65. ,   31. ,    0.8],       [  49. ,   55. ,    0.7],       [  26. ,   65. ,    0.8],       [   2. ,   80. ,    0.7],       [ -25. ,   73. ,    1.5],       [ -58. ,   56. ,    0.8],       [ -67. ,   32. ,    0.9],       [ -75. ,   -1. ,    1.4],       [ -75. ,  -26. ,    0.6],       [ -58. ,  -50. ,    0.9],       [ -31. ,  -75. ,    1.2],       [  -3. ,  -76. ,    0.8],       [  33. ,  -68. ,    1.3],       [  55. ,  -56. ,    0.9],       [  66. ,  -30. ,    1.5],       [  75. ,   -1. ,    0.6],       [  78. ,   27. ,    1.3],       [  57. ,   56. ,    0.7],       [  32. ,   72. ,    0.7],       [   4. ,   81. ,    0.7],       [ -33. ,   77. ,    1.1],       [ -60. ,   57. ,    1.3],       [ -79. ,   32. ,    0.8],       [ -76. ,    3. ,    1.2],       [ -73. ,  -28. ,    0.9],       [ -56. ,  -55. ,    0.6],       [ -32. ,  -74. ,    0.9],       [   1. ,  -84. ,    1.1],       [  28. ,  -79. ,    1.2],       [  52. ,  -57. ,    0.8],       [  76. ,  -35. ,    1.2],       [  79. ,    1. ,    0.6],       [  76. ,   28. ,    1. ],       [  64. ,   57. ,    0.6],       [  32. ,   75. ,    0.9],       [   0. ,   87. ,    1.3],       [ -35. ,   78. ,    1. ],       [ -57. ,   54. ,    0.7],       [ -76. ,   27. ,    1.3],       [ -86. ,   -2. ,    0.5],       [ -79. ,  -30. ,    1.4],       [ -57. ,  -60. ,    1. ],       [ -31. ,  -81. ,    1.2],       [  -5. ,  -82. ,    0.9],       [  32. ,  -79. ,    0.7],       [  61. ,  -60. ,    1.1],       [  77. ,  -31. ,    0.8],       [  90. ,    4. ,    0.7],       [  78. ,   33. ,    0.9],       [  62. ,   61. ,    1.2],       [  29. ,   83. ,    0.6],       [   0. ,   91. ,    0.8],       [ -32. ,   84. ,    1. ],       [ -59. ,   65. ,    0.9],       [ -81. ,   29. ,    0.9],       [ -92. ,   -3. ,    0.8],       [ -82. ,  -29. ,    0.6],       [ -64. ,  -59. ,    0.5],       [ -32. ,  -81. ,    1.2],       [   1. ,  -89. ,    0.6],       [  32. ,  -84. ,    1.4],       [  63. ,  -62. ,    1.5],       [  83. ,  -36. ,    0.6],       [  92. ,   -5. ,    1.4],       [  82. ,   38. ,    0.5],       [  65. ,   61. ,    1.4],       [  39. ,   85. ,    0.9],       [   1. ,   96. ,    1.3],       [ -33. ,   83. ,    1. ],       [ -61. ,   67. ,    1.3],       [ -86. ,   36. ,    1.5],       [ -88. ,    3. ,    1. ],       [ -89. ,  -35. ,    0.5],       [ -65. ,  -66. ,    1.2],       [ -36. ,  -81. ,    1.2],       [  -3. ,  -95. ,    1. ],       [  36. ,  -81. ,    0.6],       [  60. ,  -65. ,    1. ],       [  84. ,  -41. ,    1. ],       [  98. ,    4. ,    1.2],       [  87. ,   36. ,    0.6],       [  70. ,   65. ,    0.6],       [  37. ,   93. ,    0.9],       [   0. ,   94. ,    0.9],       [ -34. ,   87. ,    0.8],       [ -72. ,   65. ,    1.4],       [ -91. ,   40. ,    1.3],       [ -92. ,   -4. ,    1.3],       [ -92. ,  -39. ,    0.7],       [ -64. ,  -68. ,    1.2],       [ -39. ,  -91. ,    1.5],       [  -1. ,  -93. ,    1.1],       [  34. ,  -93. ,    0.8],       [  67. ,  -71. ,    0.6],       [  84. ,  -39. ,    1.4],       [ 104. ,    2. ,    1.1],       [  92. ,   33. ,    1.3],       [  74. ,   74. ,    1.2],       [  35. ,   93. ,    1. ],       [  -5. ,   95. ,    0.7],       [ -42. ,   91. ,    1.2],       [ -68. ,   67. ,    1.2],       [ -93. ,   39. ,    1. ],       [-103. ,    0. ,    1.3],       [ -92. ,  -36. ,    1.1],       [ -75. ,  -71. ,    0.7],       [ -39. ,  -89. ,    0.7],       [   2. , -100. ,    0.7],       [  33. ,  -97. ,    0.5],       [  70. ,  -72. ,    1.4],       [  93. ,  -37. ,    0.6]])
        basis0 = BSplineBasis(6, np.array([ -2.8,  -1.8,  -0.8,   0. ,   0. ,   0. ,   1. ,   1.7,   3. ,   4.4,   5.2,   5.6,   7.2,
         8.2,   9.1,  10. ,  11.2,  12.2,  13.2,  14. ,  14. ,  14. ,  15. ,  15.7,  17. ]),2)
        basis1 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.6,  2. ,  2.6,  3.9,  5. ,  5. ,  5. ,  5. ,
        5. ,  5. ,  5. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [9.798]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 26)
        surf2.insert_knot(0, [12.219]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 28)
        surf2.insert_knot(0, [8.679]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 31)
        surf2.insert_knot(0, [3.041]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 35)
        surf2.insert_knot(0, [8.582]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 40)
        surf2.insert_knot(1, [2.389]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 19)
        surf2.insert_knot(1, [0.628]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 21)
        surf2.insert_knot(1, [1.980]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 24)
        surf2.insert_knot(1, [1.985]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 28)
        surf2.insert_knot(1, [1.718]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 33)
        surf2.insert_knot(1, [1.963]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 39)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p7(self):
        controlpoints = np.array([[  3.,   2.],
       [  9.,  -2.],
       [ 15.,  -1.],
       [ 31.,   4.],
       [ 41.,   4.],
       [ 45.,  -5.],
       [ 54.,   2.],
       [ 63.,   3.],
       [ 71.,   2.],
       [ 82.,  -5.],
       [ 90.,   0.],
       [ 99.,   3.]])
        basis0 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  2.2,  2.8,  3.9,  4.8,  6. ,  6. ,  6. ,
        6. ,  6. ,  6. ,  6. ]))
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([3.312]*1) # insert C5-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 20)
        crv2.insert_knot([0.894]*2) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 22)
        crv2.insert_knot([3.301]*3) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 25)
        crv2.insert_knot([4.767]*4) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 29)
        crv2.insert_knot([4.086]*5) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 34)
        crv2.insert_knot([2.035]*6) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 40)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p75(self):
        controlpoints = np.array([[  -3.,   -3.],       [  13.,    1.],       [  15.,   -4.],       [  24.,   -4.],       [  36.,    3.],       [  48.,    2.],       [  51.,    1.],       [  61.,    0.],       [  76.,    1.],       [  80.,    3.],       [  89.,   -3.],       [  96.,    3.],       [  -3.,   17.],       [   6.,   15.],       [  21.,   16.],       [  30.,   22.],       [  40.,   20.],       [  50.,   16.],       [  52.,   16.],       [  64.,   18.],       [  71.,   16.],       [  81.,   22.],       [  94.,   17.],       [ 102.,   20.],       [   1.,   35.],       [   6.,   41.],       [  20.,   39.],       [  22.,   36.],       [  37.,   37.],       [  48.,   42.],       [  56.,   39.],       [  64.,   44.],       [  69.,   39.],       [  77.,   40.],       [  90.,   39.],       [  96.,   35.],       [  -3.,   57.],       [   8.,   62.],       [  20.,   60.],       [  25.,   56.],       [  38.,   56.],       [  48.,   58.],       [  55.,   60.],       [  60.,   63.],       [  67.,   58.],       [  83.,   58.],       [  95.,   63.],       [ 104.,   62.],       [   3.,   78.],       [   8.,   75.],       [  14.,   80.],       [  23.,   84.],       [  35.,   78.],       [  45.,   83.],       [  50.,   78.],       [  64.,   75.],       [  70.,   78.],       [  84.,   77.],       [  92.,   81.],       [  99.,   81.],       [  -3.,   95.],       [   7.,  101.],       [  15.,   98.],       [  24.,   98.],       [  40.,  100.],       [  45.,  103.],       [  58.,  100.],       [  63.,  103.],       [  71.,  104.],       [  79.,   98.],       [  86.,  100.],       [  95.,   97.]])
        basis0 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.3,  1.9,  3.3,  4.4,  4.8,  6. ,  6. ,  6. ,
        6. ,  6. ,  6. ,  6. ]))
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.9,  2. ,  2. ,  2. ,  2. ,  2. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [2.192]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 20)
        surf2.insert_knot(0, [2.209]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [1.509]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [2.188]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(0, [4.232]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 34)
        surf2.insert_knot(0, [1.790]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 40)
        surf2.insert_knot(1, [0.900]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 12)
        surf2.insert_knot(1, [0.900]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 14)
        surf2.insert_knot(1, [0.900]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 17)
        surf2.insert_knot(1, [0.900]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 21)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p7_C0_periodic(self):
        controlpoints = np.array([[  95.,    3.],
       [  87.,   48.],
       [  63.,   82.],
       [  25.,   97.],
       [ -19.,   99.],
       [ -67.,   81.],
       [ -94.,   43.],
       [-103.,   -3.],
       [ -93.,  -44.],
       [ -60.,  -75.],
       [ -26., -100.],
       [  18.,  -98.],
       [  62.,  -83.],
       [  88.,  -45.]])
        basis0 = BSplineBasis(7, np.array([ -0.7,   0. ,   0. ,   0. ,   0. ,   0. ,   0. ,   1.3,   2.1,   3. ,   3.7,   4.7,   5.7,
         7.1,   8.3,   9. ,   9. ,   9. ,   9. ,   9. ,   9. ,  10.3]),0)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([2.022]*1) # insert C5-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 23)
        crv2.insert_knot([1.844]*2) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 25)
        crv2.insert_knot([2.558]*3) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 28)
        crv2.insert_knot([4.055]*4) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 32)
        crv2.insert_knot([7.006]*5) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 37)
        crv2.insert_knot([5.111]*6) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 43)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p56_C0_periodic(self):
        controlpoints = np.array([[  57.,    2.],       [  48.,   31.],       [  13.,   53.],       [ -18.,   56.],       [ -47.,   34.],       [ -61.,    1.],       [ -54.,  -38.],       [ -18.,  -55.],       [  20.,  -53.],       [  44.,  -39.],       [  69.,    4.],       [  53.,   34.],       [  22.,   66.],       [ -24.,   65.],       [ -53.,   40.],       [ -64.,   -4.],       [ -55.,  -44.],       [ -22.,  -64.],       [  22.,  -61.],       [  50.,  -37.],       [  75.,    2.],       [  59.,   43.],       [  20.,   64.],       [ -19.,   68.],       [ -56.,   46.],       [ -73.,   -1.],       [ -55.,  -47.],       [ -20.,  -73.],       [  26.,  -68.],       [  58.,  -46.],       [  79.,    3.],       [  59.,   47.],       [  26.,   71.],       [ -29.,   70.],       [ -59.,   42.],       [ -77.,   -3.],       [ -65.,  -50.],       [ -29.,  -72.],       [  23.,  -70.],       [  62.,  -45.],       [  79.,    1.],       [  66.,   49.],       [  22.,   78.],       [ -25.,   81.],       [ -67.,   53.],       [ -85.,   -3.],       [ -63.,  -50.],       [ -21.,  -79.],       [  27.,  -74.],       [  62.,  -46.],       [  91.,   -3.],       [  66.,   51.],       [  30.,   79.],       [ -31.,   89.],       [ -68.,   50.],       [ -93.,    3.],       [ -76.,  -57.],       [ -32.,  -80.],       [  27.,  -80.],       [  76.,  -54.],       [  96.,   -5.],       [  72.,   52.],       [  28.,   94.],       [ -29.,   91.],       [ -75.,   55.],       [ -95.,    3.],       [ -77.,  -51.],       [ -29.,  -89.],       [  26.,  -92.],       [  74.,  -57.],       [  96.,    1.],       [  77.,   60.],       [  30.,   97.],       [ -35.,   90.],       [ -83.,   61.],       [-105.,   -1.],       [ -78.,  -55.],       [ -29.,  -99.],       [  34.,  -93.],       [  78.,  -63.]])
        basis0 = BSplineBasis(5, np.array([-0.7,  0. ,  0. ,  0. ,  0. ,  0.9,  2.3,  3. ,  3.6,  5.2,  6.3,  7. ,  7. ,  7. ,  7. ,
        7.9]),0)
        basis1 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.1,  1.9,  3. ,  3. ,  3. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [5.487]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 17)
        surf2.insert_knot(0, [3.556]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(0, [4.459]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [1.990]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 26)
        surf2.insert_knot(1, [1.232]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 15)
        surf2.insert_knot(1, [1.469]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 17)
        surf2.insert_knot(1, [1.558]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 20)
        surf2.insert_knot(1, [1.351]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 24)
        surf2.insert_knot(1, [1.115]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 29)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p7_C1_periodic(self):
        controlpoints = np.array([[ 102.,   -4.],
       [  95.,   36.],
       [  75.,   70.],
       [  41.,   87.],
       [   3.,  102.],
       [ -38.,   96.],
       [ -72.,   73.],
       [ -98.,   33.],
       [ -96.,    2.],
       [ -91.,  -35.],
       [ -71.,  -73.],
       [ -42.,  -93.],
       [  -5., -101.],
       [  42.,  -92.],
       [  70.,  -75.],
       [  89.,  -36.]])
        basis0 = BSplineBasis(7, np.array([ -1.8,  -1. ,   0. ,   0. ,   0. ,   0. ,   0. ,   0.6,   2.3,   2.7,   4.3,   5. ,   6.2,
         7. ,   8. ,   9.2,  10.2,  11. ,  12. ,  12. ,  12. ,  12. ,  12. ,  12.6,  14.3]),1)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([10.649]*1) # insert C5-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)
        crv2.insert_knot([5.638]*2) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 28)
        crv2.insert_knot([4.119]*3) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 31)
        crv2.insert_knot([6.837]*4) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 35)
        crv2.insert_knot([1.288]*5) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 40)
        crv2.insert_knot([10.684]*6) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 46)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p57_C1_periodic(self):
        controlpoints = np.array([[  64.,   -1.],       [  51.,   26.],       [  33.,   48.],       [   3.,   64.],       [ -26.,   54.],       [ -57.,   33.],       [ -59.,    0.],       [ -53.,  -27.],       [ -28.,  -48.],       [  -5.,  -59.],       [  34.,  -48.],       [  47.,  -31.],       [  65.,    4.],       [  57.,   32.],       [  35.,   60.],       [   3.,   61.],       [ -32.,   59.],       [ -60.,   28.],       [ -70.,    2.],       [ -58.,  -34.],       [ -37.,  -62.],       [  -2.,  -68.],       [  34.,  -60.],       [  59.,  -32.],       [  74.,    4.],       [  57.,   40.],       [  33.,   61.],       [   4.,   67.],       [ -39.,   61.],       [ -65.,   34.],       [ -69.,    2.],       [ -67.,  -33.],       [ -41.,  -65.],       [  -1.,  -68.],       [  34.,  -67.],       [  61.,  -41.],       [  79.,   -5.],       [  70.,   34.],       [  34.,   67.],       [  -4.,   81.],       [ -40.,   69.],       [ -71.,   42.],       [ -80.,    4.],       [ -68.,  -38.],       [ -40.,  -65.],       [  -3.,  -75.],       [  43.,  -69.],       [  64.,  -44.],       [  84.,   -3.],       [  69.,   44.],       [  45.,   68.],       [   4.,   84.],       [ -47.,   75.],       [ -71.,   39.],       [ -86.,    4.],       [ -75.,  -40.],       [ -45.,  -74.],       [   1.,  -84.],       [  37.,  -75.],       [  71.,  -45.],       [  83.,   -5.],       [  75.,   47.],       [  45.,   73.],       [  -2.,   85.],       [ -47.,   79.],       [ -78.,   41.],       [ -86.,   -2.],       [ -73.,  -49.],       [ -44.,  -75.],       [  -4.,  -92.],       [  41.,  -77.],       [  72.,  -46.],       [  96.,   -1.],       [  85.,   48.],       [  50.,   85.],       [   1.,   94.],       [ -46.,   77.],       [ -84.,   42.],       [ -93.,   -3.],       [ -86.,  -48.],       [ -45.,  -78.],       [   1.,  -93.],       [  42.,  -87.],       [  82.,  -50.],       [ 103.,   -2.],       [  86.,   48.],       [  48.,   89.],       [   2.,   96.],       [ -46.,   81.],       [ -87.,   45.],       [-100.,   -5.],       [ -85.,  -52.],       [ -50.,  -92.],       [  -4., -103.],       [  45.,  -84.],       [  89.,  -46.]])
        basis0 = BSplineBasis(5, np.array([ -1.9,  -1.3,   0. ,   0. ,   0. ,   0.9,   1.7,   3.2,   3.8,   5.4,   6.2,   7.3,   8.1,
         8.7,  10. ,  10. ,  10. ,  10.9,  11.7]),1)
        basis1 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.7,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [7.335]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 20)
        surf2.insert_knot(0, [2.209]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [4.200]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [1.563]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(1, [0.700]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [0.700]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 18)
        surf2.insert_knot(1, [0.700]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 21)
        surf2.insert_knot(1, [0.700]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 25)
        surf2.insert_knot(1, [0.700]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 30)
        surf2.insert_knot(1, [0.700]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 36)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_2D_p6_C2_periodic(self):
        controlpoints = np.array([[  98.,    0.],
       [  94.,   38.],
       [  68.,   67.],
       [  35.,   90.],
       [   0.,  101.],
       [ -38.,   93.],
       [ -68.,   71.],
       [ -97.,   37.],
       [-101.,    0.],
       [ -96.,  -39.],
       [ -75.,  -74.],
       [ -36.,  -92.],
       [  -2.,  -96.],
       [  34.,  -91.],
       [  72.,  -69.],
       [  88.,  -43.]])
        basis0 = BSplineBasis(6, np.array([ -3.3,  -2.1,  -1.2,   0. ,   0. ,   0. ,   0.8,   2.3,   3.4,   4. ,   5.3,   6.3,   7.1,
         7.7,   8.8,  10.2,  10.7,  11.9,  12.8,  14. ,  14. ,  14. ,  14.8,  16.3,  17.4]),2)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([3.769]*1) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)
        crv2.insert_knot([10.879]*2) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 28)
        crv2.insert_knot([8.520]*3) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 31)
        crv2.insert_knot([12.671]*4) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 35)
        crv2.insert_knot([2.138]*5) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 40)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_2D_p77_C2_periodic(self):
        controlpoints = np.array([[  62.,   -2.],       [  56.,   19.],       [  46.,   34.],       [  29.,   51.],       [   5.,   54.],       [  -8.,   58.],       [ -34.,   50.],       [ -49.,   41.],       [ -54.,   17.],       [ -62.,   -5.],       [ -52.,  -25.],       [ -49.,  -34.],       [ -33.,  -52.],       [ -14.,  -62.],       [   5.,  -61.],       [  32.,  -48.],       [  50.,  -39.],       [  60.,  -19.],       [  70.,    3.],       [  64.,   20.],       [  53.,   43.],       [  33.,   61.],       [   8.,   66.],       [ -15.,   65.],       [ -37.,   52.],       [ -51.,   42.],       [ -60.,   26.],       [ -62.,    1.],       [ -64.,  -27.],       [ -51.,  -44.],       [ -30.,  -55.],       [ -16.,  -66.],       [  10.,  -69.],       [  30.,  -62.],       [  51.,  -42.],       [  62.,  -28.],       [  72.,   -1.],       [  67.,   27.],       [  49.,   50.],       [  37.,   62.],       [  13.,   65.],       [ -12.,   66.],       [ -37.,   62.],       [ -51.,   46.],       [ -63.,   22.],       [ -71.,   -5.],       [ -71.,  -29.],       [ -59.,  -48.],       [ -38.,  -67.],       [ -13.,  -69.],       [  10.,  -69.],       [  38.,  -67.],       [  52.,  -50.],       [  64.,  -20.],       [  76.,   -2.],       [  67.,   25.],       [  57.,   51.],       [  34.,   69.],       [  15.,   71.],       [ -17.,   76.],       [ -39.,   69.],       [ -60.,   47.],       [ -73.,   21.],       [ -74.,    2.],       [ -77.,  -26.],       [ -61.,  -52.],       [ -42.,  -64.],       [ -18.,  -80.],       [  15.,  -72.],       [  37.,  -65.],       [  63.,  -51.],       [  75.,  -28.],       [  82.,   -3.],       [  79.,   32.],       [  62.,   54.],       [  41.,   66.],       [  10.,   81.],       [ -20.,   83.],       [ -43.,   73.],       [ -65.,   55.],       [ -82.,   23.],       [ -80.,    4.],       [ -74.,  -25.],       [ -59.,  -50.],       [ -46.,  -71.],       [ -11.,  -80.],       [  18.,  -84.],       [  36.,  -72.],       [  59.,  -52.],       [  73.,  -30.],       [  84.,    0.],       [  83.,   27.],       [  68.,   59.],       [  47.,   81.],       [  16.,   89.],       [ -20.,   85.],       [ -40.,   75.],       [ -71.,   53.],       [ -82.,   32.],       [ -90.,    4.],       [ -83.,  -30.],       [ -68.,  -54.],       [ -47.,  -79.],       [ -18.,  -91.],       [  10.,  -86.],       [  43.,  -73.],       [  66.,  -54.],       [  81.,  -29.],       [  98.,   -3.],       [  92.,   27.],       [  76.,   62.],       [  51.,   83.],       [  13.,   88.],       [ -19.,   89.],       [ -49.,   77.],       [ -73.,   58.],       [ -92.,   33.],       [ -99.,    2.],       [ -88.,  -36.],       [ -74.,  -61.],       [ -51.,  -81.],       [ -15.,  -96.],       [  17.,  -91.],       [  50.,  -86.],       [  74.,  -56.],       [  84.,  -31.],       [  96.,   -4.],       [  94.,   31.],       [  76.,   69.],       [  50.,   84.],       [  13.,  100.],       [ -17.,  101.],       [ -53.,   91.],       [ -74.,   64.],       [ -95.,   37.],       [-105.,    4.],       [ -99.,  -35.],       [ -74.,  -69.],       [ -47.,  -85.],       [ -18., -104.],       [  16.,  -98.],       [  53.,  -86.],       [  80.,  -69.],       [  94.,  -38.]])
        basis0 = BSplineBasis(7, np.array([ -3.1,  -1.8,  -0.8,   0. ,   0. ,   0. ,   0. ,   0.8,   2.1,   2.9,   4.1,   4.8,   6.4,
         6.7,   8.3,   9.3,  10.1,  11. ,  11.9,  13.2,  14.2,  15. ,  15. ,  15. ,  15. ,  15.8,
        17.1,  17.9]),2)
        basis1 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.2,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [13.021]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(0, [11.255]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 31)
        surf2.insert_knot(0, [7.416]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 34)
        surf2.insert_knot(0, [10.973]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 38)
        surf2.insert_knot(0, [8.316]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 43)
        surf2.insert_knot(0, [1.299]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 49)
        surf2.insert_knot(1, [1.200]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [1.200]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 18)
        surf2.insert_knot(1, [1.200]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 21)
        surf2.insert_knot(1, [1.200]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 25)
        surf2.insert_knot(1, [1.200]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 30)
        surf2.insert_knot(1, [1.200]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 36)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p6_rational(self):
        controlpoints = np.array([[  2. ,  -5. ,   1. ,   0.7],
       [  9. ,   3. ,  -4. ,   0.9],
       [ 22. ,  -4. ,  -5. ,   1.1],
       [ 31. ,   2. ,   0. ,   1. ],
       [ 41. ,   3. ,   0. ,   0.7],
       [ 45. ,  -4. ,  -1. ,   1.5],
       [ 59. ,  -3. ,   4. ,   0.9],
       [ 66. ,  -5. ,   4. ,   1.3],
       [ 83. ,  -5. ,   2. ,   1.1],
       [ 92. ,   2. ,   4. ,   0.6],
       [ 98. ,  -3. ,  -4. ,   1.2]])
        basis0 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.2,  2.2,  2.7,  4.4,  4.8,  6. ,  6. ,  6. ,  6. ,
        6. ,  6. ]))
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([2.607]*1) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 18)
        crv2.insert_knot([1.296]*2) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 20)
        crv2.insert_knot([3.279]*3) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 23)
        crv2.insert_knot([2.515]*4) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 27)
        crv2.insert_knot([4.428]*5) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 32)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p57_rational(self):
        controlpoints = np.array([[   4. ,   -3. ,   -3. ,    1.3],       [  14. ,    3. ,    0. ,    1.4],       [  32. ,   -2. ,    2. ,    0.7],       [  38. ,   -4. ,   -2. ,    0.9],       [  61. ,   -4. ,    2. ,    1.5],       [  72. ,   -4. ,    4. ,    0.6],       [  88. ,    2. ,    2. ,    1.1],       [  95. ,   -3. ,   -4. ,    1.2],       [   1. ,    5. ,    3. ,    1. ],       [  18. ,    9. ,   -1. ,    1.4],       [  30. ,    6. ,    4. ,    1.3],       [  44. ,   12. ,   -4. ,    1.2],       [  54. ,   14. ,    0. ,    1.5],       [  76. ,   11. ,   -1. ,    1. ],       [  90. ,   14. ,   -5. ,    1.1],       [ 102. ,    9. ,    0. ,    0.7],       [  -4. ,   19. ,   -4. ,    0.8],       [  13. ,   17. ,   -1. ,    1.4],       [  28. ,   16. ,    3. ,    0.7],       [  40. ,   23. ,    0. ,    1.3],       [  60. ,   22. ,    3. ,    1.2],       [  75. ,   17. ,   -4. ,    1.2],       [  86. ,   19. ,    2. ,    1.4],       [ 104. ,   22. ,   -3. ,    0.7],       [  -3. ,   29. ,   -1. ,    1.2],       [  10. ,   33. ,    2. ,    0.8],       [  23. ,   30. ,    1. ,    1. ],       [  44. ,   32. ,    4. ,    0.8],       [  62. ,   25. ,    2. ,    1.3],       [  69. ,   32. ,   -4. ,    1.3],       [  85. ,   31. ,   -5. ,    0.9],       [ 104. ,   28. ,    4. ,    1.5],       [  -1. ,   39. ,   -5. ,    1.2],       [  12. ,   39. ,   -1. ,    1.1],       [  31. ,   36. ,    0. ,    1.4],       [  46. ,   36. ,   -1. ,    0.8],       [  57. ,   42. ,    4. ,    0.7],       [  68. ,   38. ,    1. ,    0.6],       [  82. ,   36. ,    3. ,    0.6],       [  95. ,   40. ,   -5. ,    0.8],       [   4. ,   49. ,    1. ,    1.3],       [  11. ,   45. ,   -5. ,    1.2],       [  26. ,   50. ,    0. ,    1. ],       [  44. ,   53. ,   -2. ,    0.5],       [  54. ,   54. ,   -1. ,    1.4],       [  74. ,   48. ,    3. ,    1.5],       [  83. ,   53. ,   -2. ,    0.6],       [  96. ,   52. ,   -3. ,    0.7],       [  -4. ,   63. ,   -1. ,    1.1],       [  13. ,   62. ,   -2. ,    0.5],       [  25. ,   57. ,   -3. ,    1.2],       [  38. ,   63. ,    0. ,    1. ],       [  52. ,   62. ,   -2. ,    1.2],       [  74. ,   58. ,    3. ,    1.4],       [  88. ,   63. ,   -1. ,    0.8],       [ 100. ,   62. ,    1. ,    0.6],       [  -5. ,   65. ,   -1. ,    1.1],       [  15. ,   74. ,   -5. ,    0.5],       [  31. ,   74. ,   -1. ,    1.4],       [  38. ,   73. ,   -1. ,    1. ],       [  56. ,   69. ,   -5. ,    0.8],       [  73. ,   72. ,   -2. ,    0.7],       [  87. ,   74. ,   -4. ,    1.4],       [ 100. ,   68. ,   -4. ,    0.7],       [  -2. ,   83. ,   -2. ,    0.9],       [  10. ,   80. ,    3. ,    0.6],       [  33. ,   75. ,   -5. ,    0.8],       [  39. ,   84. ,    0. ,    1.4],       [  55. ,   75. ,    0. ,    0.8],       [  72. ,   78. ,   -4. ,    0.8],       [  85. ,   77. ,   -3. ,    0.6],       [ 101. ,   80. ,   -3. ,    0.5],       [  -4. ,   88. ,    3. ,    1. ],       [  10. ,   88. ,   -4. ,    1.3],       [  29. ,   90. ,    4. ,    0.7],       [  39. ,   91. ,    3. ,    1.4],       [  62. ,   88. ,    3. ,    0.6],       [  68. ,   89. ,    1. ,    1. ],       [  86. ,   91. ,    0. ,    1. ],       [  98. ,   92. ,   -4. ,    0.6],       [   0. ,  103. ,   -5. ,    1.3],       [  12. ,  103. ,   -3. ,    0.8],       [  29. ,   96. ,    2. ,    0.5],       [  47. ,   99. ,    4. ,    1. ],       [  57. ,  101. ,   -3. ,    1.3],       [  75. ,   99. ,   -5. ,    0.7],       [  89. ,   95. ,    0. ,    1.4],       [  99. ,   95. ,    4. ,    0.6]])
        basis0 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1.3,  2.1,  3.3,  4. ,  4. ,  4. ,  4. ,  4. ]))
        basis1 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.1,  2.4,  3.4,  4.1,  5. ,  5. ,  5. ,  5. ,
        5. ,  5. ,  5. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [1.701]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 14)
        surf2.insert_knot(0, [1.965]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 16)
        surf2.insert_knot(0, [2.705]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(0, [1.447]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 23)
        surf2.insert_knot(1, [4.077]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 19)
        surf2.insert_knot(1, [3.111]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 21)
        surf2.insert_knot(1, [4.065]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 24)
        surf2.insert_knot(1, [2.318]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 28)
        surf2.insert_knot(1, [2.916]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 33)
        surf2.insert_knot(1, [2.100]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 39)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p575_rational(self):
        controlpoints = np.array([[  -5. ,   -3. ,    0. ,    1. ],       [  12. ,    0. ,    4. ,    0.5],       [  32. ,   -1. ,   -5. ,    0.7],       [  44. ,   -5. ,    0. ,    0.9],       [  61. ,   -5. ,   -4. ,    1. ],       [  66. ,   -2. ,    0. ,    1. ],       [  82. ,    1. ,    3. ,    0.7],       [ 103. ,    4. ,    0. ,    0.6],       [  -4. ,    6. ,    2. ,    1. ],       [  12. ,   12. ,    3. ,    1. ],       [  27. ,   12. ,   -2. ,    0.7],       [  39. ,    8. ,   -3. ,    0.8],       [  59. ,    7. ,   -4. ,    1.1],       [  67. ,   14. ,    3. ,    0.7],       [  85. ,    8. ,   -3. ,    0.7],       [  98. ,    9. ,   -1. ,    1.3],       [   3. ,   22. ,   -5. ,    1.1],       [  14. ,   23. ,   -4. ,    0.9],       [  33. ,   21. ,   -2. ,    1.5],       [  43. ,   24. ,    1. ,    0.7],       [  52. ,   19. ,   -3. ,    1.2],       [  69. ,   26. ,    1. ,    0.6],       [  82. ,   22. ,    0. ,    1.4],       [ 102. ,   18. ,    3. ,    1.2],       [  -3. ,   38. ,   -5. ,    1.5],       [  16. ,   30. ,   -5. ,    1.2],       [  32. ,   34. ,    0. ,    1.2],       [  44. ,   29. ,    0. ,    0.6],       [  52. ,   33. ,   -2. ,    1. ],       [  75. ,   37. ,    2. ,    1.4],       [  86. ,   31. ,   -4. ,    1.3],       [  98. ,   35. ,   -4. ,    0.8],       [   0. ,   45. ,   -5. ,    0.7],       [  10. ,   45. ,    4. ,    0.7],       [  32. ,   46. ,    0. ,    1.5],       [  37. ,   42. ,    1. ,    0.8],       [  55. ,   46. ,   -1. ,    0.6],       [  67. ,   43. ,    4. ,    1.4],       [  89. ,   43. ,   -2. ,    1.2],       [ 104. ,   48. ,   -2. ,    1.1],       [   2. ,   55. ,    4. ,    0.8],       [  13. ,   50. ,   -5. ,    0.7],       [  24. ,   53. ,    0. ,    0.6],       [  40. ,   53. ,    1. ,    0.9],       [  58. ,   59. ,   -3. ,    1.1],       [  68. ,   53. ,   -5. ,    0.9],       [  89. ,   54. ,   -1. ,    0.8],       [  96. ,   58. ,    3. ,    1.3],       [  -5. ,   62. ,   -2. ,    0.8],       [  10. ,   64. ,   -1. ,    1.1],       [  30. ,   61. ,    1. ,    1. ],       [  42. ,   61. ,   -3. ,    0.6],       [  59. ,   62. ,    3. ,    0.7],       [  72. ,   69. ,    2. ,    0.9],       [  88. ,   68. ,   -3. ,    1. ],       [  99. ,   64. ,    4. ,    0.5],       [   3. ,   78. ,    2. ,    0.9],       [  18. ,   77. ,    2. ,    1. ],       [  29. ,   80. ,    0. ,    1.2],       [  43. ,   80. ,   -4. ,    0.5],       [  54. ,   77. ,   -3. ,    1.3],       [  70. ,   76. ,    1. ,    1. ],       [  88. ,   77. ,   -5. ,    1.2],       [ 104. ,   74. ,    0. ,    1.2],       [  -3. ,   88. ,    0. ,    1.4],       [   9. ,   86. ,   -1. ,    0.5],       [  23. ,   91. ,   -4. ,    0.6],       [  45. ,   84. ,    3. ,    0.6],       [  61. ,   90. ,    3. ,    1.2],       [  69. ,   85. ,    3. ,    1.3],       [  85. ,   85. ,   -2. ,    0.9],       [ 100. ,   88. ,    4. ,    0.9],       [   1. ,  104. ,   -5. ,    0.7],       [   9. ,  103. ,    0. ,    1. ],       [  31. ,   98. ,    3. ,    0.8],       [  38. ,   97. ,    4. ,    0.6],       [  60. ,   99. ,    0. ,    0.5],       [  74. ,   97. ,    0. ,    1. ],       [  81. ,  101. ,    4. ,    1.4],       [  95. ,   97. ,   -5. ,    0.8],       [  -3. ,    3. ,   10. ,    0.7],       [  16. ,   -2. ,   16. ,    0.5],       [  32. ,   -2. ,   10. ,    0.9],       [  39. ,   -5. ,   15. ,    0.9],       [  54. ,    4. ,   13. ,    1. ],       [  66. ,    1. ,   12. ,    0.5],       [  81. ,    4. ,   10. ,    1.4],       [  97. ,    1. ,    9. ,    0.6],       [   4. ,   13. ,   11. ,    0.8],       [  18. ,   15. ,   12. ,    0.6],       [  28. ,   10. ,   10. ,    1. ],       [  46. ,    9. ,   16. ,    0.6],       [  56. ,   10. ,   17. ,    1.4],       [  67. ,   11. ,    9. ,    0.7],       [  84. ,    7. ,   12. ,    1.2],       [  97. ,   10. ,   13. ,    1.4],       [   1. ,   23. ,   15. ,    1.2],       [  15. ,   23. ,   16. ,    0.6],       [  30. ,   22. ,   10. ,    0.5],       [  38. ,   22. ,   17. ,    1. ],       [  57. ,   19. ,    9. ,    0.8],       [  73. ,   21. ,   16. ,    1.5],       [  85. ,   20. ,   11. ,    0.5],       [  95. ,   20. ,   12. ,    1.4],       [  -3. ,   35. ,   10. ,    1.5],       [  15. ,   34. ,   14. ,    0.8],       [  29. ,   33. ,   15. ,    1.1],       [  45. ,   36. ,   12. ,    0.5],       [  56. ,   30. ,   14. ,    1. ],       [  69. ,   31. ,   11. ,    1.2],       [  81. ,   35. ,   11. ,    1.2],       [ 104. ,   31. ,    8. ,    0.6],       [  -2. ,   44. ,   12. ,    1.2],       [  12. ,   42. ,   16. ,    0.6],       [  28. ,   45. ,   16. ,    0.7],       [  41. ,   44. ,    8. ,    1.1],       [  57. ,   40. ,    8. ,    0.6],       [  68. ,   43. ,   17. ,    0.6],       [  83. ,   48. ,   15. ,    1.2],       [  99. ,   40. ,   13. ,    1.2],       [  -4. ,   54. ,   12. ,    1.1],       [  15. ,   53. ,   13. ,    0.9],       [  30. ,   56. ,   10. ,    0.8],       [  40. ,   56. ,   15. ,    1.3],       [  53. ,   54. ,   13. ,    0.7],       [  76. ,   58. ,   11. ,    1. ],       [  81. ,   58. ,   12. ,    1.3],       [ 100. ,   54. ,   14. ,    0.9],       [  -3. ,   65. ,   16. ,    0.9],       [  16. ,   66. ,   14. ,    1.3],       [  28. ,   64. ,   17. ,    0.8],       [  40. ,   62. ,   15. ,    1.3],       [  60. ,   63. ,   15. ,    1.2],       [  73. ,   62. ,    9. ,    1.4],       [  83. ,   65. ,    9. ,    1.3],       [ 103. ,   62. ,    7. ,    1.3],       [  -3. ,   78. ,   14. ,    1.1],       [  11. ,   76. ,    9. ,    1.2],       [  29. ,   73. ,   11. ,    1. ],       [  47. ,   80. ,   12. ,    1.4],       [  55. ,   73. ,   14. ,    1.1],       [  73. ,   74. ,   13. ,    1. ],       [  88. ,   81. ,   14. ,    1.4],       [  97. ,   74. ,    9. ,    0.8],       [  -5. ,   88. ,   10. ,    1. ],       [   9. ,   87. ,   11. ,    1.1],       [  27. ,   89. ,    9. ,    0.5],       [  47. ,   87. ,   13. ,    0.9],       [  55. ,   91. ,    7. ,    1.3],       [  74. ,   90. ,   10. ,    1.3],       [  81. ,   84. ,   13. ,    1.3],       [ 103. ,   90. ,   11. ,    1. ],       [  -4. ,   96. ,   15. ,    1. ],       [   9. ,   95. ,   10. ,    1.2],       [  28. ,   96. ,   12. ,    0.9],       [  46. ,  102. ,   11. ,    0.8],       [  56. ,   98. ,   14. ,    1.3],       [  75. ,   95. ,   15. ,    1.1],       [  81. ,   96. ,    8. ,    1. ],       [  99. ,   97. ,   15. ,    1.2],       [   3. ,   -5. ,   23. ,    0.8],       [  13. ,   -1. ,   29. ,    0.7],       [  32. ,   -2. ,   29. ,    1.2],       [  39. ,    4. ,   24. ,    1. ],       [  59. ,   -2. ,   21. ,    1.1],       [  73. ,    4. ,   25. ,    1.1],       [  89. ,    1. ,   27. ,    1.1],       [  99. ,   -3. ,   23. ,    1. ],       [   2. ,    9. ,   23. ,    1.4],       [  11. ,   16. ,   27. ,    0.9],       [  30. ,   14. ,   22. ,    0.8],       [  41. ,   14. ,   21. ,    1.2],       [  53. ,   11. ,   24. ,    1.5],       [  69. ,   14. ,   21. ,    0.7],       [  86. ,   14. ,   23. ,    1.5],       [ 103. ,    9. ,   20. ,    0.6],       [   1. ,   18. ,   23. ,    1. ],       [  17. ,   17. ,   22. ,    1.3],       [  30. ,   25. ,   21. ,    1. ],       [  40. ,   19. ,   23. ,    0.8],       [  61. ,   24. ,   27. ,    0.8],       [  74. ,   27. ,   27. ,    0.7],       [  85. ,   21. ,   28. ,    0.8],       [  97. ,   23. ,   28. ,    1.2],       [  -2. ,   33. ,   24. ,    0.7],       [  12. ,   31. ,   26. ,    0.7],       [  24. ,   36. ,   26. ,    0.9],       [  43. ,   36. ,   26. ,    1. ],       [  54. ,   36. ,   27. ,    0.8],       [  68. ,   29. ,   27. ,    1.3],       [  86. ,   29. ,   24. ,    0.6],       [  95. ,   34. ,   28. ,    0.6],       [   2. ,   47. ,   22. ,    1.4],       [  15. ,   41. ,   20. ,    0.8],       [  30. ,   45. ,   21. ,    0.6],       [  40. ,   49. ,   26. ,    1. ],       [  56. ,   39. ,   26. ,    0.9],       [  73. ,   39. ,   27. ,    0.6],       [  90. ,   43. ,   26. ,    1. ],       [  98. ,   41. ,   24. ,    1.5],       [   4. ,   58. ,   26. ,    1.3],       [  14. ,   52. ,   24. ,    1.4],       [  25. ,   55. ,   21. ,    1.1],       [  46. ,   59. ,   24. ,    0.8],       [  53. ,   59. ,   20. ,    0.9],       [  67. ,   53. ,   20. ,    0.9],       [  86. ,   55. ,   29. ,    0.7],       [ 101. ,   55. ,   21. ,    1.5],       [   3. ,   68. ,   22. ,    1.3],       [  14. ,   70. ,   27. ,    1.3],       [  31. ,   65. ,   29. ,    1.1],       [  39. ,   62. ,   25. ,    1.3],       [  59. ,   71. ,   28. ,    0.6],       [  75. ,   66. ,   23. ,    1.4],       [  81. ,   65. ,   29. ,    0.7],       [  99. ,   65. ,   26. ,    0.8],       [   1. ,   76. ,   26. ,    0.8],       [  13. ,   74. ,   24. ,    1.3],       [  32. ,   77. ,   22. ,    1.1],       [  43. ,   82. ,   21. ,    0.9],       [  54. ,   80. ,   29. ,    0.8],       [  75. ,   82. ,   23. ,    1.4],       [  84. ,   79. ,   23. ,    0.6],       [  99. ,   73. ,   27. ,    1. ],       [  -4. ,   88. ,   20. ,    1. ],       [  17. ,   92. ,   27. ,    0.9],       [  24. ,   91. ,   28. ,    1.4],       [  38. ,   89. ,   27. ,    0.5],       [  52. ,   92. ,   22. ,    1.4],       [  74. ,   89. ,   28. ,    0.6],       [  83. ,   92. ,   29. ,    0.9],       [  95. ,   92. ,   27. ,    1.5],       [   2. ,   98. ,   28. ,    1.1],       [  15. ,   97. ,   27. ,    0.7],       [  29. ,  101. ,   20. ,    1.4],       [  47. ,   97. ,   25. ,    1.3],       [  53. ,  100. ,   25. ,    1.4],       [  71. ,  102. ,   21. ,    1. ],       [  82. ,  100. ,   21. ,    1.3],       [  97. ,  103. ,   24. ,    0.8],       [   1. ,   -4. ,   38. ,    1.4],       [  12. ,    2. ,   40. ,    1.4],       [  32. ,    3. ,   39. ,    1. ],       [  39. ,    4. ,   34. ,    0.5],       [  56. ,    2. ,   36. ,    0.6],       [  67. ,   -2. ,   33. ,    0.5],       [  82. ,    1. ,   41. ,    1.3],       [ 101. ,    1. ,   36. ,    0.9],       [  -2. ,   16. ,   35. ,    0.9],       [  17. ,   13. ,   38. ,    1.3],       [  25. ,   14. ,   37. ,    0.9],       [  41. ,    9. ,   35. ,    1.1],       [  57. ,   14. ,   35. ,    1.2],       [  71. ,   14. ,   35. ,    0.9],       [  83. ,   13. ,   36. ,    1.2],       [  97. ,    8. ,   41. ,    1. ],       [  -5. ,   24. ,   41. ,    0.7],       [  18. ,   21. ,   33. ,    0.8],       [  23. ,   22. ,   34. ,    0.9],       [  41. ,   24. ,   38. ,    1.1],       [  52. ,   21. ,   35. ,    0.7],       [  67. ,   23. ,   40. ,    1.2],       [  84. ,   18. ,   37. ,    0.7],       [ 103. ,   20. ,   38. ,    0.9],       [  -2. ,   33. ,   34. ,    1.4],       [  13. ,   37. ,   32. ,    0.7],       [  30. ,   33. ,   42. ,    0.7],       [  44. ,   31. ,   35. ,    1. ],       [  60. ,   36. ,   33. ,    1.3],       [  69. ,   30. ,   35. ,    1. ],       [  80. ,   36. ,   42. ,    0.5],       [ 104. ,   30. ,   41. ,    1.3],       [   2. ,   39. ,   36. ,    1.2],       [  11. ,   47. ,   38. ,    1.2],       [  27. ,   42. ,   35. ,    0.6],       [  43. ,   41. ,   40. ,    1.1],       [  54. ,   48. ,   40. ,    1.1],       [  76. ,   43. ,   39. ,    1.3],       [  83. ,   46. ,   35. ,    1.2],       [ 104. ,   43. ,   33. ,    1.1],       [  -3. ,   59. ,   39. ,    0.8],       [  18. ,   58. ,   35. ,    1. ],       [  32. ,   52. ,   42. ,    0.7],       [  41. ,   59. ,   34. ,    0.6],       [  55. ,   59. ,   40. ,    1.1],       [  68. ,   57. ,   32. ,    0.7],       [  81. ,   59. ,   39. ,    1.4],       [ 104. ,   56. ,   34. ,    0.9],       [   4. ,   67. ,   35. ,    1.3],       [  10. ,   69. ,   35. ,    0.8],       [  30. ,   67. ,   37. ,    1. ],       [  37. ,   65. ,   38. ,    0.7],       [  53. ,   64. ,   33. ,    0.8],       [  72. ,   69. ,   38. ,    1.1],       [  89. ,   70. ,   33. ,    0.8],       [  97. ,   68. ,   40. ,    0.7],       [   4. ,   75. ,   37. ,    1.2],       [  17. ,   72. ,   35. ,    1. ],       [  27. ,   74. ,   42. ,    0.5],       [  37. ,   73. ,   39. ,    0.8],       [  57. ,   80. ,   37. ,    1. ],       [  69. ,   81. ,   37. ,    1.4],       [  83. ,   78. ,   37. ,    1.1],       [ 100. ,   81. ,   35. ,    1. ],       [  -2. ,   91. ,   39. ,    1.2],       [  13. ,   87. ,   36. ,    0.8],       [  24. ,   87. ,   41. ,    0.6],       [  41. ,   87. ,   34. ,    1.1],       [  57. ,   89. ,   40. ,    0.7],       [  68. ,   88. ,   37. ,    1.3],       [  89. ,   85. ,   32. ,    0.9],       [ 102. ,   85. ,   38. ,    0.6],       [  -5. ,  101. ,   40. ,    1. ],       [  10. ,  104. ,   37. ,    1.4],       [  25. ,  100. ,   40. ,    1. ],       [  43. ,  100. ,   34. ,    0.8],       [  55. ,  102. ,   37. ,    1.1],       [  73. ,   99. ,   34. ,    0.6],       [  89. ,   96. ,   33. ,    0.6],       [ 100. ,  103. ,   34. ,    0.7],       [  -2. ,   -3. ,   49. ,    1.3],       [  14. ,   -1. ,   48. ,    0.8],       [  30. ,   -1. ,   51. ,    1.4],       [  46. ,   -5. ,   46. ,    0.6],       [  61. ,   -5. ,   54. ,    1.4],       [  66. ,   -2. ,   53. ,    0.9],       [  89. ,   -5. ,   48. ,    0.8],       [  95. ,    3. ,   46. ,    0.7],       [  -2. ,   10. ,   54. ,    1. ],       [  19. ,    9. ,   51. ,    1.3],       [  25. ,   15. ,   54. ,    0.7],       [  44. ,   16. ,   48. ,    1. ],       [  58. ,    7. ,   52. ,    1.1],       [  67. ,    7. ,   46. ,    1.2],       [  81. ,    6. ,   48. ,    0.6],       [ 104. ,   11. ,   49. ,    1.5],       [   1. ,   22. ,   47. ,    1. ],       [  18. ,   20. ,   47. ,    0.8],       [  28. ,   24. ,   48. ,    1.4],       [  41. ,   27. ,   47. ,    0.7],       [  54. ,   23. ,   52. ,    0.9],       [  66. ,   19. ,   50. ,    0.7],       [  83. ,   19. ,   51. ,    1. ],       [  98. ,   21. ,   53. ,    1. ],       [   2. ,   29. ,   50. ,    1.1],       [  15. ,   34. ,   50. ,    1.2],       [  32. ,   34. ,   54. ,    1.3],       [  44. ,   33. ,   47. ,    0.7],       [  55. ,   33. ,   48. ,    0.6],       [  67. ,   28. ,   46. ,    1.3],       [  85. ,   34. ,   45. ,    1. ],       [  95. ,   34. ,   48. ,    1.4],       [  -4. ,   41. ,   50. ,    1.1],       [  16. ,   41. ,   51. ,    0.8],       [  33. ,   45. ,   47. ,    1.1],       [  38. ,   43. ,   50. ,    1.2],       [  52. ,   45. ,   52. ,    1.2],       [  72. ,   42. ,   52. ,    0.7],       [  86. ,   47. ,   54. ,    1.3],       [ 104. ,   42. ,   54. ,    1.4],       [  -3. ,   57. ,   54. ,    1.5],       [   9. ,   52. ,   45. ,    1.1],       [  33. ,   51. ,   48. ,    0.6],       [  43. ,   51. ,   54. ,    1.1],       [  61. ,   60. ,   46. ,    1.3],       [  73. ,   51. ,   46. ,    1.2],       [  82. ,   56. ,   47. ,    1.2],       [ 101. ,   53. ,   45. ,    1.4],       [   4. ,   63. ,   50. ,    1.3],       [  17. ,   66. ,   48. ,    0.9],       [  28. ,   68. ,   48. ,    0.8],       [  42. ,   68. ,   49. ,    1.2],       [  60. ,   64. ,   46. ,    0.9],       [  74. ,   61. ,   47. ,    1. ],       [  87. ,   70. ,   53. ,    0.5],       [  97. ,   71. ,   48. ,    1.2],       [   2. ,   76. ,   49. ,    0.5],       [  19. ,   74. ,   48. ,    1.5],       [  29. ,   74. ,   47. ,    1. ],       [  46. ,   78. ,   48. ,    1.5],       [  60. ,   79. ,   49. ,    1.4],       [  75. ,   77. ,   53. ,    0.5],       [  87. ,   76. ,   54. ,    0.9],       [ 102. ,   75. ,   45. ,    1.5],       [   1. ,   92. ,   45. ,    0.8],       [  10. ,   85. ,   48. ,    0.8],       [  30. ,   83. ,   47. ,    1. ],       [  42. ,   84. ,   50. ,    0.7],       [  60. ,   86. ,   47. ,    1.2],       [  72. ,   86. ,   50. ,    0.6],       [  89. ,   86. ,   53. ,    1.5],       [ 100. ,   86. ,   45. ,    0.6],       [   2. ,   96. ,   51. ,    0.7],       [  16. ,  103. ,   45. ,    1.4],       [  30. ,  100. ,   51. ,    0.7],       [  40. ,  100. ,   48. ,    1. ],       [  56. ,   95. ,   48. ,    0.9],       [  68. ,   98. ,   51. ,    0.6],       [  85. ,  104. ,   54. ,    1.3],       [  99. ,   99. ,   47. ,    1.1],       [   0. ,   -2. ,   59. ,    1.3],       [  13. ,    2. ,   60. ,    0.6],       [  30. ,   -3. ,   63. ,    1.2],       [  42. ,    4. ,   65. ,    0.8],       [  57. ,    2. ,   60. ,    1.2],       [  68. ,   -3. ,   62. ,    0.6],       [  81. ,    0. ,   60. ,    1.3],       [  95. ,   -1. ,   67. ,    0.6],       [   4. ,    7. ,   65. ,    1. ],       [  11. ,   14. ,   65. ,    1.1],       [  24. ,   12. ,   63. ,    0.8],       [  46. ,    8. ,   61. ,    1.3],       [  52. ,    8. ,   60. ,    1.4],       [  69. ,   10. ,   59. ,    0.7],       [  86. ,   11. ,   64. ,    0.6],       [ 104. ,   13. ,   59. ,    0.6],       [  -2. ,   25. ,   64. ,    0.9],       [  13. ,   18. ,   63. ,    1.1],       [  29. ,   25. ,   62. ,    1.2],       [  43. ,   20. ,   65. ,    1.4],       [  55. ,   22. ,   66. ,    1.2],       [  71. ,   25. ,   58. ,    0.8],       [  82. ,   20. ,   63. ,    0.7],       [ 103. ,   25. ,   62. ,    0.8],       [   2. ,   33. ,   67. ,    0.6],       [  18. ,   28. ,   58. ,    1.3],       [  30. ,   30. ,   63. ,    1. ],       [  38. ,   34. ,   67. ,    0.9],       [  59. ,   30. ,   58. ,    0.7],       [  68. ,   37. ,   63. ,    1.1],       [  81. ,   33. ,   61. ,    1.2],       [  98. ,   35. ,   57. ,    0.9],       [   0. ,   41. ,   62. ,    0.7],       [  11. ,   41. ,   59. ,    1.1],       [  25. ,   40. ,   63. ,    0.6],       [  44. ,   43. ,   66. ,    0.7],       [  53. ,   48. ,   57. ,    1.5],       [  68. ,   49. ,   65. ,    0.7],       [  89. ,   44. ,   64. ,    1.5],       [ 102. ,   49. ,   58. ,    1.1],       [  -2. ,   53. ,   61. ,    1.1],       [  11. ,   58. ,   58. ,    0.9],       [  31. ,   58. ,   62. ,    1.4],       [  47. ,   54. ,   66. ,    1.5],       [  54. ,   53. ,   59. ,    1.5],       [  68. ,   59. ,   66. ,    0.7],       [  90. ,   58. ,   63. ,    0.9],       [ 101. ,   57. ,   63. ,    1. ],       [   3. ,   62. ,   60. ,    0.8],       [   9. ,   67. ,   66. ,    1. ],       [  33. ,   63. ,   65. ,    1.2],       [  39. ,   64. ,   59. ,    1. ],       [  57. ,   70. ,   63. ,    1.2],       [  66. ,   66. ,   60. ,    0.9],       [  84. ,   69. ,   61. ,    1.4],       [  97. ,   66. ,   62. ,    0.5],       [  -3. ,   73. ,   64. ,    1.4],       [   9. ,   80. ,   65. ,    1.1],       [  32. ,   80. ,   64. ,    1.2],       [  39. ,   77. ,   66. ,    1. ],       [  57. ,   76. ,   63. ,    1. ],       [  71. ,   79. ,   60. ,    0.9],       [  86. ,   80. ,   64. ,    1.1],       [ 104. ,   75. ,   60. ,    0.6],       [  -2. ,   92. ,   61. ,    1.2],       [  12. ,   93. ,   61. ,    1.5],       [  28. ,   90. ,   64. ,    1. ],       [  43. ,   92. ,   59. ,    0.9],       [  60. ,   85. ,   60. ,    0.5],       [  74. ,   85. ,   65. ,    1.1],       [  87. ,   86. ,   59. ,    1.2],       [  96. ,   90. ,   63. ,    1.2],       [   2. ,   96. ,   62. ,    0.7],       [  14. ,   96. ,   59. ,    0.7],       [  26. ,   98. ,   58. ,    1.1],       [  45. ,  104. ,   60. ,    0.8],       [  57. ,  101. ,   67. ,    1.5],       [  68. ,  104. ,   64. ,    0.6],       [  83. ,   98. ,   58. ,    1.5],       [  96. ,   95. ,   61. ,    1.5],       [  -5. ,   -1. ,   74. ,    1.3],       [  14. ,   -4. ,   70. ,    0.6],       [  27. ,    0. ,   71. ,    1.5],       [  43. ,    3. ,   77. ,    0.6],       [  52. ,    0. ,   73. ,    0.9],       [  73. ,    2. ,   73. ,    1. ],       [  87. ,   -3. ,   76. ,    0.8],       [  98. ,   -5. ,   74. ,    1.4],       [   3. ,   13. ,   78. ,    1.4],       [  14. ,   13. ,   70. ,    1.4],       [  28. ,   14. ,   79. ,    1.2],       [  43. ,   11. ,   76. ,    1. ],       [  54. ,   12. ,   78. ,    1.2],       [  72. ,   12. ,   79. ,    1.1],       [  82. ,    6. ,   78. ,    0.5],       [  99. ,   11. ,   73. ,    1.3],       [   0. ,   26. ,   75. ,    0.6],       [  10. ,   18. ,   76. ,    1.5],       [  32. ,   27. ,   74. ,    0.9],       [  40. ,   23. ,   73. ,    1.2],       [  59. ,   19. ,   78. ,    0.7],       [  72. ,   22. ,   71. ,    0.9],       [  87. ,   21. ,   72. ,    0.9],       [  96. ,   20. ,   70. ,    1.2],       [  -3. ,   37. ,   77. ,    1.4],       [  14. ,   35. ,   71. ,    0.6],       [  31. ,   31. ,   73. ,    0.6],       [  46. ,   36. ,   73. ,    0.6],       [  54. ,   35. ,   70. ,    1.4],       [  67. ,   33. ,   74. ,    0.9],       [  83. ,   37. ,   78. ,    1.3],       [ 102. ,   29. ,   78. ,    0.6],       [   3. ,   48. ,   79. ,    1.1],       [   9. ,   43. ,   73. ,    0.8],       [  31. ,   44. ,   72. ,    0.9],       [  47. ,   45. ,   78. ,    1.5],       [  61. ,   43. ,   76. ,    1.1],       [  73. ,   45. ,   72. ,    0.6],       [  82. ,   45. ,   76. ,    0.8],       [ 101. ,   48. ,   77. ,    1.2],       [  -5. ,   59. ,   74. ,    1.1],       [  13. ,   52. ,   79. ,    0.7],       [  31. ,   55. ,   70. ,    0.6],       [  46. ,   58. ,   77. ,    0.5],       [  61. ,   54. ,   76. ,    0.6],       [  71. ,   57. ,   79. ,    0.8],       [  89. ,   52. ,   70. ,    1.2],       [ 102. ,   60. ,   75. ,    1.4],       [   1. ,   64. ,   72. ,    0.9],       [  14. ,   68. ,   75. ,    1.3],       [  31. ,   64. ,   71. ,    1.5],       [  45. ,   61. ,   75. ,    0.6],       [  53. ,   66. ,   72. ,    0.6],       [  67. ,   64. ,   73. ,    0.9],       [  85. ,   67. ,   71. ,    1.1],       [ 103. ,   62. ,   73. ,    0.6],       [   3. ,   82. ,   77. ,    1.1],       [  17. ,   74. ,   70. ,    1.2],       [  29. ,   79. ,   76. ,    0.6],       [  43. ,   82. ,   71. ,    0.9],       [  53. ,   74. ,   71. ,    1.4],       [  70. ,   75. ,   72. ,    1.4],       [  87. ,   82. ,   79. ,    1.5],       [  99. ,   81. ,   74. ,    1.4],       [  -3. ,   91. ,   74. ,    1.3],       [  15. ,   84. ,   74. ,    1.2],       [  25. ,   86. ,   78. ,    1.5],       [  44. ,   87. ,   78. ,    1.4],       [  59. ,   90. ,   76. ,    0.6],       [  67. ,   91. ,   77. ,    0.7],       [  86. ,   84. ,   79. ,    0.6],       [  96. ,   89. ,   75. ,    0.6],       [  -1. ,   95. ,   73. ,    0.9],       [  18. ,   99. ,   70. ,    1. ],       [  27. ,  103. ,   77. ,    0.9],       [  42. ,  100. ,   75. ,    0.6],       [  54. ,   97. ,   74. ,    0.7],       [  72. ,   95. ,   78. ,    0.9],       [  88. ,   98. ,   78. ,    0.7],       [ 101. ,  100. ,   76. ,    0.9],       [  -5. ,   -4. ,   84. ,    0.7],       [  11. ,    0. ,   87. ,    0.5],       [  33. ,    3. ,   87. ,    1.3],       [  45. ,    2. ,   91. ,    1.5],       [  54. ,   -2. ,   91. ,    0.8],       [  75. ,   -5. ,   87. ,    1.3],       [  89. ,    3. ,   83. ,    0.7],       [ 102. ,    3. ,   89. ,    1. ],       [  -4. ,    9. ,   91. ,    1.2],       [  16. ,   10. ,   84. ,    0.9],       [  27. ,    7. ,   87. ,    1.2],       [  39. ,   10. ,   82. ,    1.1],       [  61. ,   10. ,   88. ,    1.1],       [  73. ,    8. ,   87. ,    0.7],       [  83. ,    7. ,   91. ,    0.9],       [ 104. ,    8. ,   89. ,    1.2],       [   2. ,   18. ,   84. ,    1.1],       [   9. ,   24. ,   88. ,    1.5],       [  30. ,   21. ,   84. ,    1.2],       [  42. ,   22. ,   84. ,    1.3],       [  61. ,   19. ,   92. ,    0.6],       [  67. ,   25. ,   88. ,    0.5],       [  83. ,   17. ,   88. ,    1.1],       [ 103. ,   17. ,   86. ,    0.8],       [  -1. ,   37. ,   84. ,    1.3],       [  17. ,   33. ,   87. ,    0.8],       [  26. ,   32. ,   91. ,    1.4],       [  40. ,   36. ,   85. ,    1.5],       [  52. ,   36. ,   88. ,    0.9],       [  66. ,   35. ,   85. ,    0.9],       [  82. ,   36. ,   88. ,    1.5],       [  97. ,   36. ,   82. ,    0.9],       [  -1. ,   48. ,   90. ,    0.7],       [  15. ,   39. ,   86. ,    0.6],       [  29. ,   45. ,   85. ,    1. ],       [  46. ,   44. ,   88. ,    0.9],       [  53. ,   39. ,   85. ,    1.2],       [  68. ,   42. ,   84. ,    1.1],       [  87. ,   48. ,   90. ,    1.2],       [  98. ,   46. ,   89. ,    0.9],       [  -5. ,   60. ,   87. ,    1.1],       [  11. ,   50. ,   90. ,    0.6],       [  27. ,   52. ,   91. ,    1.3],       [  43. ,   52. ,   90. ,    0.7],       [  54. ,   52. ,   90. ,    1.3],       [  66. ,   56. ,   85. ,    0.6],       [  85. ,   51. ,   89. ,    0.8],       [ 100. ,   60. ,   86. ,    1. ],       [  -3. ,   68. ,   85. ,    1.2],       [  12. ,   68. ,   91. ,    0.9],       [  33. ,   66. ,   88. ,    1. ],       [  46. ,   68. ,   91. ,    1.4],       [  54. ,   66. ,   84. ,    0.7],       [  67. ,   69. ,   83. ,    1.1],       [  90. ,   71. ,   87. ,    0.6],       [  95. ,   62. ,   91. ,    1.3],       [   2. ,   82. ,   90. ,    1.4],       [   9. ,   78. ,   84. ,    1.3],       [  23. ,   75. ,   83. ,    0.7],       [  44. ,   74. ,   85. ,    0.5],       [  55. ,   76. ,   88. ,    0.6],       [  68. ,   77. ,   90. ,    0.9],       [  86. ,   75. ,   85. ,    1.1],       [  99. ,   82. ,   85. ,    0.5],       [  -4. ,   89. ,   84. ,    1.1],       [  10. ,   84. ,   85. ,    1.4],       [  31. ,   87. ,   90. ,    1.3],       [  45. ,   91. ,   92. ,    0.6],       [  52. ,   89. ,   89. ,    0.9],       [  67. ,   87. ,   85. ,    1. ],       [  87. ,   84. ,   85. ,    1.1],       [  95. ,   89. ,   89. ,    0.5],       [   4. ,   99. ,   91. ,    1.5],       [  17. ,   97. ,   84. ,    1.2],       [  24. ,   96. ,   85. ,    0.5],       [  42. ,  104. ,   88. ,    1.4],       [  61. ,  104. ,   88. ,    0.6],       [  68. ,  103. ,   83. ,    1.1],       [  84. ,  104. ,   88. ,    1.2],       [  97. ,   98. ,   86. ,    1. ],       [   4. ,    0. ,   98. ,    0.8],       [  16. ,    3. ,   97. ,    0.7],       [  27. ,    3. ,   95. ,    1.3],       [  46. ,   -4. ,   98. ,    0.7],       [  57. ,    1. ,  104. ,    1.1],       [  75. ,   -5. ,   96. ,    1.1],       [  86. ,   -2. ,  103. ,    1.1],       [  96. ,   -5. ,   95. ,    0.8],       [  -3. ,   10. ,  103. ,    1.3],       [   9. ,   12. ,  102. ,    0.6],       [  27. ,    7. ,   95. ,    0.9],       [  45. ,    6. ,  101. ,    1.1],       [  61. ,   15. ,  103. ,    1.4],       [  67. ,   12. ,  100. ,    1.3],       [  85. ,   15. ,   99. ,    0.8],       [ 102. ,   12. ,  103. ,    1. ],       [   0. ,   22. ,   99. ,    0.7],       [  13. ,   20. ,  102. ,    1. ],       [  28. ,   26. ,  102. ,    1.3],       [  46. ,   24. ,  101. ,    0.6],       [  57. ,   26. ,  104. ,    1.3],       [  69. ,   26. ,   99. ,    1.3],       [  82. ,   20. ,  104. ,    1. ],       [ 102. ,   22. ,   99. ,    1.3],       [  -5. ,   35. ,   97. ,    1.4],       [  18. ,   37. ,   96. ,    1.3],       [  23. ,   34. ,   95. ,    1.1],       [  39. ,   36. ,   98. ,    0.7],       [  55. ,   30. ,  104. ,    1.1],       [  70. ,   33. ,  104. ,    1.3],       [  89. ,   35. ,   96. ,    0.9],       [  95. ,   29. ,  102. ,    0.7],       [   1. ,   40. ,  103. ,    0.9],       [  19. ,   41. ,   96. ,    0.5],       [  31. ,   46. ,   97. ,    0.6],       [  38. ,   40. ,   97. ,    1.4],       [  52. ,   44. ,   97. ,    0.7],       [  72. ,   42. ,   96. ,    1.2],       [  83. ,   47. ,  101. ,    1.2],       [  96. ,   42. ,   95. ,    0.9],       [  -5. ,   54. ,   95. ,    0.6],       [  17. ,   51. ,   95. ,    1.3],       [  30. ,   58. ,   98. ,    0.6],       [  47. ,   56. ,  100. ,    0.7],       [  59. ,   59. ,   96. ,    0.8],       [  75. ,   50. ,   96. ,    0.8],       [  87. ,   56. ,  102. ,    1. ],       [ 103. ,   52. ,   99. ,    0.8],       [   3. ,   70. ,  101. ,    0.9],       [   9. ,   64. ,  104. ,    0.6],       [  24. ,   65. ,   99. ,    0.9],       [  40. ,   69. ,  104. ,    0.9],       [  62. ,   66. ,   96. ,    0.7],       [  74. ,   68. ,   95. ,    1.3],       [  86. ,   71. ,   96. ,    1.1],       [  98. ,   70. ,  100. ,    0.8],       [   3. ,   72. ,   99. ,    1.1],       [  15. ,   75. ,   96. ,    1.4],       [  25. ,   74. ,   95. ,    1.3],       [  41. ,   76. ,  100. ,    1.1],       [  60. ,   76. ,  104. ,    1.2],       [  66. ,   77. ,   95. ,    0.8],       [  86. ,   82. ,  102. ,    0.8],       [  95. ,   79. ,  100. ,    1.3],       [   3. ,   87. ,  100. ,    0.8],       [  14. ,   88. ,  101. ,    0.8],       [  24. ,   89. ,  102. ,    0.5],       [  46. ,   87. ,   97. ,    0.6],       [  54. ,   88. ,  102. ,    0.9],       [  67. ,   87. ,   98. ,    0.7],       [  82. ,   84. ,   96. ,    0.8],       [  97. ,   90. ,  100. ,    1.1],       [   3. ,   98. ,  101. ,    1.1],       [  16. ,   99. ,   98. ,    0.6],       [  24. ,  102. ,   99. ,    1.3],       [  40. ,  104. ,   99. ,    0.9],       [  61. ,  101. ,  104. ,    0.9],       [  68. ,  101. ,   96. ,    0.8],       [  81. ,  104. ,   97. ,    1.1],       [ 101. ,   96. ,  103. ,    0.6]])
        basis0 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.7,  1.6,  3.3,  4. ,  4. ,  4. ,  4. ,  4. ]))
        basis1 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.3,  2.2,  2.7,  4. ,  4. ,  4. ,  4. ,  4. ,
        4. ,  4. ]))
        basis2 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1.1,  2.4,  3.2,  3.8,  5. ,  5. ,  5. ,  5. ,  5. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,True)
        vol2 = vol.clone()
        vol2.insert_knot(0, [1.362]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 14)
        vol2.insert_knot(0, [0.961]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 16)
        vol2.insert_knot(0, [3.063]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 19)
        vol2.insert_knot(0, [1.223]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 23)
        vol2.insert_knot(1, [2.341]*1) # insert C5-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 18)
        vol2.insert_knot(1, [2.685]*2) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 20)
        vol2.insert_knot(1, [1.612]*3) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 23)
        vol2.insert_knot(1, [2.033]*4) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 27)
        vol2.insert_knot(1, [2.287]*5) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 32)
        vol2.insert_knot(1, [2.299]*6) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 38)
        vol2.insert_knot(2, [2.567]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 15)
        vol2.insert_knot(2, [2.594]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 17)
        vol2.insert_knot(2, [2.800]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 20)
        vol2.insert_knot(2, [1.670]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 24)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p5_rational_C0_periodic(self):
        controlpoints = np.array([[  99. ,   -3. ,    1. ,    0.5],
       [  78. ,   62. ,   -2. ,    0.6],
       [  28. ,   95. ,   -3. ,    1. ],
       [ -28. ,   91. ,   -3. ,    1.4],
       [ -78. ,   63. ,   -5. ,    0.7],
       [-104. ,   -2. ,    1. ,    1.3],
       [ -85. ,  -56. ,    2. ,    1.3],
       [ -28. , -100. ,   -2. ,    0.9],
       [  33. ,  -96. ,    4. ,    1.1],
       [  81. ,  -61. ,   -3. ,    0.9]])
        basis0 = BSplineBasis(5, np.array([-0.6,  0. ,  0. ,  0. ,  0. ,  0.8,  1.9,  2.9,  4.2,  5.3,  6.4,  7. ,  7. ,  7. ,  7. ,
        7.8]),0)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([5.858]*1) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 17)
        crv2.insert_knot([1.411]*2) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 19)
        crv2.insert_knot([1.582]*3) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 22)
        crv2.insert_knot([4.373]*4) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p66_rational_C0_periodic(self):
        controlpoints = np.array([[  62. ,   -4. ,   -3. ,    0.7],       [  54. ,   30. ,   -1. ,    1.4],       [  28. ,   52. ,   -1. ,    1.3],       [  -1. ,   60. ,   -3. ,    0.8],       [ -32. ,   50. ,   -4. ,    1.2],       [ -56. ,   34. ,   -5. ,    0.7],       [ -63. ,   -1. ,    4. ,    0.7],       [ -52. ,  -29. ,   -2. ,    1.5],       [ -35. ,  -50. ,    4. ,    0.9],       [   1. ,  -65. ,   -2. ,    0.7],       [  32. ,  -57. ,    3. ,    1.1],       [  48. ,  -33. ,    3. ,    0.8],       [  65. ,    1. ,    3. ,    1.2],       [  57. ,   29. ,   -5. ,    0.9],       [  32. ,   56. ,   -5. ,    1.1],       [  -2. ,   67. ,   -2. ,    1. ],       [ -32. ,   57. ,    1. ,    1.4],       [ -58. ,   32. ,    3. ,    0.9],       [ -66. ,   -4. ,    3. ,    0.6],       [ -56. ,  -37. ,    3. ,    0.7],       [ -32. ,  -55. ,   -4. ,    1. ],       [  -5. ,  -67. ,   -1. ,    0.7],       [  30. ,  -54. ,    2. ,    0.9],       [  54. ,  -28. ,   -5. ,    1.2],       [  71. ,   -4. ,   -3. ,    0.7],       [  57. ,   35. ,   -2. ,    1.2],       [  40. ,   65. ,    2. ,    1.3],       [  -5. ,   68. ,    1. ,    0.6],       [ -37. ,   66. ,    4. ,    1.5],       [ -65. ,   34. ,    0. ,    1.3],       [ -68. ,   -3. ,    3. ,    1.1],       [ -66. ,  -38. ,   -1. ,    1. ],       [ -36. ,  -63. ,   -3. ,    0.9],       [   4. ,  -74. ,   -3. ,    0.9],       [  31. ,  -65. ,   -5. ,    0.6],       [  59. ,  -34. ,    2. ,    1. ],       [  78. ,    2. ,    1. ,    1.2],       [  70. ,   35. ,    4. ,    0.6],       [  33. ,   63. ,   -1. ,    0.5],       [  -4. ,   73. ,    1. ,    1.5],       [ -41. ,   68. ,   -2. ,    0.7],       [ -64. ,   42. ,    1. ,    0.6],       [ -73. ,   -4. ,    4. ,    1.4],       [ -72. ,  -38. ,   -3. ,    0.7],       [ -36. ,  -65. ,    4. ,    1.5],       [   3. ,  -73. ,    1. ,    1.3],       [  38. ,  -65. ,    1. ,    1.4],       [  62. ,  -39. ,   -2. ,    0.5],       [  79. ,    2. ,   -2. ,    0.9],       [  67. ,   42. ,    4. ,    1.3],       [  37. ,   67. ,   -4. ,    1.3],       [  -3. ,   82. ,    4. ,    1.5],       [ -45. ,   70. ,   -5. ,    1. ],       [ -68. ,   46. ,   -5. ,    0.6],       [ -80. ,    3. ,    3. ,    1. ],       [ -68. ,  -37. ,    2. ,    0.6],       [ -46. ,  -74. ,   -5. ,    0.9],       [   2. ,  -79. ,    1. ,    0.8],       [  37. ,  -71. ,    0. ,    0.5],       [  71. ,  -45. ,    4. ,    0.8],       [  88. ,   -1. ,   -4. ,    0.7],       [  74. ,   44. ,   -5. ,    1.4],       [  47. ,   75. ,   -5. ,    1.4],       [   4. ,   87. ,   -4. ,    1.4],       [ -42. ,   80. ,   -4. ,    0.6],       [ -79. ,   39. ,    4. ,    0.7],       [ -92. ,    4. ,   -5. ,    1.4],       [ -76. ,  -48. ,   -1. ,    1.2],       [ -42. ,  -74. ,   -5. ,    0.6],       [   3. ,  -92. ,    2. ,    1.3],       [  46. ,  -79. ,   -1. ,    1.3],       [  79. ,  -41. ,    4. ,    1.4],       [  91. ,   -2. ,    4. ,    0.6],       [  84. ,   48. ,    4. ,    0.6],       [  45. ,   82. ,   -3. ,    0.5],       [  -2. ,   97. ,    4. ,    1.3],       [ -46. ,   80. ,    4. ,    1.4],       [ -85. ,   43. ,   -4. ,    1.3],       [ -99. ,   -4. ,    2. ,    0.8],       [ -87. ,  -43. ,   -1. ,    0.8],       [ -45. ,  -84. ,   -3. ,    1. ],       [  -2. ,  -97. ,   -4. ,    0.6],       [  49. ,  -82. ,   -2. ,    0.7],       [  79. ,  -48. ,   -4. ,    1.1],       [  96. ,    0. ,   -5. ,    1.3],       [  83. ,   54. ,   -5. ,    1.4],       [  51. ,   86. ,    1. ,    0.5],       [  -2. ,   99. ,    1. ,    0.5],       [ -54. ,   89. ,   -5. ,    1.2],       [ -89. ,   46. ,   -3. ,    1. ],       [-101. ,    2. ,    2. ,    1.4],       [ -84. ,  -53. ,    0. ,    1.4],       [ -46. ,  -85. ,   -2. ,    0.5],       [   3. , -105. ,   -3. ,    0.5],       [  51. ,  -85. ,    1. ,    1.2],       [  85. ,  -53. ,    2. ,    1.4]])
        basis0 = BSplineBasis(6, np.array([-0.7,  0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  1.7,  3. ,  3.9,  4.6,  5.8,  7.3,  8. ,  8. ,
        8. ,  8. ,  8. ,  8.8]),0)
        basis1 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.7,  1.9,  3. ,  3. ,  3. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [2.805]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 20)
        surf2.insert_knot(0, [5.396]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [6.677]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [6.563]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(0, [0.874]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 34)
        surf2.insert_knot(1, [1.477]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 15)
        surf2.insert_knot(1, [1.532]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 17)
        surf2.insert_knot(1, [1.164]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 20)
        surf2.insert_knot(1, [1.375]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 24)
        surf2.insert_knot(1, [1.092]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 29)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p766_rational_C0_periodic(self):
        controlpoints = np.array([[  54. ,    0. ,    0. ,    1. ],       [  40. ,   22. ,   -3. ,    1.4],       [  27. ,   39. ,   -2. ,    1.4],       [   8. ,   46. ,   -5. ,    1.3],       [  -7. ,   48. ,    0. ,    1.5],       [ -29. ,   39. ,   -1. ,    1.4],       [ -43. ,   21. ,   -2. ,    0.6],       [ -50. ,    3. ,    2. ,    0.7],       [ -44. ,  -18. ,    2. ,    1.5],       [ -34. ,  -38. ,   -4. ,    0.5],       [ -12. ,  -49. ,    2. ,    1.5],       [   9. ,  -45. ,   -1. ,    1. ],       [  32. ,  -40. ,    3. ,    1.2],       [  43. ,  -24. ,    2. ,    0.8],       [  63. ,    2. ,   -5. ,    1.3],       [  49. ,   26. ,   -2. ,    1. ],       [  40. ,   47. ,    1. ,    1.1],       [  16. ,   52. ,   -3. ,    1.2],       [ -12. ,   53. ,    3. ,    1.1],       [ -40. ,   40. ,   -3. ,    1.3],       [ -51. ,   22. ,   -4. ,    1. ],       [ -62. ,    4. ,   -3. ,    0.7],       [ -57. ,  -23. ,   -2. ,    0.9],       [ -36. ,  -44. ,   -4. ,    0.7],       [  -9. ,  -58. ,    4. ,    1.1],       [  10. ,  -53. ,   -4. ,    0.6],       [  35. ,  -50. ,    0. ,    1.2],       [  57. ,  -23. ,    1. ,    0.9],       [  68. ,    0. ,   -2. ,    1.1],       [  55. ,   28. ,    2. ,    0.9],       [  42. ,   47. ,    0. ,    1. ],       [  19. ,   69. ,   -1. ,    1.4],       [ -15. ,   67. ,   -4. ,    1.3],       [ -44. ,   51. ,    2. ,    1. ],       [ -62. ,   29. ,   -3. ,    1.4],       [ -72. ,   -2. ,    1. ,    1.2],       [ -65. ,  -29. ,    4. ,    1. ],       [ -46. ,  -51. ,   -3. ,    0.5],       [ -11. ,  -68. ,   -4. ,    0.8],       [  14. ,  -66. ,    0. ,    0.5],       [  37. ,  -50. ,   -3. ,    0.8],       [  59. ,  -28. ,   -3. ,    0.9],       [  78. ,   -5. ,   -2. ,    0.8],       [  66. ,   31. ,    3. ,    1.4],       [  44. ,   60. ,   -4. ,    1.4],       [  14. ,   68. ,   -1. ,    0.6],       [ -21. ,   71. ,   -1. ,    1.1],       [ -46. ,   54. ,   -2. ,    1.3],       [ -63. ,   28. ,   -5. ,    0.6],       [ -78. ,   -5. ,   -5. ,    1.1],       [ -71. ,  -34. ,    2. ,    1.1],       [ -47. ,  -58. ,   -3. ,    0.9],       [ -21. ,  -70. ,    4. ,    1.1],       [  12. ,  -71. ,    2. ,    0.8],       [  46. ,  -64. ,    4. ,    0.6],       [  69. ,  -38. ,    1. ,    1.3],       [  83. ,   -4. ,   -1. ,    0.5],       [  75. ,   31. ,   -2. ,    1. ],       [  50. ,   61. ,    2. ,    0.6],       [  15. ,   82. ,   -4. ,    1.3],       [ -15. ,   78. ,   -5. ,    1. ],       [ -51. ,   65. ,    0. ,    1.1],       [ -73. ,   32. ,   -3. ,    1.1],       [ -87. ,    3. ,   -5. ,    1. ],       [ -74. ,  -33. ,    4. ,    0.9],       [ -48. ,  -70. ,   -1. ,    1.2],       [ -15. ,  -79. ,    1. ,    1.3],       [  20. ,  -80. ,    3. ,    1.4],       [  48. ,  -64. ,   -5. ,    1. ],       [  77. ,  -41. ,    4. ,    1.3],       [  94. ,    1. ,   -5. ,    1.2],       [  77. ,   38. ,   -5. ,    1.3],       [  53. ,   71. ,    4. ,    0.7],       [  24. ,   87. ,    3. ,    0.7],       [ -20. ,   93. ,    1. ,    0.9],       [ -58. ,   71. ,    1. ,    1.5],       [ -86. ,   36. ,    4. ,    0.9],       [ -91. ,   -2. ,    3. ,    1.1],       [ -82. ,  -39. ,   -3. ,    0.9],       [ -57. ,  -73. ,    2. ,    0.7],       [ -24. ,  -93. ,    2. ,    0.8],       [  17. ,  -94. ,    1. ,    1. ],       [  60. ,  -67. ,    4. ,    1.2],       [  79. ,  -40. ,   -4. ,    1.2],       [  95. ,    4. ,   -1. ,    1.1],       [  91. ,   42. ,   -5. ,    0.8],       [  66. ,   80. ,   -1. ,    0.8],       [  26. ,   93. ,    2. ,    0.6],       [ -25. ,   95. ,    1. ,    0.8],       [ -63. ,   76. ,   -3. ,    0.9],       [ -94. ,   42. ,    0. ,    1.4],       [ -99. ,    3. ,   -5. ,    0.5],       [ -90. ,  -40. ,   -5. ,    0.5],       [ -64. ,  -77. ,    1. ,    0.6],       [ -26. , -102. ,    2. ,    0.7],       [  19. ,  -98. ,    2. ,    0.8],       [  57. ,  -81. ,   -5. ,    0.6],       [  93. ,  -44. ,    4. ,    0.6],       [  45. ,   -4. ,   -1. ,    0.8],       [  44. ,   17. ,    4. ,    1.4],       [  31. ,   39. ,    7. ,    0.5],       [   9. ,   52. ,    5. ,    1. ],       [ -12. ,   49. ,    5. ,    1.3],       [ -35. ,   42. ,   -1. ,    0.9],       [ -41. ,   17. ,    9. ,    0.5],       [ -48. ,   -2. ,    3. ,    1.1],       [ -45. ,  -19. ,    5. ,    1. ],       [ -29. ,  -44. ,    7. ,    1.3],       [  -9. ,  -48. ,    4. ,    0.6],       [   7. ,  -50. ,    0. ,    0.9],       [  31. ,  -35. ,    6. ,    1.1],       [  49. ,  -20. ,    0. ,    1.3],       [  57. ,    4. ,    5. ,    0.9],       [  54. ,   21. ,    2. ,    0.8],       [  36. ,   42. ,    3. ,    1.1],       [  15. ,   59. ,    0. ,    0.8],       [  -9. ,   57. ,    4. ,    1.5],       [ -38. ,   47. ,    7. ,    0.6],       [ -56. ,   28. ,    3. ,    1.5],       [ -63. ,   -2. ,    6. ,    1. ],       [ -54. ,  -21. ,    5. ,    0.7],       [ -41. ,  -48. ,    5. ,    1.3],       [ -11. ,  -61. ,    0. ,    0.7],       [  16. ,  -55. ,    4. ,    1.3],       [  35. ,  -49. ,    5. ,    0.6],       [  47. ,  -30. ,    4. ,    0.7],       [  67. ,    2. ,   -1. ,    1.2],       [  55. ,   28. ,    0. ,    0.5],       [  39. ,   50. ,    6. ,    1.4],       [  15. ,   65. ,   -1. ,    0.7],       [ -19. ,   62. ,    9. ,    1.4],       [ -46. ,   55. ,    6. ,    1.4],       [ -58. ,   29. ,    5. ,    0.5],       [ -66. ,   -1. ,    0. ,    0.8],       [ -60. ,  -34. ,    6. ,    0.8],       [ -42. ,  -53. ,    4. ,    0.8],       [ -20. ,  -64. ,    3. ,    0.6],       [  17. ,  -63. ,    8. ,    0.6],       [  44. ,  -56. ,    6. ,    0.9],       [  62. ,  -29. ,    5. ,    0.8],       [  73. ,    0. ,    7. ,    0.9],       [  67. ,   31. ,    2. ,    0.5],       [  43. ,   60. ,    5. ,    0.6],       [  14. ,   70. ,    7. ,    0.8],       [ -18. ,   75. ,    3. ,    1.3],       [ -47. ,   59. ,    5. ,    1.4],       [ -73. ,   28. ,    9. ,    0.6],       [ -78. ,   -5. ,    1. ,    0.8],       [ -64. ,  -36. ,    7. ,    0.8],       [ -50. ,  -60. ,    7. ,    1.4],       [ -13. ,  -73. ,    0. ,    0.7],       [  19. ,  -75. ,    9. ,    1.3],       [  48. ,  -63. ,    5. ,    1.1],       [  70. ,  -36. ,    2. ,    0.9],       [  79. ,    0. ,    0. ,    0.9],       [  77. ,   34. ,    8. ,    0.8],       [  55. ,   68. ,    0. ,    1.4],       [  17. ,   81. ,    7. ,    1. ],       [ -16. ,   76. ,    3. ,    1.1],       [ -55. ,   69. ,    4. ,    0.7],       [ -77. ,   38. ,   -1. ,    1.4],       [ -84. ,    0. ,    6. ,    0.5],       [ -78. ,  -41. ,    8. ,    1.5],       [ -56. ,  -63. ,    9. ,    1.5],       [ -16. ,  -80. ,    1. ,    1.4],       [  16. ,  -84. ,    0. ,    0.9],       [  54. ,  -62. ,    8. ,    0.8],       [  72. ,  -40. ,    8. ,    0.6],       [  95. ,   -2. ,    6. ,    1.5],       [  85. ,   37. ,    6. ,    0.5],       [  58. ,   73. ,    2. ,    1. ],       [  15. ,   93. ,    8. ,    1.2],       [ -22. ,   85. ,    5. ,    0.7],       [ -61. ,   75. ,    5. ,    0.8],       [ -87. ,   44. ,    2. ,    0.5],       [ -93. ,    4. ,    4. ,    1.4],       [ -81. ,  -42. ,    8. ,    0.5],       [ -58. ,  -68. ,    0. ,    0.5],       [ -16. ,  -86. ,    2. ,    0.8],       [  21. ,  -91. ,    6. ,    0.6],       [  52. ,  -69. ,    4. ,    1.1],       [  82. ,  -45. ,    3. ,    1.5],       [  98. ,   -5. ,    4. ,    1. ],       [  89. ,   38. ,    4. ,    1.3],       [  62. ,   82. ,    1. ,    0.9],       [  21. ,   99. ,    7. ,    0.8],       [ -21. ,   96. ,    2. ,    1. ],       [ -59. ,   81. ,    9. ,    0.9],       [ -91. ,   45. ,    7. ,    0.8],       [-101. ,   -1. ,    3. ,    0.6],       [ -94. ,  -41. ,    1. ,    0.9],       [ -66. ,  -81. ,    4. ,    0.9],       [ -19. , -101. ,    1. ,    1.1],       [  23. , -103. ,    1. ,    0.6],       [  65. ,  -80. ,    5. ,    0.9],       [  91. ,  -41. ,    8. ,    1.1],       [  46. ,   -5. ,    6. ,    1.4],       [  40. ,   23. ,   13. ,    0.9],       [  33. ,   34. ,   11. ,    1.2],       [   9. ,   47. ,    9. ,    0.6],       [  -7. ,   47. ,   11. ,    0.8],       [ -28. ,   42. ,   11. ,    1.4],       [ -42. ,   25. ,   11. ,    0.5],       [ -48. ,    4. ,    7. ,    1.1],       [ -46. ,  -20. ,    7. ,    0.7],       [ -36. ,  -41. ,    7. ,    1. ],       [ -16. ,  -52. ,    9. ,    0.9],       [   9. ,  -54. ,   13. ,    0.6],       [  32. ,  -36. ,   12. ,    0.7],       [  46. ,  -22. ,   10. ,    0.6],       [  58. ,    0. ,    4. ,    0.8],       [  53. ,   22. ,   12. ,    1.1],       [  41. ,   43. ,    4. ,    1. ],       [  15. ,   54. ,    4. ,    1.3],       [ -14. ,   61. ,   12. ,    0.7],       [ -35. ,   42. ,   12. ,    0.6],       [ -52. ,   22. ,    7. ,    1.2],       [ -60. ,   -4. ,    8. ,    1. ],       [ -52. ,  -30. ,   11. ,    0.5],       [ -41. ,  -49. ,    4. ,    1.2],       [ -10. ,  -60. ,    8. ,    0.8],       [  14. ,  -56. ,    5. ,    0.8],       [  36. ,  -51. ,    8. ,    1. ],       [  57. ,  -28. ,    7. ,    0.7],       [  66. ,   -3. ,   10. ,    1.5],       [  60. ,   33. ,    5. ,    0.8],       [  36. ,   50. ,    9. ,    0.6],       [  15. ,   61. ,   11. ,    0.7],       [ -17. ,   60. ,    5. ,    0.8],       [ -37. ,   52. ,   13. ,    0.5],       [ -56. ,   27. ,    7. ,    1.4],       [ -69. ,   -4. ,   11. ,    1. ],       [ -56. ,  -30. ,    5. ,    0.8],       [ -39. ,  -48. ,    8. ,    1. ],       [ -10. ,  -62. ,    5. ,    0.7],       [  12. ,  -66. ,    8. ,    1. ],       [  37. ,  -52. ,   10. ,    1.2],       [  56. ,  -30. ,   12. ,    1. ],       [  75. ,    3. ,   10. ,    1. ],       [  63. ,   33. ,    6. ,    0.5],       [  42. ,   57. ,    5. ,    0.5],       [  12. ,   75. ,    7. ,    1.4],       [ -13. ,   75. ,   12. ,    1.4],       [ -46. ,   60. ,   13. ,    1.5],       [ -69. ,   34. ,    6. ,    0.8],       [ -76. ,   -5. ,    8. ,    1.4],       [ -68. ,  -30. ,   12. ,    0.6],       [ -44. ,  -56. ,   12. ,    0.5],       [ -18. ,  -73. ,   11. ,    1. ],       [  18. ,  -69. ,    9. ,    1.4],       [  45. ,  -59. ,   11. ,    0.5],       [  63. ,  -31. ,    9. ,    0.7],       [  78. ,   -5. ,   12. ,    1.1],       [  70. ,   39. ,   13. ,    0.9],       [  50. ,   68. ,    5. ,    1. ],       [  19. ,   83. ,    7. ,    0.8],       [ -15. ,   76. ,    9. ,    1.3],       [ -52. ,   68. ,   12. ,    0.8],       [ -77. ,   39. ,   12. ,    1.5],       [ -85. ,   -3. ,   13. ,    1.1],       [ -73. ,  -33. ,   11. ,    1.2],       [ -57. ,  -69. ,    7. ,    1.5],       [ -18. ,  -85. ,    4. ,    1. ],       [  18. ,  -86. ,   12. ,    0.8],       [  54. ,  -68. ,    9. ,    1. ],       [  72. ,  -36. ,   11. ,    1. ],       [  89. ,    1. ,   10. ,    0.6],       [  79. ,   42. ,    4. ,    0.9],       [  59. ,   69. ,   10. ,    0.7],       [  25. ,   92. ,    7. ,    0.6],       [ -18. ,   89. ,   11. ,    1.2],       [ -58. ,   69. ,   12. ,    0.7],       [ -80. ,   40. ,    8. ,    1.1],       [ -93. ,    0. ,    7. ,    1.5],       [ -87. ,  -42. ,   11. ,    0.7],       [ -54. ,  -71. ,   13. ,    0.9],       [ -21. ,  -89. ,   10. ,    1. ],       [  16. ,  -89. ,    4. ,    1.3],       [  58. ,  -74. ,    9. ,    0.5],       [  82. ,  -39. ,    6. ,    0.6],       [ 101. ,   -1. ,    8. ,    1.2],       [  90. ,   38. ,    9. ,    1.4],       [  61. ,   81. ,    7. ,    1.4],       [  20. ,  100. ,    5. ,    1.3],       [ -28. ,   95. ,    8. ,    1.5],       [ -62. ,   78. ,    9. ,    0.7],       [ -95. ,   40. ,    4. ,    0.9],       [ -96. ,    0. ,   10. ,    1.2],       [ -86. ,  -42. ,    6. ,    0.6],       [ -65. ,  -83. ,    8. ,    0.7],       [ -19. ,  -95. ,    9. ,    0.9],       [  17. ,  -99. ,    8. ,    0.8],       [  60. ,  -83. ,    8. ,    1. ],       [  86. ,  -42. ,    6. ,    0.7],       [  45. ,    1. ,   11. ,    1.2],       [  42. ,   26. ,   15. ,    1. ],       [  30. ,   40. ,   14. ,    0.6],       [   9. ,   46. ,   15. ,    1.2],       [  -7. ,   44. ,   16. ,    0.7],       [ -31. ,   37. ,   10. ,    0.9],       [ -46. ,   26. ,   13. ,    1.3],       [ -54. ,   -3. ,   16. ,    0.8],       [ -47. ,  -19. ,   10. ,    0.8],       [ -33. ,  -36. ,    8. ,    0.5],       [  -7. ,  -49. ,   15. ,    0.8],       [  13. ,  -53. ,   15. ,    0.8],       [  30. ,  -44. ,   13. ,    1.5],       [  43. ,  -21. ,   15. ,    0.5],       [  59. ,    4. ,   11. ,    0.7],       [  52. ,   20. ,   11. ,    0.9],       [  32. ,   49. ,   12. ,    0.7],       [  12. ,   60. ,    8. ,    1.2],       [ -11. ,   58. ,   16. ,    0.9],       [ -41. ,   44. ,    9. ,    1.4],       [ -55. ,   20. ,   13. ,    1.1],       [ -62. ,    1. ,   12. ,    1.3],       [ -57. ,  -24. ,    8. ,    0.9],       [ -40. ,  -42. ,   14. ,    0.8],       [ -16. ,  -61. ,    9. ,    0.9],       [  10. ,  -53. ,   15. ,    1.3],       [  34. ,  -41. ,   13. ,    0.8],       [  49. ,  -29. ,   14. ,    1.2],       [  68. ,    3. ,   13. ,    1.2],       [  56. ,   25. ,   14. ,    1.2],       [  44. ,   47. ,   16. ,    0.6],       [  15. ,   66. ,   10. ,    1.2],       [ -12. ,   66. ,   13. ,    1.1],       [ -42. ,   48. ,    9. ,    1.2],       [ -65. ,   24. ,   11. ,    0.8],       [ -64. ,   -2. ,   13. ,    1. ],       [ -61. ,  -33. ,   10. ,    1.2],       [ -45. ,  -55. ,   15. ,    1.5],       [ -14. ,  -69. ,   10. ,    0.8],       [  14. ,  -68. ,   14. ,    0.9],       [  43. ,  -48. ,   17. ,    0.6],       [  59. ,  -25. ,   13. ,    0.7],       [  70. ,    0. ,   16. ,    1.3],       [  68. ,   30. ,   15. ,    1. ],       [  49. ,   60. ,   10. ,    0.9],       [  16. ,   69. ,   11. ,    1.2],       [ -19. ,   72. ,   12. ,    1. ],       [ -52. ,   54. ,   12. ,    1.2],       [ -69. ,   36. ,   15. ,    0.7],       [ -71. ,   -3. ,   12. ,    1.4],       [ -70. ,  -31. ,   14. ,    0.7],       [ -50. ,  -63. ,   13. ,    1.3],       [ -14. ,  -69. ,   12. ,    1.4],       [  12. ,  -71. ,   14. ,    1.2],       [  51. ,  -56. ,   12. ,    0.8],       [  62. ,  -35. ,   13. ,    1.1],       [  81. ,    4. ,   18. ,    1.2],       [  73. ,   33. ,   11. ,    1.2],       [  53. ,   68. ,    8. ,    0.7],       [  20. ,   76. ,   10. ,    0.6],       [ -18. ,   82. ,    8. ,    1.4],       [ -52. ,   60. ,   10. ,    0.9],       [ -77. ,   34. ,    8. ,    0.7],       [ -81. ,   -2. ,    8. ,    0.6],       [ -78. ,  -41. ,    9. ,    1.5],       [ -48. ,  -66. ,   15. ,    1. ],       [ -16. ,  -82. ,   14. ,    0.8],       [  15. ,  -81. ,    9. ,    1.3],       [  47. ,  -62. ,   12. ,    0.6],       [  71. ,  -38. ,    9. ,    0.6],       [  89. ,   -4. ,    9. ,    1.1],       [  82. ,   35. ,   14. ,    1.4],       [  61. ,   67. ,    8. ,    1.1],       [  24. ,   85. ,   17. ,    0.8],       [ -23. ,   94. ,   17. ,    0.6],       [ -59. ,   75. ,   15. ,    0.9],       [ -82. ,   41. ,    8. ,    1. ],       [ -96. ,    0. ,    9. ,    1.1],       [ -82. ,  -44. ,   16. ,    1.2],       [ -60. ,  -67. ,   11. ,    0.9],       [ -25. ,  -85. ,   13. ,    1.4],       [  18. ,  -87. ,   16. ,    0.7],       [  58. ,  -77. ,   13. ,    0.9],       [  79. ,  -42. ,   10. ,    0.9],       [ 104. ,   -2. ,   14. ,    1. ],       [  92. ,   42. ,   12. ,    1.3],       [  64. ,   78. ,    9. ,    0.7],       [  27. ,   92. ,    9. ,    1.4],       [ -26. ,  100. ,   14. ,    1.3],       [ -64. ,   73. ,    8. ,    0.7],       [ -92. ,   39. ,   13. ,    0.6],       [ -96. ,   -3. ,   13. ,    1.4],       [ -92. ,  -44. ,   18. ,    1.4],       [ -65. ,  -77. ,   11. ,    1.2],       [ -19. ,  -99. ,   17. ,    1.4],       [  27. ,  -95. ,   14. ,    1. ],       [  58. ,  -76. ,   10. ,    1.4],       [  89. ,  -44. ,   16. ,    0.6],       [  46. ,   -3. ,   14. ,    1.1],       [  47. ,   24. ,   21. ,    0.9],       [  28. ,   34. ,   14. ,    1.1],       [  13. ,   44. ,   20. ,    0.9],       [ -13. ,   45. ,   12. ,    1.3],       [ -27. ,   38. ,   22. ,    1.3],       [ -41. ,   23. ,   17. ,    0.9],       [ -49. ,    0. ,   14. ,    1. ],       [ -48. ,  -19. ,   17. ,    0.9],       [ -37. ,  -40. ,   22. ,    1. ],       [ -16. ,  -48. ,   22. ,    1. ],       [  11. ,  -53. ,   17. ,    0.9],       [  28. ,  -36. ,   14. ,    0.7],       [  45. ,  -25. ,   22. ,    1.3],       [  53. ,    0. ,   17. ,    1.1],       [  55. ,   26. ,   12. ,    0.8],       [  34. ,   45. ,   18. ,    1.5],       [  10. ,   55. ,   20. ,    0.9],       [ -10. ,   55. ,   14. ,    1.2],       [ -34. ,   47. ,   22. ,    1. ],       [ -55. ,   29. ,   13. ,    1.1],       [ -62. ,    2. ,   19. ,    0.7],       [ -56. ,  -29. ,   21. ,    0.8],       [ -41. ,  -45. ,   16. ,    0.7],       [ -17. ,  -58. ,   19. ,    1.5],       [  11. ,  -58. ,   14. ,    0.7],       [  32. ,  -47. ,   16. ,    0.5],       [  50. ,  -22. ,   15. ,    0.6],       [  62. ,   -5. ,   20. ,    0.6],       [  56. ,   30. ,   14. ,    1.2],       [  37. ,   51. ,   15. ,    1. ],       [  14. ,   61. ,   18. ,    0.5],       [ -15. ,   61. ,   16. ,    1.2],       [ -45. ,   55. ,   16. ,    0.8],       [ -58. ,   31. ,   13. ,    0.9],       [ -72. ,    4. ,   13. ,    1.5],       [ -62. ,  -29. ,   17. ,    1.3],       [ -43. ,  -49. ,   19. ,    0.6],       [ -18. ,  -70. ,   22. ,    0.6],       [  17. ,  -69. ,   20. ,    1.4],       [  38. ,  -48. ,   19. ,    0.8],       [  58. ,  -34. ,   15. ,    0.9],       [  75. ,   -4. ,   15. ,    1.4],       [  63. ,   29. ,   15. ,    1.1],       [  50. ,   54. ,   21. ,    1.1],       [  15. ,   76. ,   18. ,    0.6],       [ -22. ,   72. ,   20. ,    1.2],       [ -51. ,   54. ,   15. ,    1.2],       [ -70. ,   28. ,   13. ,    1.1],       [ -79. ,    2. ,   22. ,    1.4],       [ -71. ,  -33. ,   19. ,    1.4],       [ -45. ,  -59. ,   17. ,    1.4],       [ -13. ,  -76. ,   21. ,    1.4],       [  18. ,  -74. ,   22. ,    1.5],       [  49. ,  -63. ,   15. ,    1. ],       [  66. ,  -37. ,   20. ,    1.5],       [  79. ,   -2. ,   19. ,    0.6],       [  73. ,   35. ,   17. ,    1. ],       [  55. ,   61. ,   18. ,    1. ],       [  20. ,   84. ,   21. ,    0.7],       [ -23. ,   78. ,   16. ,    0.8],       [ -56. ,   68. ,   16. ,    1.4],       [ -71. ,   31. ,   16. ,    0.6],       [ -79. ,   -3. ,   19. ,    1.1],       [ -73. ,  -35. ,   19. ,    1.1],       [ -57. ,  -70. ,   21. ,    0.7],       [ -24. ,  -80. ,   21. ,    1.4],       [  16. ,  -83. ,   22. ,    1.4],       [  53. ,  -62. ,   19. ,    0.6],       [  74. ,  -38. ,   21. ,    1.3],       [  88. ,    3. ,   21. ,    0.6],       [  78. ,   39. ,   18. ,    1.5],       [  58. ,   71. ,   22. ,    0.6],       [  24. ,   85. ,   18. ,    0.6],       [ -26. ,   90. ,   14. ,    0.9],       [ -60. ,   71. ,   19. ,    1.3],       [ -79. ,   36. ,   18. ,    1.1],       [ -92. ,   -3. ,   21. ,    1.4],       [ -87. ,  -39. ,   18. ,    0.7],       [ -61. ,  -77. ,   20. ,    1.4],       [ -24. ,  -85. ,   21. ,    0.6],       [  22. ,  -89. ,   19. ,    1.3],       [  57. ,  -71. ,   20. ,    1. ],       [  83. ,  -36. ,   19. ,    0.7],       [  95. ,   -1. ,   13. ,    0.6],       [  90. ,   46. ,   14. ,    1.1],       [  59. ,   80. ,   15. ,    1.1],       [  23. ,  101. ,   21. ,    0.5],       [ -27. ,   98. ,   20. ,    0.9],       [ -59. ,   75. ,   22. ,    0.5],       [ -89. ,   46. ,   13. ,    0.8],       [-105. ,   -2. ,   15. ,    1.2],       [ -90. ,  -44. ,   15. ,    1.3],       [ -64. ,  -79. ,   13. ,    1.5],       [ -22. ,  -95. ,   15. ,    0.8],       [  20. , -101. ,   19. ,    0.7],       [  61. ,  -77. ,   16. ,    0.6],       [  90. ,  -41. ,   17. ,    1.1],       [  48. ,   -5. ,   26. ,    1.2],       [  49. ,   23. ,   17. ,    1.3],       [  35. ,   35. ,   21. ,    0.8],       [   8. ,   45. ,   25. ,    1.1],       [ -11. ,   49. ,   22. ,    1. ],       [ -27. ,   41. ,   20. ,    1.3],       [ -45. ,   20. ,   17. ,    0.7],       [ -53. ,   -1. ,   23. ,    1.5],       [ -42. ,  -23. ,   23. ,    1.4],       [ -31. ,  -39. ,   23. ,    0.6],       [ -12. ,  -54. ,   17. ,    0.5],       [  15. ,  -47. ,   23. ,    0.9],       [  33. ,  -43. ,   22. ,    0.7],       [  43. ,  -21. ,   24. ,    0.7],       [  60. ,    4. ,   20. ,    1.1],       [  52. ,   24. ,   21. ,    0.8],       [  38. ,   46. ,   25. ,    1.3],       [  15. ,   60. ,   24. ,    0.8],       [ -16. ,   53. ,   19. ,    0.5],       [ -36. ,   44. ,   19. ,    1. ],       [ -58. ,   24. ,   26. ,    0.9],       [ -55. ,    2. ,   18. ,    0.9],       [ -51. ,  -29. ,   20. ,    1.3],       [ -40. ,  -45. ,   19. ,    0.8],       [ -14. ,  -60. ,   22. ,    1.2],       [  11. ,  -60. ,   17. ,    1.3],       [  41. ,  -44. ,   18. ,    0.9],       [  55. ,  -31. ,   23. ,    0.5],       [  68. ,   -4. ,   25. ,    1.4],       [  55. ,   27. ,   22. ,    0.9],       [  44. ,   54. ,   23. ,    1.3],       [  17. ,   65. ,   20. ,    1. ],       [ -13. ,   61. ,   23. ,    0.9],       [ -42. ,   52. ,   18. ,    0.9],       [ -58. ,   26. ,   18. ,    0.7],       [ -71. ,   -1. ,   24. ,    0.7],       [ -57. ,  -28. ,   25. ,    1.3],       [ -44. ,  -48. ,   24. ,    1. ],       [ -15. ,  -69. ,   21. ,    1.2],       [  16. ,  -68. ,   21. ,    1.1],       [  39. ,  -52. ,   23. ,    0.8],       [  62. ,  -31. ,   24. ,    0.5],       [  73. ,   -1. ,   24. ,    1. ],       [  72. ,   35. ,   20. ,    1.4],       [  41. ,   60. ,   21. ,    0.9],       [  17. ,   70. ,   23. ,    0.8],       [ -16. ,   76. ,   24. ,    1.5],       [ -43. ,   59. ,   20. ,    0.6],       [ -71. ,   31. ,   26. ,    0.9],       [ -72. ,   -5. ,   19. ,    1.4],       [ -71. ,  -36. ,   21. ,    1.4],       [ -48. ,  -60. ,   20. ,    1.5],       [ -21. ,  -78. ,   21. ,    1.4],       [  11. ,  -76. ,   21. ,    0.9],       [  47. ,  -63. ,   25. ,    1.2],       [  64. ,  -31. ,   18. ,    0.6],       [  85. ,    2. ,   25. ,    1. ],       [  70. ,   34. ,   26. ,    1.1],       [  50. ,   67. ,   25. ,    1.3],       [  18. ,   79. ,   18. ,    0.5],       [ -19. ,   82. ,   21. ,    1.4],       [ -51. ,   68. ,   25. ,    0.7],       [ -76. ,   39. ,   20. ,    0.9],       [ -88. ,   -5. ,   20. ,    0.7],       [ -76. ,  -36. ,   17. ,    1.2],       [ -54. ,  -62. ,   18. ,    0.6],       [ -21. ,  -83. ,   18. ,    1.5],       [  19. ,  -85. ,   21. ,    0.8],       [  52. ,  -62. ,   26. ,    0.9],       [  74. ,  -35. ,   17. ,    0.7],       [  93. ,    2. ,   26. ,    1.3],       [  80. ,   40. ,   20. ,    1.3],       [  58. ,   67. ,   23. ,    0.6],       [  16. ,   90. ,   25. ,    0.7],       [ -20. ,   94. ,   18. ,    1.2],       [ -57. ,   72. ,   22. ,    1. ],       [ -85. ,   44. ,   21. ,    0.7],       [ -89. ,   -4. ,   20. ,    1.3],       [ -79. ,  -35. ,   26. ,    1.5],       [ -59. ,  -68. ,   26. ,    0.6],       [ -16. ,  -94. ,   19. ,    0.8],       [  17. ,  -88. ,   25. ,    1.1],       [  61. ,  -69. ,   21. ,    1.5],       [  79. ,  -41. ,   20. ,    0.6],       [ 100. ,   -5. ,   21. ,    0.8],       [  90. ,   45. ,   26. ,    1.5],       [  63. ,   78. ,   20. ,    1.5],       [  18. ,  102. ,   26. ,    1.5],       [ -26. ,   99. ,   24. ,    1.5],       [ -64. ,   76. ,   26. ,    0.7],       [ -88. ,   44. ,   20. ,    1.1],       [-103. ,   -5. ,   25. ,    0.9],       [ -91. ,  -42. ,   18. ,    0.9],       [ -63. ,  -78. ,   20. ,    1.2],       [ -22. ,  -95. ,   21. ,    1. ],       [  21. , -100. ,   26. ,    1.1],       [  62. ,  -82. ,   24. ,    1.1],       [  94. ,  -41. ,   25. ,    1.4],       [  48. ,   -3. ,   27. ,    1.4],       [  45. ,   23. ,   30. ,    1.3],       [  34. ,   38. ,   27. ,    1. ],       [  10. ,   49. ,   29. ,    0.6],       [ -14. ,   46. ,   30. ,    1.4],       [ -36. ,   36. ,   26. ,    0.6],       [ -50. ,   18. ,   25. ,    1.4],       [ -54. ,   -4. ,   29. ,    1.2],       [ -41. ,  -25. ,   26. ,    0.6],       [ -33. ,  -43. ,   24. ,    1. ],       [ -11. ,  -48. ,   23. ,    1.2],       [   9. ,  -49. ,   24. ,    0.9],       [  34. ,  -39. ,   23. ,    0.5],       [  41. ,  -20. ,   21. ,    0.5],       [  57. ,   -2. ,   27. ,    1.4],       [  52. ,   21. ,   29. ,    1.1],       [  37. ,   46. ,   27. ,    1.1],       [   9. ,   58. ,   23. ,    1. ],       [ -14. ,   54. ,   22. ,    1.4],       [ -40. ,   43. ,   29. ,    0.8],       [ -48. ,   25. ,   21. ,    0.7],       [ -55. ,   -2. ,   26. ,    0.6],       [ -57. ,  -23. ,   31. ,    0.8],       [ -36. ,  -44. ,   24. ,    1.4],       [  -9. ,  -55. ,   29. ,    0.6],       [  10. ,  -57. ,   22. ,    1.1],       [  40. ,  -47. ,   22. ,    1.2],       [  55. ,  -25. ,   30. ,    1.2],       [  63. ,   -5. ,   24. ,    0.7],       [  61. ,   31. ,   22. ,    0.8],       [  41. ,   52. ,   24. ,    1.2],       [  18. ,   68. ,   28. ,    1.3],       [ -20. ,   66. ,   28. ,    1.2],       [ -37. ,   56. ,   30. ,    0.5],       [ -58. ,   25. ,   22. ,    0.8],       [ -70. ,   -4. ,   23. ,    1. ],       [ -59. ,  -28. ,   24. ,    0.8],       [ -37. ,  -56. ,   30. ,    1.3],       [ -16. ,  -61. ,   31. ,    1.1],       [  10. ,  -68. ,   29. ,    0.5],       [  44. ,  -56. ,   28. ,    0.6],       [  58. ,  -26. ,   29. ,    1.4],       [  78. ,    1. ,   28. ,    1.1],       [  68. ,   34. ,   27. ,    1.4],       [  45. ,   55. ,   31. ,    0.7],       [  13. ,   69. ,   31. ,    0.5],       [ -14. ,   73. ,   26. ,    1.5],       [ -47. ,   54. ,   24. ,    1.2],       [ -72. ,   32. ,   26. ,    1.4],       [ -73. ,    2. ,   27. ,    1. ],       [ -66. ,  -35. ,   24. ,    0.5],       [ -51. ,  -64. ,   22. ,    0.9],       [ -19. ,  -72. ,   25. ,    1.5],       [  13. ,  -73. ,   30. ,    1.5],       [  44. ,  -58. ,   30. ,    1.5],       [  64. ,  -31. ,   22. ,    1.5],       [  84. ,   -2. ,   23. ,    0.6],       [  77. ,   31. ,   29. ,    0.8],       [  51. ,   64. ,   21. ,    0.7],       [  19. ,   79. ,   27. ,    0.9],       [ -19. ,   77. ,   25. ,    1. ],       [ -56. ,   69. ,   29. ,    0.9],       [ -76. ,   31. ,   27. ,    0.6],       [ -85. ,    1. ,   27. ,    0.8],       [ -72. ,  -33. ,   25. ,    0.6],       [ -48. ,  -66. ,   22. ,    1.4],       [ -22. ,  -80. ,   22. ,    1.2],       [  15. ,  -85. ,   23. ,    0.9],       [  54. ,  -66. ,   30. ,    1.2],       [  78. ,  -35. ,   23. ,    0.5],       [  92. ,   -2. ,   25. ,    0.5],       [  84. ,   38. ,   22. ,    0.7],       [  55. ,   74. ,   28. ,    0.7],       [  15. ,   92. ,   24. ,    0.5],       [ -20. ,   89. ,   23. ,    1.1],       [ -61. ,   66. ,   30. ,    1.1],       [ -78. ,   41. ,   27. ,    0.8],       [ -94. ,    1. ,   28. ,    0.7],       [ -84. ,  -40. ,   23. ,    1.1],       [ -56. ,  -76. ,   28. ,    1.1],       [ -21. ,  -88. ,   21. ,    1.2],       [  23. ,  -90. ,   26. ,    1.3],       [  60. ,  -73. ,   25. ,    0.9],       [  84. ,  -43. ,   27. ,    1.4],       [  96. ,   -4. ,   25. ,    0.9],       [  93. ,   44. ,   26. ,    0.5],       [  63. ,   79. ,   22. ,    1.1],       [  24. ,   98. ,   31. ,    1.5],       [ -25. ,   99. ,   27. ,    1.5],       [ -62. ,   75. ,   22. ,    0.7],       [ -86. ,   41. ,   27. ,    0.5],       [-101. ,   -2. ,   26. ,    0.8],       [ -87. ,  -41. ,   28. ,    1.2],       [ -65. ,  -79. ,   23. ,    0.6],       [ -25. ,  -99. ,   30. ,    1.2],       [  17. , -100. ,   30. ,    1. ],       [  66. ,  -77. ,   25. ,    1. ],       [  86. ,  -49. ,   30. ,    0.8],       [  54. ,   -5. ,   35. ,    0.5],       [  49. ,   17. ,   28. ,    1.5],       [  31. ,   34. ,   31. ,    0.8],       [  10. ,   50. ,   28. ,    1.2],       [ -16. ,   47. ,   34. ,    1.2],       [ -32. ,   40. ,   34. ,    1.1],       [ -50. ,   18. ,   27. ,    0.7],       [ -47. ,   -2. ,   35. ,    0.8],       [ -43. ,  -18. ,   31. ,    1. ],       [ -34. ,  -37. ,   31. ,    1.2],       [ -12. ,  -50. ,   34. ,    0.9],       [  15. ,  -44. ,   34. ,    1.4],       [  34. ,  -42. ,   31. ,    0.9],       [  47. ,  -20. ,   33. ,    0.7],       [  62. ,   -5. ,   28. ,    0.6],       [  48. ,   25. ,   31. ,    1. ],       [  32. ,   49. ,   29. ,    0.7],       [  12. ,   53. ,   33. ,    1.5],       [ -17. ,   52. ,   26. ,    1. ],       [ -39. ,   49. ,   35. ,    1.5],       [ -53. ,   21. ,   26. ,    1.4],       [ -63. ,   -3. ,   33. ,    0.6],       [ -49. ,  -27. ,   26. ,    0.8],       [ -33. ,  -48. ,   32. ,    1.2],       [ -16. ,  -62. ,   35. ,    0.6],       [   8. ,  -57. ,   32. ,    0.9],       [  38. ,  -47. ,   35. ,    1.3],       [  54. ,  -24. ,   27. ,    0.8],       [  66. ,    1. ,   28. ,    0.9],       [  61. ,   32. ,   35. ,    1.3],       [  37. ,   53. ,   28. ,    1.4],       [  17. ,   69. ,   33. ,    0.9],       [ -20. ,   68. ,   30. ,    1.2],       [ -43. ,   53. ,   29. ,    1. ],       [ -64. ,   29. ,   33. ,    0.7],       [ -63. ,    4. ,   32. ,    1.4],       [ -61. ,  -26. ,   28. ,    1.4],       [ -47. ,  -53. ,   29. ,    1.5],       [ -12. ,  -64. ,   28. ,    0.8],       [   9. ,  -69. ,   33. ,    1. ],       [  43. ,  -57. ,   34. ,    0.9],       [  62. ,  -25. ,   30. ,    1.3],       [  70. ,    4. ,   27. ,    1. ],       [  65. ,   31. ,   28. ,    0.9],       [  45. ,   54. ,   32. ,    0.7],       [  18. ,   75. ,   33. ,    1.5],       [ -17. ,   78. ,   33. ,    0.8],       [ -51. ,   57. ,   32. ,    1. ],       [ -64. ,   27. ,   34. ,    1. ],       [ -74. ,   -4. ,   30. ,    1. ],       [ -72. ,  -36. ,   32. ,    0.7],       [ -48. ,  -56. ,   30. ,    1. ],       [ -16. ,  -70. ,   35. ,    0.5],       [  19. ,  -75. ,   34. ,    0.9],       [  51. ,  -60. ,   29. ,    1.2],       [  69. ,  -30. ,   27. ,    0.9],       [  83. ,   -5. ,   29. ,    0.6],       [  74. ,   36. ,   29. ,    1.1],       [  54. ,   66. ,   31. ,    0.7],       [  15. ,   81. ,   34. ,    0.6],       [ -20. ,   81. ,   28. ,    1. ],       [ -49. ,   63. ,   34. ,    1.4],       [ -79. ,   38. ,   27. ,    1.5],       [ -83. ,    1. ,   32. ,    0.8],       [ -80. ,  -38. ,   35. ,    1. ],       [ -49. ,  -61. ,   31. ,    0.8],       [ -19. ,  -79. ,   35. ,    0.7],       [  16. ,  -80. ,   28. ,    0.8],       [  49. ,  -65. ,   35. ,    0.7],       [  70. ,  -39. ,   29. ,    0.5],       [  93. ,   -2. ,   31. ,    1.4],       [  85. ,   37. ,   27. ,    0.9],       [  52. ,   68. ,   34. ,    0.9],       [  24. ,   89. ,   36. ,    1.4],       [ -21. ,   93. ,   35. ,    1.5],       [ -53. ,   70. ,   28. ,    1.2],       [ -80. ,   42. ,   29. ,    0.9],       [ -91. ,   -2. ,   30. ,    1.3],       [ -86. ,  -43. ,   31. ,    1.2],       [ -54. ,  -77. ,   27. ,    1.4],       [ -18. ,  -93. ,   30. ,    0.9],       [  17. ,  -90. ,   31. ,    1.3],       [  57. ,  -76. ,   28. ,    1.2],       [  85. ,  -42. ,   31. ,    1.5],       [  98. ,    1. ,   34. ,    1.1],       [  92. ,   47. ,   30. ,    1.1],       [  60. ,   81. ,   26. ,    0.8],       [  21. ,  101. ,   29. ,    1.4],       [ -26. ,  101. ,   28. ,    0.5],       [ -60. ,   77. ,   29. ,    0.9],       [ -89. ,   41. ,   29. ,    1.3],       [ -99. ,   -2. ,   29. ,    0.9],       [ -92. ,  -45. ,   30. ,    1. ],       [ -60. ,  -78. ,   29. ,    1.4],       [ -18. , -102. ,   35. ,    1.3],       [  26. ,  -96. ,   28. ,    1.4],       [  60. ,  -83. ,   28. ,    1.2],       [  94. ,  -42. ,   34. ,    0.6],       [  48. ,   -3. ,   32. ,    0.8],       [  40. ,   17. ,   38. ,    0.8],       [  32. ,   34. ,   34. ,    1.5],       [   6. ,   51. ,   35. ,    1.1],       [  -8. ,   50. ,   37. ,    0.6],       [ -29. ,   37. ,   38. ,    0.9],       [ -41. ,   21. ,   31. ,    0.8],       [ -53. ,   -2. ,   31. ,    0.6],       [ -41. ,  -24. ,   40. ,    0.8],       [ -34. ,  -40. ,   37. ,    1.3],       [  -7. ,  -49. ,   33. ,    1.2],       [  14. ,  -52. ,   34. ,    0.6],       [  32. ,  -42. ,   31. ,    0.9],       [  45. ,  -24. ,   39. ,    1.1],       [  57. ,   -3. ,   35. ,    0.8],       [  52. ,   23. ,   32. ,    0.6],       [  33. ,   46. ,   33. ,    1.4],       [  15. ,   54. ,   34. ,    0.5],       [ -13. ,   54. ,   36. ,    1.4],       [ -36. ,   50. ,   34. ,    0.7],       [ -58. ,   26. ,   31. ,    1.2],       [ -63. ,   -1. ,   31. ,    0.8],       [ -57. ,  -26. ,   37. ,    0.5],       [ -35. ,  -48. ,   32. ,    1.3],       [  -9. ,  -56. ,   33. ,    1.2],       [   8. ,  -56. ,   40. ,    0.8],       [  38. ,  -49. ,   34. ,    1.4],       [  50. ,  -25. ,   37. ,    0.6],       [  68. ,   -2. ,   31. ,    0.5],       [  56. ,   33. ,   38. ,    0.6],       [  42. ,   54. ,   35. ,    0.9],       [  13. ,   62. ,   38. ,    1.1],       [ -20. ,   66. ,   37. ,    0.8],       [ -47. ,   49. ,   31. ,    1.2],       [ -57. ,   28. ,   39. ,    1. ],       [ -66. ,    2. ,   32. ,    1.4],       [ -63. ,  -29. ,   32. ,    1.5],       [ -42. ,  -54. ,   33. ,    0.9],       [ -18. ,  -67. ,   38. ,    1. ],       [  17. ,  -66. ,   40. ,    0.6],       [  43. ,  -51. ,   37. ,    0.7],       [  62. ,  -25. ,   39. ,    1. ],       [  76. ,    2. ,   31. ,    1.5],       [  64. ,   33. ,   37. ,    1. ],       [  49. ,   56. ,   33. ,    0.9],       [  21. ,   77. ,   33. ,    1.3],       [ -17. ,   76. ,   39. ,    0.7],       [ -45. ,   63. ,   37. ,    1.1],       [ -65. ,   36. ,   36. ,    0.6],       [ -80. ,   -5. ,   31. ,    1.2],       [ -72. ,  -35. ,   35. ,    0.8],       [ -48. ,  -63. ,   36. ,    1.1],       [ -20. ,  -78. ,   33. ,    1. ],       [  15. ,  -74. ,   32. ,    0.9],       [  48. ,  -64. ,   32. ,    1.2],       [  63. ,  -37. ,   35. ,    1.4],       [  79. ,    3. ,   31. ,    0.5],       [  76. ,   33. ,   36. ,    0.8],       [  51. ,   69. ,   40. ,    1.2],       [  20. ,   77. ,   30. ,    0.6],       [ -16. ,   85. ,   37. ,    1.2],       [ -55. ,   64. ,   34. ,    0.7],       [ -78. ,   39. ,   31. ,    0.5],       [ -84. ,   -5. ,   35. ,    1.4],       [ -74. ,  -36. ,   36. ,    1.3],       [ -52. ,  -70. ,   38. ,    0.6],       [ -15. ,  -82. ,   36. ,    1.2],       [  14. ,  -81. ,   32. ,    1.3],       [  48. ,  -68. ,   40. ,    1.2],       [  70. ,  -34. ,   37. ,    1.2],       [  92. ,    4. ,   30. ,    1.1],       [  81. ,   40. ,   37. ,    0.6],       [  59. ,   68. ,   37. ,    0.7],       [  24. ,   89. ,   37. ,    1.3],       [ -22. ,   86. ,   31. ,    1.5],       [ -57. ,   76. ,   39. ,    0.9],       [ -80. ,   40. ,   31. ,    0.8],       [ -94. ,    4. ,   37. ,    0.8],       [ -84. ,  -37. ,   34. ,    1.1],       [ -62. ,  -72. ,   37. ,    0.7],       [ -20. ,  -85. ,   30. ,    1.2],       [  22. ,  -92. ,   40. ,    1.2],       [  55. ,  -77. ,   40. ,    0.8],       [  85. ,  -45. ,   37. ,    1.1],       [ 100. ,   -3. ,   39. ,    0.6],       [  92. ,   46. ,   37. ,    1.5],       [  58. ,   74. ,   33. ,    0.9],       [  20. ,   97. ,   35. ,    1.4],       [ -20. ,  101. ,   38. ,    1. ],       [ -61. ,   80. ,   35. ,    0.8],       [ -88. ,   45. ,   31. ,    0.7],       [-104. ,   -5. ,   38. ,    1. ],       [ -94. ,  -44. ,   36. ,    1.1],       [ -63. ,  -77. ,   35. ,    1.2],       [ -25. ,  -99. ,   33. ,    0.5],       [  17. ,  -95. ,   36. ,    0.5],       [  63. ,  -80. ,   39. ,    1.1],       [  87. ,  -43. ,   32. ,    0.7],       [  50. ,    2. ,   35. ,    0.6],       [  40. ,   17. ,   39. ,    0.9],       [  31. ,   44. ,   42. ,    1.2],       [  10. ,   48. ,   38. ,    0.7],       [  -9. ,   47. ,   37. ,    0.9],       [ -34. ,   38. ,   39. ,    1.2],       [ -41. ,   23. ,   39. ,    1.4],       [ -52. ,   -5. ,   44. ,    0.7],       [ -46. ,  -27. ,   41. ,    1. ],       [ -32. ,  -40. ,   42. ,    1. ],       [ -15. ,  -49. ,   44. ,    0.7],       [  10. ,  -46. ,   37. ,    0.6],       [  35. ,  -38. ,   43. ,    1. ],       [  43. ,  -19. ,   37. ,    0.8],       [  56. ,   -4. ,   37. ,    0.6],       [  56. ,   23. ,   43. ,    1.1],       [  36. ,   41. ,   40. ,    0.7],       [  13. ,   53. ,   35. ,    1.5],       [ -11. ,   56. ,   36. ,    1. ],       [ -37. ,   47. ,   43. ,    0.6],       [ -49. ,   22. ,   43. ,    1.4],       [ -57. ,   -3. ,   43. ,    1.1],       [ -49. ,  -28. ,   37. ,    0.6],       [ -35. ,  -42. ,   36. ,    0.9],       [ -15. ,  -56. ,   43. ,    1.4],       [   8. ,  -54. ,   43. ,    0.5],       [  39. ,  -41. ,   41. ,    1.3],       [  53. ,  -25. ,   37. ,    1. ],       [  66. ,   -3. ,   41. ,    1. ],       [  61. ,   32. ,   37. ,    1. ],       [  45. ,   47. ,   39. ,    1.4],       [  12. ,   60. ,   36. ,    0.8],       [ -20. ,   69. ,   37. ,    0.8],       [ -47. ,   53. ,   37. ,    1.3],       [ -61. ,   26. ,   35. ,    1.3],       [ -70. ,   -5. ,   38. ,    0.7],       [ -63. ,  -33. ,   43. ,    0.8],       [ -41. ,  -50. ,   42. ,    0.9],       [ -19. ,  -65. ,   44. ,    1.2],       [  19. ,  -62. ,   43. ,    1.1],       [  38. ,  -53. ,   39. ,    0.6],       [  62. ,  -32. ,   43. ,    1.2],       [  78. ,   -4. ,   43. ,    0.8],       [  66. ,   34. ,   36. ,    1.1],       [  41. ,   57. ,   35. ,    1.5],       [  15. ,   70. ,   36. ,    0.8],       [ -15. ,   76. ,   43. ,    1.4],       [ -47. ,   60. ,   35. ,    1.2],       [ -67. ,   29. ,   42. ,    0.7],       [ -78. ,   -4. ,   35. ,    0.9],       [ -69. ,  -32. ,   42. ,    1.3],       [ -48. ,  -58. ,   37. ,    1.2],       [ -17. ,  -79. ,   42. ,    1.1],       [  20. ,  -76. ,   40. ,    0.6],       [  42. ,  -59. ,   43. ,    1.2],       [  71. ,  -31. ,   43. ,    1.4],       [  82. ,   -3. ,   41. ,    0.9],       [  75. ,   39. ,   38. ,    1. ],       [  53. ,   64. ,   42. ,    1. ],       [  17. ,   79. ,   36. ,    1.5],       [ -17. ,   77. ,   41. ,    0.6],       [ -51. ,   64. ,   40. ,    0.7],       [ -76. ,   40. ,   42. ,    0.5],       [ -81. ,   -2. ,   41. ,    1.1],       [ -76. ,  -33. ,   36. ,    0.6],       [ -53. ,  -63. ,   35. ,    1.3],       [ -20. ,  -78. ,   41. ,    1.3],       [  17. ,  -79. ,   44. ,    1.3],       [  52. ,  -68. ,   44. ,    1.2],       [  75. ,  -41. ,   35. ,    0.7],       [  92. ,   -4. ,   44. ,    1.3],       [  81. ,   35. ,   35. ,    0.6],       [  54. ,   71. ,   43. ,    0.7],       [  23. ,   86. ,   40. ,    1. ],       [ -25. ,   88. ,   41. ,    0.9],       [ -56. ,   67. ,   41. ,    1.4],       [ -84. ,   44. ,   42. ,    1.3],       [ -96. ,   -5. ,   37. ,    1.5],       [ -80. ,  -39. ,   37. ,    0.7],       [ -61. ,  -69. ,   43. ,    1. ],       [ -22. ,  -88. ,   37. ,    1.2],       [  18. ,  -94. ,   40. ,    0.7],       [  58. ,  -73. ,   44. ,    0.7],       [  78. ,  -41. ,   40. ,    1.2],       [ 100. ,    3. ,   38. ,    0.7],       [  91. ,   40. ,   35. ,    1.3],       [  58. ,   73. ,   35. ,    0.7],       [  26. ,   95. ,   43. ,    0.6],       [ -22. ,   94. ,   44. ,    0.8],       [ -67. ,   74. ,   40. ,    1.2],       [ -93. ,   42. ,   40. ,    0.9],       [-103. ,   -4. ,   37. ,    0.8],       [ -90. ,  -47. ,   36. ,    1. ],       [ -62. ,  -74. ,   43. ,    1.3],       [ -25. ,  -95. ,   38. ,    1.4],       [  19. , -101. ,   41. ,    0.5],       [  66. ,  -80. ,   35. ,    1. ],       [  91. ,  -43. ,   38. ,    1.5]])
        basis0 = BSplineBasis(7, np.array([ -0.7,   0. ,   0. ,   0. ,   0. ,   0. ,   0. ,   1.2,   2.3,   3.3,   4.2,   5. ,   5.7,
         6.9,   8.3,   9. ,   9. ,   9. ,   9. ,   9. ,   9. ,  10.2]),0)
        basis1 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ]))
        basis2 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.6,  1.9,  2.7,  4.3,  5. ,  5. ,  5. ,  5. ,  5. ,  5. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,True)
        vol2 = vol.clone()
        vol2.insert_knot(0, [5.383]*1) # insert C5-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 23)
        vol2.insert_knot(0, [4.885]*2) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 25)
        vol2.insert_knot(0, [8.036]*3) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 28)
        vol2.insert_knot(0, [2.766]*4) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 32)
        vol2.insert_knot(0, [2.658]*5) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 37)
        vol2.insert_knot(0, [3.771]*6) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 43)
        vol2.insert_knot(1, [0.800]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 14)
        vol2.insert_knot(1, [0.800]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 16)
        vol2.insert_knot(1, [0.800]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 19)
        vol2.insert_knot(1, [0.800]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 23)
        vol2.insert_knot(1, [0.800]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 28)
        vol2.insert_knot(2, [1.249]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 17)
        vol2.insert_knot(2, [3.513]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 19)
        vol2.insert_knot(2, [4.190]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 22)
        vol2.insert_knot(2, [3.032]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 26)
        vol2.insert_knot(2, [1.112]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 31)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p5_rational_C1_periodic(self):
        controlpoints = np.array([[ 101. ,   -2. ,   -1. ,    1.3],
       [  85. ,   45. ,    0. ,    0.7],
       [  49. ,   81. ,    1. ,    1.2],
       [  -2. ,   96. ,    0. ,    0.5],
       [ -47. ,   82. ,   -1. ,    0.7],
       [ -85. ,   49. ,   -3. ,    1. ],
       [-103. ,    1. ,   -5. ,    1.1],
       [ -84. ,  -53. ,    1. ,    1. ],
       [ -48. ,  -83. ,   -1. ,    0.9],
       [  -2. , -105. ,   -5. ,    1.1],
       [  50. ,  -92. ,   -3. ,    0.7],
       [  87. ,  -50. ,   -4. ,    0.8]])
        basis0 = BSplineBasis(5, np.array([ -1.8,  -1.4,   0. ,   0. ,   0. ,   1. ,   2.3,   3.1,   4. ,   4.6,   5.9,   6.8,   8.2,
         8.6,  10. ,  10. ,  10. ,  11. ,  12.3]),1)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([3.466]*1) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 20)
        crv2.insert_knot([8.448]*2) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 22)
        crv2.insert_knot([1.731]*3) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 25)
        crv2.insert_knot([1.691]*4) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 29)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p56_rational_C1_periodic(self):
        controlpoints = np.array([[  64. ,   -5. ,   -5. ,    1.4],       [  48. ,   32. ,   -5. ,    1.2],       [  30. ,   47. ,   -3. ,    0.9],       [   0. ,   64. ,    0. ,    0.8],       [ -30. ,   53. ,   -2. ,    1. ],       [ -53. ,   26. ,    1. ,    0.7],       [ -65. ,    2. ,    3. ,    0.5],       [ -50. ,  -33. ,   -1. ,    1.3],       [ -29. ,  -56. ,   -4. ,    1.4],       [   1. ,  -59. ,    3. ,    1.1],       [  29. ,  -50. ,    1. ,    0.9],       [  54. ,  -26. ,   -1. ,    1.5],       [  63. ,   -1. ,   -4. ,    1.4],       [  53. ,   31. ,   -2. ,    1.5],       [  27. ,   58. ,   -1. ,    0.5],       [  -5. ,   65. ,    2. ,    0.9],       [ -34. ,   60. ,   -3. ,    1.3],       [ -55. ,   36. ,    2. ,    1.1],       [ -70. ,    0. ,    0. ,    0.8],       [ -59. ,  -34. ,   -2. ,    0.9],       [ -38. ,  -54. ,    1. ,    1. ],       [   0. ,  -65. ,   -3. ,    1.2],       [  29. ,  -52. ,   -2. ,    1.5],       [  60. ,  -36. ,   -3. ,    1. ],       [  72. ,    1. ,    0. ,    1.4],       [  56. ,   36. ,    4. ,    1.3],       [  35. ,   65. ,   -5. ,    1. ],       [   4. ,   73. ,   -1. ,    0.6],       [ -33. ,   56. ,   -5. ,    1. ],       [ -64. ,   37. ,    4. ,    1.1],       [ -72. ,   -3. ,    4. ,    1.3],       [ -59. ,  -33. ,   -3. ,    1.1],       [ -38. ,  -57. ,    4. ,    1. ],       [  -5. ,  -66. ,    0. ,    1.1],       [  35. ,  -57. ,   -4. ,    0.9],       [  56. ,  -34. ,   -3. ,    1.3],       [  75. ,    4. ,   -3. ,    0.8],       [  62. ,   39. ,   -4. ,    0.6],       [  34. ,   69. ,   -3. ,    0.6],       [   2. ,   72. ,   -1. ,    0.7],       [ -37. ,   68. ,    3. ,    0.8],       [ -70. ,   41. ,   -1. ,    0.8],       [ -76. ,    1. ,   -1. ,    1.5],       [ -70. ,  -38. ,    3. ,    1.4],       [ -41. ,  -66. ,    0. ,    1. ],       [   4. ,  -73. ,    0. ,    0.6],       [  33. ,  -65. ,   -2. ,    0.7],       [  67. ,  -35. ,    3. ,    0.9],       [  75. ,    0. ,    4. ,    1.4],       [  65. ,   43. ,    1. ,    1. ],       [  42. ,   74. ,    2. ,    0.7],       [   4. ,   76. ,   -3. ,    1. ],       [ -40. ,   65. ,    3. ,    1.4],       [ -69. ,   36. ,    0. ,    1.2],       [ -82. ,   -4. ,   -4. ,    1.3],       [ -70. ,  -41. ,   -3. ,    1.4],       [ -37. ,  -70. ,   -1. ,    1.3],       [   3. ,  -82. ,    3. ,    1.4],       [  40. ,  -70. ,   -5. ,    0.7],       [  71. ,  -43. ,    2. ,    0.8],       [  87. ,    0. ,   -1. ,    0.7],       [  78. ,   44. ,   -1. ,    1.4],       [  38. ,   76. ,   -2. ,    0.8],       [  -5. ,   80. ,    4. ,    1.4],       [ -46. ,   74. ,   -1. ,    0.6],       [ -79. ,   44. ,   -1. ,    0.8],       [ -85. ,   -5. ,    4. ,    0.8],       [ -71. ,  -39. ,   -4. ,    1.2],       [ -44. ,  -71. ,   -3. ,    1. ],       [  -5. ,  -87. ,   -5. ,    0.7],       [  42. ,  -77. ,   -4. ,    1.4],       [  69. ,  -43. ,    1. ,    0.9],       [  93. ,   -1. ,   -3. ,    1.1],       [  75. ,   47. ,   -1. ,    0.5],       [  49. ,   77. ,   -3. ,    1.2],       [  -2. ,   85. ,    2. ,    0.7],       [ -49. ,   81. ,   -4. ,    1.2],       [ -83. ,   48. ,    2. ,    0.7],       [ -88. ,   -3. ,   -2. ,    1.3],       [ -79. ,  -46. ,    2. ,    1.3],       [ -45. ,  -74. ,   -3. ,    1.5],       [  -1. ,  -91. ,    0. ,    1.4],       [  41. ,  -77. ,    4. ,    1. ],       [  80. ,  -48. ,    1. ,    0.9],       [  91. ,   -5. ,   -2. ,    0.9],       [  78. ,   52. ,   -4. ,    1.1],       [  44. ,   83. ,    3. ,    1.3],       [   2. ,   92. ,    1. ,    1.1],       [ -52. ,   79. ,   -4. ,    1.3],       [ -84. ,   43. ,   -1. ,    0.7],       [ -97. ,   -1. ,   -1. ,    1.3],       [ -81. ,  -51. ,    2. ,    1.1],       [ -47. ,  -78. ,   -5. ,    1.5],       [  -1. , -100. ,    2. ,    0.7],       [  47. ,  -79. ,    4. ,    1.1],       [  79. ,  -51. ,    2. ,    1. ],       [  98. ,    1. ,    1. ,    1. ],       [  86. ,   48. ,   -5. ,    1.1],       [  48. ,   89. ,    4. ,    0.5],       [   4. ,  103. ,    1. ,    0.7],       [ -52. ,   89. ,   -4. ,    0.7],       [ -84. ,   46. ,   -4. ,    1. ],       [-103. ,    4. ,   -3. ,    1.3],       [ -90. ,  -48. ,   -4. ,    0.5],       [ -51. ,  -89. ,    0. ,    1.2],       [  -1. , -102. ,    3. ,    1.1],       [  45. ,  -88. ,   -1. ,    1.2],       [  83. ,  -49. ,    1. ,    1.2]])
        basis0 = BSplineBasis(5, np.array([ -1.6,  -0.9,   0. ,   0. ,   0. ,   1.4,   2.3,   3.1,   4.2,   5. ,   6.1,   7. ,   8.4,
         9.1,  10. ,  10. ,  10. ,  11.4,  12.3]),1)
        basis1 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.7,  2.2,  3. ,  4. ,  4. ,  4. ,  4. ,  4. ,  4. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [6.974]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 20)
        surf2.insert_knot(0, [8.052]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [7.272]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [2.728]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(1, [1.972]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [2.906]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 18)
        surf2.insert_knot(1, [2.276]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 21)
        surf2.insert_knot(1, [1.102]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 25)
        surf2.insert_knot(1, [1.362]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 30)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p655_rational_C1_periodic(self):
        controlpoints = np.array([[  46. ,    2. ,    4. ,    0.9],       [  45. ,   22. ,    1. ,    1.3],       [  27. ,   42. ,   -5. ,    0.8],       [  12. ,   45. ,    0. ,    0.8],       [ -11. ,   50. ,    4. ,    0.6],       [ -34. ,   35. ,    3. ,    1.2],       [ -45. ,   25. ,   -2. ,    0.6],       [ -50. ,   -3. ,    1. ,    0.9],       [ -47. ,  -22. ,   -4. ,    0.6],       [ -34. ,  -43. ,   -3. ,    0.9],       [  -9. ,  -50. ,    2. ,    0.6],       [   8. ,  -45. ,   -2. ,    0.9],       [  32. ,  -44. ,   -4. ,    1.4],       [  40. ,  -22. ,   -1. ,    0.6],       [  52. ,   -2. ,    0. ,    1.4],       [  47. ,   21. ,    4. ,    1.1],       [  36. ,   46. ,   -5. ,    0.7],       [  14. ,   60. ,   -2. ,    0.6],       [ -11. ,   53. ,   -1. ,    0.7],       [ -38. ,   45. ,   -4. ,    1.3],       [ -56. ,   20. ,    4. ,    0.9],       [ -54. ,    2. ,   -1. ,    1.4],       [ -50. ,  -21. ,   -4. ,    0.7],       [ -35. ,  -41. ,   -3. ,    1.2],       [ -18. ,  -58. ,    1. ,    1.3],       [  16. ,  -60. ,    3. ,    1. ],       [  37. ,  -41. ,   -5. ,    1.2],       [  53. ,  -23. ,    3. ,    1.3],       [  65. ,   -3. ,   -4. ,    1.4],       [  58. ,   32. ,    3. ,    0.7],       [  43. ,   45. ,   -3. ,    1.4],       [  11. ,   57. ,   -4. ,    0.6],       [ -17. ,   64. ,    2. ,    0.8],       [ -43. ,   50. ,   -5. ,    1.4],       [ -60. ,   28. ,   -1. ,    1.3],       [ -61. ,    0. ,    3. ,    1.5],       [ -59. ,  -26. ,    0. ,    1.5],       [ -42. ,  -52. ,   -4. ,    0.8],       [ -13. ,  -64. ,    3. ,    1.4],       [  18. ,  -59. ,    1. ,    1.2],       [  42. ,  -49. ,   -3. ,    1.3],       [  60. ,  -28. ,   -4. ,    0.7],       [  66. ,    2. ,    0. ,    0.9],       [  64. ,   31. ,   -1. ,    0.5],       [  44. ,   54. ,   -3. ,    1.4],       [  11. ,   66. ,    0. ,    1.4],       [ -19. ,   74. ,   -1. ,    0.7],       [ -42. ,   50. ,   -5. ,    0.6],       [ -62. ,   32. ,    2. ,    1. ],       [ -75. ,   -1. ,    3. ,    1.4],       [ -70. ,  -36. ,   -4. ,    1.3],       [ -43. ,  -59. ,    0. ,    0.6],       [ -19. ,  -66. ,   -5. ,    0.6],       [  16. ,  -71. ,   -5. ,    1.2],       [  49. ,  -55. ,   -4. ,    1.3],       [  69. ,  -29. ,   -3. ,    1.4],       [  81. ,    1. ,   -5. ,    0.6],       [  69. ,   31. ,    0. ,    1.3],       [  51. ,   58. ,   -1. ,    0.8],       [  21. ,   77. ,    0. ,    0.9],       [ -14. ,   78. ,    2. ,    0.6],       [ -50. ,   63. ,   -2. ,    1.5],       [ -68. ,   37. ,    1. ,    1.1],       [ -75. ,   -3. ,    2. ,    0.9],       [ -69. ,  -31. ,    0. ,    1.3],       [ -51. ,  -66. ,   -5. ,    1.5],       [ -14. ,  -77. ,   -5. ,    0.6],       [  16. ,  -80. ,   -3. ,    0.6],       [  49. ,  -65. ,    2. ,    1.5],       [  72. ,  -32. ,   -3. ,    0.8],       [  88. ,   -3. ,   -1. ,    1.2],       [  74. ,   41. ,    0. ,    1. ],       [  49. ,   70. ,    1. ,    1.3],       [  22. ,   88. ,   -4. ,    1.2],       [ -15. ,   80. ,   -1. ,    1.4],       [ -58. ,   69. ,   -5. ,    0.5],       [ -79. ,   33. ,    1. ,    1.1],       [ -88. ,   -4. ,    1. ,    0.9],       [ -78. ,  -40. ,    2. ,    1.1],       [ -55. ,  -68. ,   -1. ,    0.7],       [ -16. ,  -84. ,   -1. ,    0.9],       [  19. ,  -87. ,    1. ,    1.3],       [  51. ,  -72. ,   -5. ,    0.6],       [  79. ,  -37. ,   -1. ,    1. ],       [  90. ,   -2. ,    1. ,    0.8],       [  83. ,   35. ,    4. ,    1.1],       [  61. ,   67. ,    0. ,    0.5],       [  17. ,   88. ,    1. ,    0.8],       [ -22. ,   91. ,    1. ,    1.4],       [ -58. ,   68. ,    2. ,    0.8],       [ -80. ,   43. ,   -2. ,    1.2],       [ -94. ,    4. ,    2. ,    0.6],       [ -87. ,  -43. ,    2. ,    1.2],       [ -61. ,  -71. ,   -5. ,    0.7],       [ -24. ,  -87. ,   -4. ,    0.5],       [  15. ,  -91. ,   -2. ,    1.2],       [  54. ,  -71. ,   -5. ,    1.4],       [  80. ,  -42. ,   -1. ,    1. ],       [ 103. ,    0. ,   -2. ,    0.9],       [  88. ,   44. ,   -5. ,    1. ],       [  63. ,   74. ,   -3. ,    1.2],       [  19. ,   94. ,    0. ,    1. ],       [ -26. ,   98. ,    1. ,    0.6],       [ -59. ,   75. ,    3. ,    1.2],       [ -88. ,   40. ,    2. ,    0.9],       [-102. ,    1. ,    1. ,    0.6],       [ -87. ,  -48. ,    1. ,    0.8],       [ -61. ,  -82. ,   -5. ,    0.5],       [ -21. , -102. ,    2. ,    1.4],       [  18. , -100. ,    4. ,    1.1],       [  62. ,  -78. ,   -3. ,    1. ],       [  88. ,  -41. ,   -3. ,    1.4],       [  50. ,    2. ,   11. ,    0.7],       [  43. ,   18. ,    8. ,    1.3],       [  34. ,   41. ,   12. ,    0.5],       [  14. ,   51. ,   12. ,    1.2],       [ -15. ,   48. ,    3. ,    1.1],       [ -32. ,   40. ,    8. ,    1.2],       [ -49. ,   23. ,    6. ,    1.4],       [ -47. ,   -3. ,    6. ,    1.3],       [ -45. ,  -19. ,   10. ,    1.5],       [ -30. ,  -38. ,   11. ,    1. ],       [  -9. ,  -45. ,   12. ,    1.4],       [  10. ,  -52. ,    8. ,    1.1],       [  35. ,  -36. ,    6. ,    1.3],       [  48. ,  -18. ,    5. ,    1.5],       [  53. ,    3. ,   10. ,    1.2],       [  51. ,   21. ,    5. ,    1.5],       [  33. ,   47. ,    3. ,    1.3],       [   9. ,   54. ,   10. ,    0.5],       [  -9. ,   56. ,    4. ,    1.2],       [ -32. ,   46. ,    7. ,    1.1],       [ -48. ,   26. ,   11. ,    1.5],       [ -57. ,   -2. ,    8. ,    1. ],       [ -50. ,  -27. ,    4. ,    1.1],       [ -37. ,  -40. ,    5. ,    0.7],       [ -10. ,  -52. ,    9. ,    1. ],       [   8. ,  -57. ,    8. ,    1. ],       [  38. ,  -49. ,    9. ,    1.4],       [  47. ,  -21. ,   10. ,    1.2],       [  66. ,   -2. ,    3. ,    1.1],       [  62. ,   26. ,    5. ,    0.9],       [  35. ,   47. ,   10. ,    0.6],       [  13. ,   63. ,    9. ,    0.6],       [ -12. ,   58. ,    6. ,    0.7],       [ -41. ,   54. ,    9. ,    0.9],       [ -60. ,   30. ,    5. ,    1.2],       [ -63. ,    1. ,    4. ,    0.9],       [ -60. ,  -27. ,    3. ,    1.3],       [ -36. ,  -51. ,    5. ,    1.2],       [ -17. ,  -68. ,    7. ,    1.1],       [  10. ,  -67. ,    7. ,    0.6],       [  38. ,  -46. ,   11. ,    1.2],       [  53. ,  -24. ,    9. ,    0.7],       [  75. ,   -3. ,   11. ,    1.1],       [  66. ,   28. ,    9. ,    1. ],       [  46. ,   53. ,    6. ,    1.5],       [  19. ,   66. ,    9. ,    1.1],       [ -20. ,   71. ,   10. ,    1.5],       [ -42. ,   54. ,   10. ,    0.7],       [ -60. ,   30. ,    9. ,    0.6],       [ -75. ,   -3. ,    5. ,    0.6],       [ -69. ,  -31. ,    7. ,    0.7],       [ -41. ,  -61. ,   10. ,    1. ],       [ -19. ,  -68. ,    3. ,    1.3],       [  18. ,  -71. ,   12. ,    0.6],       [  46. ,  -60. ,   11. ,    1. ],       [  61. ,  -36. ,    5. ,    1.2],       [  75. ,   -4. ,    8. ,    1.3],       [  72. ,   29. ,    9. ,    0.7],       [  51. ,   60. ,   11. ,    1.3],       [  14. ,   74. ,    8. ,    1.1],       [ -19. ,   75. ,    6. ,    1.4],       [ -54. ,   64. ,    5. ,    0.8],       [ -71. ,   33. ,   11. ,    1.2],       [ -79. ,    3. ,    8. ,    1. ],       [ -72. ,  -36. ,    9. ,    1.3],       [ -49. ,  -61. ,    9. ,    1.2],       [ -18. ,  -75. ,    3. ,    1. ],       [  17. ,  -76. ,    8. ,    0.7],       [  48. ,  -62. ,    7. ,    0.9],       [  73. ,  -39. ,    9. ,    1.4],       [  85. ,    3. ,   10. ,    0.9],       [  76. ,   36. ,    3. ,    0.8],       [  54. ,   64. ,   12. ,    1.3],       [  14. ,   83. ,    6. ,    0.8],       [ -23. ,   81. ,    9. ,    1.4],       [ -56. ,   66. ,    6. ,    1.4],       [ -80. ,   36. ,    9. ,    0.7],       [ -83. ,   -5. ,    6. ,    0.9],       [ -79. ,  -34. ,   10. ,    0.9],       [ -53. ,  -70. ,    4. ,    0.9],       [ -23. ,  -87. ,   10. ,    1.3],       [  21. ,  -86. ,    6. ,    1.2],       [  54. ,  -63. ,   12. ,    1.3],       [  77. ,  -39. ,   11. ,    0.9],       [  97. ,   -3. ,    3. ,    1.3],       [  84. ,   44. ,    9. ,    1. ],       [  58. ,   68. ,   12. ,    1.3],       [  19. ,   94. ,   12. ,    1.2],       [ -23. ,   87. ,    7. ,    1.2],       [ -63. ,   67. ,    3. ,    1.4],       [ -89. ,   40. ,    8. ,    0.6],       [ -97. ,   -5. ,    5. ,    1.2],       [ -85. ,  -41. ,    4. ,    0.5],       [ -55. ,  -75. ,   12. ,    0.9],       [ -18. ,  -88. ,    6. ,    1.2],       [  25. ,  -90. ,   12. ,    1.3],       [  60. ,  -69. ,    7. ,    1.2],       [  88. ,  -38. ,   12. ,    1.4],       [  99. ,    2. ,   12. ,    0.7],       [  87. ,   44. ,    4. ,    1.1],       [  62. ,   76. ,    9. ,    1.3],       [  25. ,   92. ,    9. ,    1.2],       [ -22. ,  100. ,    6. ,    0.6],       [ -60. ,   81. ,   12. ,    0.9],       [ -94. ,   45. ,   12. ,    1.3],       [ -99. ,   -1. ,    4. ,    1. ],       [ -91. ,  -44. ,    4. ,    0.5],       [ -67. ,  -76. ,   11. ,    1.2],       [ -21. ,  -99. ,    3. ,    1.1],       [  26. ,  -99. ,    3. ,    0.8],       [  66. ,  -75. ,    3. ,    0.8],       [  85. ,  -47. ,    4. ,    1.2],       [  45. ,   -2. ,   15. ,    1.4],       [  42. ,   23. ,   14. ,    0.8],       [  36. ,   40. ,   17. ,    0.7],       [  13. ,   52. ,   12. ,    1.1],       [  -7. ,   49. ,   14. ,    1.4],       [ -32. ,   39. ,   11. ,    1.1],       [ -44. ,   19. ,   14. ,    1.1],       [ -50. ,   -1. ,   17. ,    1.1],       [ -44. ,  -22. ,   20. ,    0.9],       [ -31. ,  -44. ,   11. ,    0.8],       [ -14. ,  -47. ,   13. ,    1.3],       [  12. ,  -46. ,   17. ,    0.9],       [  32. ,  -43. ,   16. ,    0.7],       [  46. ,  -21. ,   15. ,    0.8],       [  58. ,    2. ,   12. ,    1.2],       [  54. ,   19. ,   12. ,    1.3],       [  35. ,   43. ,   11. ,    0.8],       [   8. ,   57. ,   17. ,    0.7],       [ -11. ,   57. ,   12. ,    1.2],       [ -41. ,   43. ,   16. ,    1.1],       [ -53. ,   22. ,   14. ,    0.8],       [ -55. ,    2. ,   11. ,    0.9],       [ -49. ,  -22. ,   14. ,    1.2],       [ -35. ,  -47. ,   14. ,    1.4],       [ -16. ,  -53. ,   16. ,    1.5],       [  12. ,  -58. ,   16. ,    0.6],       [  37. ,  -40. ,   16. ,    1.3],       [  47. ,  -23. ,   19. ,    1.1],       [  67. ,   -4. ,   14. ,    1. ],       [  61. ,   26. ,   17. ,    1.4],       [  37. ,   50. ,   15. ,    1.4],       [  15. ,   64. ,   18. ,    0.9],       [ -18. ,   63. ,   19. ,    1. ],       [ -38. ,   49. ,   15. ,    0.8],       [ -58. ,   29. ,   15. ,    0.7],       [ -62. ,    2. ,   14. ,    0.8],       [ -61. ,  -27. ,   16. ,    1.5],       [ -41. ,  -51. ,   13. ,    1. ],       [ -11. ,  -62. ,   17. ,    0.6],       [   9. ,  -59. ,   15. ,    0.8],       [  38. ,  -49. ,   13. ,    1.1],       [  59. ,  -27. ,   17. ,    0.9],       [  74. ,   -3. ,   17. ,    1. ],       [  67. ,   30. ,   13. ,    1. ],       [  46. ,   54. ,   16. ,    0.8],       [  20. ,   68. ,   20. ,    0.6],       [ -13. ,   68. ,   19. ,    1. ],       [ -42. ,   55. ,   11. ,    1.4],       [ -63. ,   29. ,   18. ,    1.2],       [ -76. ,   -4. ,   11. ,    1.3],       [ -69. ,  -30. ,   17. ,    1. ],       [ -44. ,  -58. ,   12. ,    0.6],       [ -14. ,  -68. ,   17. ,    1.3],       [  13. ,  -69. ,   15. ,    0.6],       [  42. ,  -61. ,   17. ,    0.7],       [  63. ,  -28. ,   17. ,    0.6],       [  74. ,    2. ,   14. ,    0.9],       [  72. ,   35. ,   14. ,    1.1],       [  51. ,   64. ,   19. ,    0.7],       [  14. ,   71. ,   14. ,    1. ],       [ -18. ,   74. ,   18. ,    0.6],       [ -49. ,   56. ,   14. ,    1.1],       [ -74. ,   33. ,   13. ,    1. ],       [ -81. ,   -1. ,   12. ,    1.5],       [ -74. ,  -39. ,   16. ,    0.7],       [ -50. ,  -66. ,   11. ,    1.4],       [ -16. ,  -78. ,   15. ,    1.1],       [  21. ,  -82. ,   17. ,    1.1],       [  44. ,  -60. ,   15. ,    1.5],       [  75. ,  -37. ,   11. ,    0.6],       [  88. ,    0. ,   12. ,    1.2],       [  77. ,   40. ,   14. ,    0.6],       [  52. ,   71. ,   14. ,    0.7],       [  18. ,   85. ,   11. ,    1.3],       [ -17. ,   88. ,   11. ,    0.8],       [ -53. ,   68. ,   17. ,    0.6],       [ -82. ,   36. ,   17. ,    1.2],       [ -90. ,    2. ,   20. ,    0.8],       [ -76. ,  -38. ,   20. ,    0.8],       [ -57. ,  -71. ,   12. ,    1.4],       [ -19. ,  -85. ,   14. ,    1.5],       [  17. ,  -86. ,   19. ,    0.6],       [  53. ,  -68. ,   17. ,    1.1],       [  77. ,  -36. ,   16. ,    1.4],       [  89. ,    0. ,   16. ,    1.4],       [  81. ,   40. ,   20. ,    0.9],       [  58. ,   69. ,   15. ,    0.9],       [  24. ,   93. ,   17. ,    1.5],       [ -25. ,   87. ,   13. ,    1.2],       [ -61. ,   70. ,   14. ,    1.3],       [ -83. ,   42. ,   18. ,    0.6],       [ -89. ,   -5. ,   20. ,    1.2],       [ -83. ,  -40. ,   17. ,    1.4],       [ -62. ,  -78. ,   11. ,    1.2],       [ -21. ,  -87. ,   19. ,    1.4],       [  22. ,  -93. ,   11. ,    0.7],       [  55. ,  -76. ,   13. ,    0.6],       [  80. ,  -45. ,   13. ,    1.3],       [  99. ,    3. ,   12. ,    0.7],       [  89. ,   41. ,   14. ,    0.9],       [  58. ,   74. ,   13. ,    0.9],       [  20. ,   96. ,   18. ,    1.1],       [ -23. ,   98. ,   20. ,    0.7],       [ -63. ,   80. ,   11. ,    0.6],       [ -94. ,   42. ,   14. ,    1.1],       [ -97. ,    2. ,   17. ,    0.8],       [ -93. ,  -42. ,   17. ,    1.1],       [ -59. ,  -75. ,   13. ,    0.9],       [ -25. ,  -98. ,   18. ,    0.7],       [  23. ,  -93. ,   12. ,    0.9],       [  61. ,  -82. ,   19. ,    0.6],       [  90. ,  -43. ,   13. ,    1.3],       [  51. ,    1. ,   27. ,    0.8],       [  41. ,   26. ,   26. ,    0.8],       [  28. ,   42. ,   20. ,    0.6],       [  14. ,   48. ,   25. ,    0.5],       [ -12. ,   50. ,   26. ,    1.4],       [ -35. ,   42. ,   21. ,    0.6],       [ -47. ,   26. ,   25. ,    0.7],       [ -53. ,    1. ,   20. ,    0.8],       [ -44. ,  -25. ,   28. ,    1.3],       [ -29. ,  -42. ,   28. ,    1.4],       [ -12. ,  -50. ,   26. ,    1.1],       [   6. ,  -48. ,   23. ,    1.5],       [  35. ,  -41. ,   21. ,    1.5],       [  43. ,  -18. ,   20. ,    1.5],       [  56. ,   -3. ,   28. ,    1.4],       [  49. ,   27. ,   28. ,    1.3],       [  34. ,   43. ,   21. ,    1.4],       [  11. ,   58. ,   21. ,    1.1],       [ -10. ,   53. ,   19. ,    1.1],       [ -33. ,   47. ,   22. ,    1.4],       [ -56. ,   26. ,   23. ,    0.9],       [ -60. ,   -4. ,   25. ,    0.8],       [ -52. ,  -29. ,   21. ,    0.9],       [ -35. ,  -44. ,   20. ,    0.7],       [ -17. ,  -59. ,   27. ,    0.9],       [  15. ,  -54. ,   24. ,    0.9],       [  35. ,  -42. ,   25. ,    0.9],       [  51. ,  -30. ,   28. ,    1.2],       [  66. ,   -4. ,   26. ,    1.5],       [  60. ,   27. ,   23. ,    1.3],       [  41. ,   54. ,   20. ,    1.1],       [  15. ,   65. ,   21. ,    1.4],       [ -18. ,   58. ,   23. ,    1.2],       [ -45. ,   54. ,   25. ,    0.8],       [ -62. ,   32. ,   21. ,    0.7],       [ -61. ,    2. ,   28. ,    0.5],       [ -60. ,  -31. ,   28. ,    1.4],       [ -45. ,  -54. ,   28. ,    1.3],       [ -14. ,  -64. ,   26. ,    1. ],       [   9. ,  -66. ,   24. ,    0.9],       [  36. ,  -48. ,   28. ,    1.3],       [  53. ,  -24. ,   22. ,    0.6],       [  75. ,   -1. ,   23. ,    0.7],       [  64. ,   27. ,   28. ,    1.2],       [  40. ,   58. ,   21. ,    0.7],       [  11. ,   64. ,   21. ,    1.1],       [ -20. ,   70. ,   20. ,    1. ],       [ -45. ,   56. ,   20. ,    1.2],       [ -63. ,   31. ,   21. ,    0.9],       [ -77. ,   -2. ,   19. ,    1.3],       [ -63. ,  -29. ,   25. ,    0.8],       [ -42. ,  -61. ,   27. ,    1.1],       [ -14. ,  -70. ,   26. ,    0.8],       [  19. ,  -69. ,   23. ,    1.3],       [  44. ,  -56. ,   26. ,    1.1],       [  62. ,  -30. ,   20. ,    1.5],       [  82. ,    1. ,   25. ,    1.2],       [  72. ,   33. ,   22. ,    1.5],       [  45. ,   58. ,   27. ,    0.5],       [  15. ,   78. ,   28. ,    1.3],       [ -23. ,   77. ,   20. ,    0.6],       [ -46. ,   59. ,   26. ,    0.7],       [ -68. ,   35. ,   24. ,    1.3],       [ -76. ,   -1. ,   26. ,    0.7],       [ -67. ,  -35. ,   21. ,    0.7],       [ -54. ,  -64. ,   26. ,    0.8],       [ -20. ,  -74. ,   21. ,    0.9],       [  22. ,  -76. ,   28. ,    1.1],       [  53. ,  -65. ,   19. ,    0.5],       [  69. ,  -32. ,   20. ,    0.6],       [  90. ,    2. ,   21. ,    0.5],       [  73. ,   32. ,   20. ,    1.2],       [  53. ,   70. ,   26. ,    1.1],       [  15. ,   80. ,   21. ,    0.5],       [ -19. ,   81. ,   20. ,    0.6],       [ -51. ,   68. ,   20. ,    1.2],       [ -73. ,   34. ,   24. ,    0.8],       [ -88. ,   -3. ,   27. ,    1.3],       [ -81. ,  -34. ,   21. ,    1.2],       [ -57. ,  -68. ,   22. ,    0.7],       [ -22. ,  -85. ,   23. ,    1. ],       [  20. ,  -84. ,   27. ,    1.1],       [  53. ,  -65. ,   24. ,    0.7],       [  73. ,  -33. ,   24. ,    1.2],       [  89. ,   -3. ,   23. ,    1.5],       [  83. ,   40. ,   22. ,    1.1],       [  54. ,   70. ,   26. ,    1.4],       [  18. ,   88. ,   26. ,    1.5],       [ -18. ,   94. ,   19. ,    0.8],       [ -55. ,   73. ,   27. ,    0.8],       [ -85. ,   40. ,   24. ,    1.3],       [ -89. ,    1. ,   26. ,    1.4],       [ -84. ,  -36. ,   22. ,    0.7],       [ -54. ,  -72. ,   26. ,    0.9],       [ -17. ,  -88. ,   20. ,    1. ],       [  24. ,  -87. ,   24. ,    0.8],       [  56. ,  -74. ,   27. ,    0.6],       [  82. ,  -43. ,   28. ,    0.6],       [  96. ,    3. ,   24. ,    1.2],       [  92. ,   41. ,   27. ,    0.6],       [  63. ,   79. ,   23. ,    1.1],       [  17. ,   99. ,   20. ,    0.7],       [ -27. ,   97. ,   27. ,    0.5],       [ -65. ,   74. ,   26. ,    1. ],       [ -89. ,   43. ,   26. ,    0.8],       [-103. ,   -3. ,   23. ,    1.1],       [ -89. ,  -49. ,   24. ,    0.8],       [ -60. ,  -81. ,   21. ,    0.8],       [ -23. ,  -98. ,   19. ,    1.2],       [  23. ,  -95. ,   20. ,    1.1],       [  66. ,  -83. ,   28. ,    1.5],       [  89. ,  -42. ,   23. ,    1.2],       [  49. ,    4. ,   27. ,    1.5],       [  42. ,   17. ,   32. ,    0.8],       [  29. ,   39. ,   30. ,    1.3],       [  15. ,   50. ,   29. ,    0.9],       [  -7. ,   44. ,   27. ,    0.9],       [ -36. ,   42. ,   31. ,    1.2],       [ -43. ,   18. ,   28. ,    0.8],       [ -52. ,    2. ,   28. ,    0.9],       [ -44. ,  -25. ,   27. ,    0.5],       [ -27. ,  -40. ,   31. ,    1.1],       [  -7. ,  -44. ,   27. ,    1.3],       [  12. ,  -50. ,   30. ,    0.7],       [  29. ,  -36. ,   32. ,    0.8],       [  40. ,  -27. ,   29. ,    1.4],       [  53. ,   -4. ,   34. ,    0.8],       [  54. ,   21. ,   34. ,    1.1],       [  34. ,   45. ,   36. ,    1.4],       [  11. ,   57. ,   36. ,    1.4],       [ -11. ,   53. ,   34. ,    1. ],       [ -38. ,   46. ,   29. ,    1.3],       [ -54. ,   27. ,   30. ,    1.3],       [ -55. ,   -5. ,   27. ,    1.3],       [ -56. ,  -21. ,   31. ,    0.8],       [ -40. ,  -48. ,   31. ,    0.5],       [ -17. ,  -55. ,   27. ,    1.4],       [  13. ,  -59. ,   27. ,    1.5],       [  36. ,  -47. ,   35. ,    1.3],       [  55. ,  -26. ,   34. ,    1.3],       [  67. ,    4. ,   30. ,    0.7],       [  57. ,   31. ,   35. ,    1.4],       [  43. ,   54. ,   32. ,    1. ],       [  17. ,   61. ,   35. ,    1.2],       [ -13. ,   58. ,   34. ,    0.8],       [ -43. ,   53. ,   30. ,    1.5],       [ -58. ,   27. ,   36. ,    1. ],       [ -60. ,   -1. ,   28. ,    0.9],       [ -55. ,  -28. ,   30. ,    0.9],       [ -43. ,  -49. ,   28. ,    1.1],       [ -18. ,  -66. ,   31. ,    1.1],       [  10. ,  -66. ,   36. ,    0.7],       [  41. ,  -53. ,   36. ,    1.1],       [  60. ,  -30. ,   31. ,    0.9],       [  73. ,    3. ,   31. ,    0.7],       [  67. ,   26. ,   34. ,    1. ],       [  39. ,   52. ,   29. ,    0.6],       [  20. ,   70. ,   32. ,    1.1],       [ -16. ,   72. ,   31. ,    0.9],       [ -50. ,   56. ,   35. ,    1.1],       [ -66. ,   28. ,   32. ,    1.4],       [ -72. ,   -1. ,   28. ,    0.9],       [ -66. ,  -33. ,   31. ,    1.1],       [ -41. ,  -59. ,   29. ,    1.3],       [ -18. ,  -75. ,   30. ,    1.1],       [  15. ,  -70. ,   31. ,    1.3],       [  44. ,  -53. ,   33. ,    1.4],       [  60. ,  -27. ,   31. ,    0.5],       [  74. ,    1. ,   35. ,    1.2],       [  67. ,   38. ,   35. ,    1.3],       [  46. ,   61. ,   27. ,    0.6],       [  13. ,   72. ,   31. ,    1.3],       [ -22. ,   77. ,   30. ,    0.9],       [ -47. ,   64. ,   35. ,    1. ],       [ -66. ,   33. ,   35. ,    0.9],       [ -80. ,    4. ,   28. ,    0.8],       [ -74. ,  -38. ,   27. ,    0.9],       [ -45. ,  -59. ,   31. ,    1.2],       [ -17. ,  -74. ,   29. ,    0.9],       [  17. ,  -77. ,   33. ,    0.6],       [  49. ,  -61. ,   35. ,    1. ],       [  74. ,  -38. ,   29. ,    0.5],       [  88. ,    2. ,   33. ,    0.6],       [  77. ,   33. ,   32. ,    0.6],       [  56. ,   71. ,   32. ,    0.7],       [  16. ,   80. ,   29. ,    1.1],       [ -17. ,   88. ,   36. ,    0.8],       [ -51. ,   68. ,   29. ,    1.1],       [ -76. ,   34. ,   31. ,    0.6],       [ -82. ,    0. ,   34. ,    0.7],       [ -78. ,  -40. ,   28. ,    1.1],       [ -55. ,  -67. ,   35. ,    1. ],       [ -19. ,  -80. ,   32. ,    1.4],       [  20. ,  -84. ,   35. ,    1. ],       [  53. ,  -72. ,   36. ,    1. ],       [  79. ,  -39. ,   36. ,    1.2],       [  91. ,    0. ,   36. ,    0.5],       [  78. ,   35. ,   36. ,    1. ],       [  59. ,   68. ,   36. ,    1. ],       [  18. ,   91. ,   30. ,    1.4],       [ -24. ,   86. ,   33. ,    1. ],       [ -57. ,   72. ,   35. ,    0.5],       [ -81. ,   41. ,   32. ,    1.3],       [ -98. ,    3. ,   28. ,    1.4],       [ -86. ,  -43. ,   27. ,    0.6],       [ -63. ,  -74. ,   30. ,    1.1],       [ -18. ,  -86. ,   28. ,    1.3],       [  24. ,  -93. ,   34. ,    0.6],       [  57. ,  -76. ,   35. ,    0.9],       [  84. ,  -45. ,   30. ,    1.1],       [ 103. ,    1. ,   27. ,    0.8],       [  89. ,   41. ,   29. ,    0.7],       [  59. ,   74. ,   27. ,    1.4],       [  25. ,   96. ,   28. ,    1.4],       [ -24. ,   94. ,   27. ,    0.7],       [ -62. ,   76. ,   31. ,    1.1],       [ -87. ,   43. ,   28. ,    0.6],       [ -98. ,   -4. ,   33. ,    1.4],       [ -92. ,  -45. ,   29. ,    0.8],       [ -65. ,  -81. ,   29. ,    1.2],       [ -18. ,  -98. ,   27. ,    0.7],       [  20. , -100. ,   28. ,    1.4],       [  57. ,  -78. ,   30. ,    0.8],       [  89. ,  -42. ,   33. ,    1.2],       [  45. ,    0. ,   41. ,    1.4],       [  42. ,   17. ,   42. ,    1.1],       [  33. ,   43. ,   35. ,    1.1],       [   8. ,   53. ,   40. ,    1.2],       [ -12. ,   47. ,   42. ,    1.3],       [ -28. ,   35. ,   42. ,    1.1],       [ -42. ,   24. ,   43. ,    1.2],       [ -53. ,    2. ,   44. ,    1.1],       [ -50. ,  -23. ,   38. ,    0.8],       [ -35. ,  -41. ,   40. ,    0.8],       [  -9. ,  -51. ,   37. ,    0.6],       [  10. ,  -53. ,   41. ,    0.6],       [  34. ,  -35. ,   40. ,    0.6],       [  44. ,  -24. ,   44. ,    1. ],       [  61. ,    4. ,   43. ,    0.9],       [  49. ,   29. ,   36. ,    1.4],       [  37. ,   40. ,   41. ,    0.7],       [  15. ,   57. ,   41. ,    1.1],       [ -13. ,   60. ,   35. ,    0.6],       [ -37. ,   41. ,   37. ,    1.4],       [ -54. ,   26. ,   37. ,    0.5],       [ -62. ,    0. ,   41. ,    1.1],       [ -51. ,  -22. ,   38. ,    0.5],       [ -33. ,  -49. ,   43. ,    0.7],       [ -12. ,  -60. ,   44. ,    0.7],       [  11. ,  -53. ,   44. ,    0.9],       [  33. ,  -47. ,   43. ,    0.8],       [  48. ,  -30. ,   43. ,    1.4],       [  64. ,   -2. ,   38. ,    0.8],       [  55. ,   26. ,   42. ,    1.4],       [  38. ,   54. ,   38. ,    1.4],       [  11. ,   60. ,   43. ,    1.2],       [ -17. ,   58. ,   37. ,    1.3],       [ -41. ,   50. ,   35. ,    1.1],       [ -60. ,   31. ,   35. ,    0.6],       [ -60. ,   -3. ,   40. ,    1.4],       [ -62. ,  -29. ,   43. ,    0.5],       [ -39. ,  -52. ,   43. ,    1.4],       [ -14. ,  -60. ,   37. ,    1.1],       [  17. ,  -62. ,   44. ,    0.5],       [  35. ,  -46. ,   38. ,    1.4],       [  59. ,  -31. ,   40. ,    0.6],       [  67. ,   -3. ,   40. ,    1.3],       [  65. ,   34. ,   42. ,    0.7],       [  42. ,   54. ,   44. ,    0.9],       [  13. ,   65. ,   40. ,    1.3],       [ -16. ,   73. ,   39. ,    1.3],       [ -50. ,   57. ,   37. ,    0.6],       [ -65. ,   27. ,   39. ,    1. ],       [ -69. ,   -3. ,   41. ,    0.6],       [ -65. ,  -30. ,   37. ,    1.1],       [ -43. ,  -54. ,   38. ,    1. ],       [ -21. ,  -73. ,   38. ,    1.1],       [  15. ,  -72. ,   42. ,    0.8],       [  42. ,  -54. ,   40. ,    1.3],       [  67. ,  -27. ,   43. ,    1. ],       [  75. ,    2. ,   40. ,    1.3],       [  69. ,   38. ,   38. ,    1.2],       [  50. ,   62. ,   44. ,    1.1],       [  19. ,   74. ,   37. ,    0.7],       [ -16. ,   80. ,   41. ,    1.3],       [ -53. ,   60. ,   42. ,    1.3],       [ -75. ,   35. ,   36. ,    1.3],       [ -80. ,    4. ,   44. ,    0.7],       [ -74. ,  -36. ,   44. ,    0.5],       [ -46. ,  -59. ,   40. ,    1.2],       [ -22. ,  -82. ,   44. ,    0.9],       [  18. ,  -80. ,   39. ,    1.3],       [  45. ,  -60. ,   43. ,    0.9],       [  74. ,  -33. ,   44. ,    1.1],       [  89. ,    1. ,   36. ,    1.1],       [  81. ,   38. ,   38. ,    1. ],       [  57. ,   65. ,   41. ,    1.4],       [  20. ,   87. ,   40. ,    1.2],       [ -16. ,   84. ,   43. ,    0.8],       [ -55. ,   65. ,   36. ,    1.2],       [ -75. ,   41. ,   41. ,    1.4],       [ -85. ,   -4. ,   40. ,    1.1],       [ -75. ,  -40. ,   36. ,    1.2],       [ -55. ,  -69. ,   39. ,    0.6],       [ -21. ,  -80. ,   42. ,    0.8],       [  18. ,  -85. ,   44. ,    1.2],       [  56. ,  -72. ,   36. ,    0.9],       [  81. ,  -40. ,   43. ,    1.4],       [  96. ,   -3. ,   42. ,    0.8],       [  85. ,   35. ,   41. ,    0.8],       [  62. ,   73. ,   36. ,    1.1],       [  18. ,   93. ,   41. ,    0.8],       [ -20. ,   94. ,   41. ,    0.6],       [ -62. ,   67. ,   36. ,    0.7],       [ -80. ,   39. ,   35. ,    0.6],       [ -96. ,    1. ,   35. ,    1.1],       [ -85. ,  -45. ,   36. ,    0.6],       [ -57. ,  -74. ,   38. ,    0.9],       [ -24. ,  -90. ,   44. ,    0.7],       [  20. ,  -95. ,   44. ,    1.3],       [  55. ,  -70. ,   39. ,    1.2],       [  81. ,  -39. ,   41. ,    1.2],       [ 101. ,   -5. ,   40. ,    1. ],       [  87. ,   47. ,   44. ,    1.2],       [  62. ,   79. ,   36. ,    1.5],       [  20. ,   93. ,   39. ,    1. ],       [ -18. ,   95. ,   43. ,    0.5],       [ -60. ,   81. ,   38. ,    1.3],       [ -87. ,   39. ,   37. ,    1. ],       [-102. ,   -2. ,   36. ,    1.1],       [ -86. ,  -43. ,   40. ,    1.4],       [ -67. ,  -74. ,   41. ,    0.8],       [ -18. , -102. ,   37. ,    0.7],       [  18. , -100. ,   40. ,    0.6],       [  62. ,  -76. ,   36. ,    1.1],       [  94. ,  -40. ,   36. ,    1.2]])
        basis0 = BSplineBasis(6, np.array([ -2.3,  -0.7,   0. ,   0. ,   0. ,   0. ,   1.2,   2.3,   2.6,   3.6,   5.3,   5.7,   6.7,
         8.4,   8.7,  10.3,  11. ,  11. ,  11. ,  11. ,  12.2,  13.3]),1)
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.6,  1.9,  3.3,  4. ,  4. ,  4. ,  4. ,  4. ]))
        basis2 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  2. ,  2. ,  2. ,  2. ,  2. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,True)
        vol2 = vol.clone()
        vol2.insert_knot(0, [9.046]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 23)
        vol2.insert_knot(0, [2.933]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 25)
        vol2.insert_knot(0, [8.800]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 28)
        vol2.insert_knot(0, [4.611]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 32)
        vol2.insert_knot(0, [8.993]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 37)
        vol2.insert_knot(1, [1.083]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 14)
        vol2.insert_knot(1, [1.686]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 16)
        vol2.insert_knot(1, [1.080]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 19)
        vol2.insert_knot(1, [3.000]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 23)
        vol2.insert_knot(2, [0.800]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 12)
        vol2.insert_knot(2, [0.800]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 14)
        vol2.insert_knot(2, [0.800]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 17)
        vol2.insert_knot(2, [0.800]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 21)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p6_rational_C2_periodic(self):
        controlpoints = np.array([[ 101. ,    1. ,    4. ,    0.9],
       [  96. ,   35. ,   -4. ,    0.7],
       [  67. ,   72. ,    3. ,    1.3],
       [  41. ,   96. ,   -4. ,    1.2],
       [   2. ,  102. ,    0. ,    0.7],
       [ -40. ,   90. ,   -1. ,    1. ],
       [ -70. ,   68. ,   -5. ,    1. ],
       [ -96. ,   41. ,   -3. ,    0.5],
       [ -99. ,    4. ,   -2. ,    1.4],
       [ -94. ,  -37. ,    2. ,    1.2],
       [ -70. ,  -72. ,   -4. ,    1.5],
       [ -40. ,  -90. ,    2. ,    1.3],
       [  -1. , -102. ,    4. ,    1.3],
       [  40. ,  -96. ,   -2. ,    1.2],
       [  74. ,  -74. ,    1. ,    0.9],
       [  88. ,  -38. ,    1. ,    0.9]])
        basis0 = BSplineBasis(6, np.array([ -3.4,  -2.1,  -1. ,   0. ,   0. ,   0. ,   0.6,   2.4,   3.1,   3.6,   4.8,   6.3,   7.1,
         7.9,   8.9,   9.7,  10.6,  11.9,  13. ,  14. ,  14. ,  14. ,  14.6,  16.4,  17.1]),2)
        crv  = Curve(basis0, controlpoints,True)
        crv2 = crv.clone()
        crv2.insert_knot([3.100]*1) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)
        crv2.insert_knot([4.329]*2) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 28)
        crv2.insert_knot([12.880]*3) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 31)
        crv2.insert_knot([7.282]*4) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 35)
        crv2.insert_knot([4.239]*5) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 40)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p56_rational_C2_periodic(self):
        controlpoints = np.array([[  63. ,    2. ,    3. ,    0.7],       [  50. ,   27. ,   -1. ,    1.4],       [  34. ,   49. ,    3. ,    1.4],       [   9. ,   54. ,   -3. ,    0.6],       [ -16. ,   54. ,   -4. ,    1. ],       [ -38. ,   46. ,   -4. ,    0.6],       [ -55. ,   29. ,    4. ,    0.6],       [ -64. ,    2. ,    1. ,    1.5],       [ -51. ,  -30. ,   -3. ,    0.7],       [ -40. ,  -46. ,   -5. ,    1.1],       [ -17. ,  -57. ,    1. ,    1.5],       [  13. ,  -64. ,   -2. ,    0.8],       [  39. ,  -44. ,   -3. ,    1. ],       [  50. ,  -22. ,    2. ,    1.5],       [  68. ,    3. ,   -2. ,    0.7],       [  62. ,   32. ,   -5. ,    0.9],       [  39. ,   54. ,    4. ,    0.9],       [  17. ,   65. ,    3. ,    0.7],       [ -13. ,   64. ,    3. ,    1.4],       [ -38. ,   52. ,   -4. ,    1.2],       [ -64. ,   28. ,    4. ,    1.1],       [ -64. ,    1. ,    0. ,    1.4],       [ -63. ,  -24. ,   -1. ,    0.7],       [ -37. ,  -50. ,   -1. ,    1.2],       [ -12. ,  -69. ,   -4. ,    0.6],       [  15. ,  -65. ,   -5. ,    0.6],       [  40. ,  -49. ,   -3. ,    1. ],       [  58. ,  -30. ,    3. ,    1.5],       [  75. ,    1. ,   -3. ,    1.1],       [  61. ,   30. ,    0. ,    0.7],       [  40. ,   52. ,    2. ,    1. ],       [  19. ,   71. ,    1. ,    0.8],       [ -19. ,   69. ,   -5. ,    0.9],       [ -43. ,   60. ,    4. ,    1. ],       [ -62. ,   27. ,    1. ,    1.3],       [ -75. ,    0. ,   -4. ,    0.7],       [ -60. ,  -29. ,    1. ,    1. ],       [ -44. ,  -55. ,    3. ,    1.5],       [ -14. ,  -70. ,    2. ,    1.5],       [  12. ,  -69. ,    0. ,    1.3],       [  47. ,  -57. ,    0. ,    0.6],       [  62. ,  -27. ,    2. ,    0.7],       [  73. ,   -5. ,   -5. ,    1.2],       [  65. ,   38. ,   -5. ,    1.3],       [  50. ,   55. ,    2. ,    1.1],       [  21. ,   74. ,   -4. ,    0.7],       [ -21. ,   76. ,    1. ,    0.5],       [ -53. ,   62. ,    3. ,    1.1],       [ -74. ,   34. ,   -5. ,    1.5],       [ -75. ,    4. ,    1. ,    1.4],       [ -72. ,  -31. ,   -1. ,    1.4],       [ -48. ,  -66. ,   -4. ,    1.1],       [ -15. ,  -81. ,   -4. ,    0.8],       [  12. ,  -76. ,   -4. ,    0.8],       [  52. ,  -63. ,    1. ,    1.3],       [  64. ,  -33. ,   -4. ,    1.4],       [  82. ,   -2. ,   -1. ,    1.4],       [  71. ,   37. ,   -5. ,    0.7],       [  52. ,   61. ,    0. ,    1. ],       [  19. ,   78. ,    1. ,    1.3],       [ -21. ,   80. ,    2. ,    1.3],       [ -54. ,   68. ,   -5. ,    0.9],       [ -76. ,   34. ,    4. ,    0.8],       [ -84. ,    4. ,    4. ,    0.6],       [ -71. ,  -39. ,    0. ,    1.4],       [ -52. ,  -68. ,    1. ,    0.7],       [ -16. ,  -78. ,   -5. ,    1. ],       [  20. ,  -77. ,   -1. ,    1.4],       [  49. ,  -63. ,   -5. ,    1.4],       [  74. ,  -40. ,    3. ,    1.2],       [  85. ,    1. ,    2. ,    1.2],       [  77. ,   36. ,    4. ,    0.7],       [  59. ,   71. ,    4. ,    0.6],       [  23. ,   83. ,   -3. ,    1.2],       [ -17. ,   85. ,    4. ,    1. ],       [ -58. ,   69. ,   -1. ,    1.3],       [ -80. ,   34. ,    2. ,    1.1],       [ -94. ,    2. ,   -3. ,    1.2],       [ -76. ,  -43. ,   -1. ,    1.1],       [ -59. ,  -70. ,    3. ,    0.5],       [ -19. ,  -84. ,    3. ,    0.7],       [  22. ,  -89. ,   -3. ,    1.5],       [  58. ,  -70. ,   -4. ,    0.7],       [  75. ,  -40. ,   -4. ,    1.5],       [  90. ,   -5. ,    3. ,    1.4],       [  85. ,   43. ,    2. ,    1. ],       [  56. ,   73. ,    4. ,    1.1],       [  23. ,   91. ,    2. ,    0.8],       [ -21. ,   96. ,   -4. ,    0.7],       [ -61. ,   74. ,   -1. ,    1.2],       [ -85. ,   39. ,   -4. ,    1.4],       [ -97. ,    4. ,   -5. ,    1.5],       [ -83. ,  -39. ,   -2. ,    1.1],       [ -56. ,  -75. ,   -1. ,    0.7],       [ -22. ,  -94. ,    0. ,    1.5],       [  22. ,  -97. ,   -1. ,    0.8],       [  63. ,  -70. ,   -3. ,    0.7],       [  81. ,  -37. ,   -5. ,    1.2],       [ 102. ,    2. ,    0. ,    1.2],       [  92. ,   46. ,    4. ,    0.6],       [  60. ,   82. ,    1. ,    1.4],       [  17. ,   98. ,    4. ,    0.5],       [ -20. ,   93. ,   -2. ,    0.7],       [ -60. ,   80. ,   -1. ,    0.8],       [ -91. ,   45. ,   -1. ,    0.9],       [-102. ,   -1. ,   -2. ,    1.1],       [ -94. ,  -39. ,   -1. ,    0.8],       [ -62. ,  -76. ,   -2. ,    0.7],       [ -22. , -102. ,    3. ,    0.8],       [  17. ,  -94. ,    1. ,    1.5],       [  62. ,  -76. ,    1. ,    0.9],       [  85. ,  -47. ,   -5. ,    1.3]])
        basis0 = BSplineBasis(5, np.array([ -3.3,  -2.1,  -0.8,   0. ,   0. ,   1.1,   2. ,   2.8,   3.9,   4.7,   5.8,   7.2,   7.7,
         9. ,   9.7,  10.9,  12.2,  13. ,  13. ,  14.1,  15. ,  15.8]),2)
        basis1 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  1.8,  3. ,  3. ,  3. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,True)
        surf2 = surf.clone()
        surf2.insert_knot(0, [4.011]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 23)
        surf2.insert_knot(0, [7.403]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [8.438]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 28)
        surf2.insert_knot(0, [2.461]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 32)
        surf2.insert_knot(1, [1.509]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 15)
        surf2.insert_knot(1, [1.089]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 17)
        surf2.insert_knot(1, [1.415]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 20)
        surf2.insert_knot(1, [1.173]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 24)
        surf2.insert_knot(1, [1.239]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 29)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p765_rational_C2_periodic(self):
        controlpoints = np.array([[  46. ,   -3. ,   -4. ,    1.2],       [  42. ,   17. ,   -2. ,    0.9],       [  38. ,   33. ,    4. ,    1.2],       [  20. ,   46. ,    3. ,    0.8],       [  12. ,   44. ,    0. ,    1. ],       [  -7. ,   47. ,    4. ,    0.8],       [ -26. ,   38. ,   -4. ,    0.9],       [ -36. ,   31. ,   -1. ,    1.1],       [ -49. ,   20. ,    0. ,    1.1],       [ -48. ,   -5. ,    0. ,    1.2],       [ -43. ,  -16. ,   -3. ,    1.1],       [ -40. ,  -28. ,   -5. ,    1. ],       [ -30. ,  -43. ,   -4. ,    1.2],       [  -9. ,  -45. ,   -5. ,    1. ],       [  10. ,  -49. ,    4. ,    1.4],       [  26. ,  -39. ,   -1. ,    1.5],       [  42. ,  -33. ,    0. ,    1.3],       [  51. ,  -22. ,   -1. ,    1.4],       [  60. ,    0. ,   -3. ,    0.6],       [  49. ,   19. ,    3. ,    1.3],       [  44. ,   34. ,    3. ,    1. ],       [  25. ,   51. ,   -4. ,    1.1],       [  11. ,   60. ,    0. ,    0.7],       [ -11. ,   54. ,    0. ,    0.9],       [ -30. ,   49. ,    0. ,    0.8],       [ -43. ,   38. ,    0. ,    0.7],       [ -53. ,   22. ,   -1. ,    1.1],       [ -55. ,    3. ,   -3. ,    1.1],       [ -55. ,  -24. ,   -5. ,    1. ],       [ -44. ,  -38. ,   -1. ,    1.4],       [ -29. ,  -56. ,    4. ,    0.5],       [ -10. ,  -62. ,   -4. ,    0.9],       [   5. ,  -60. ,    4. ,    1.2],       [  32. ,  -49. ,   -4. ,    1.1],       [  40. ,  -41. ,    1. ,    0.8],       [  51. ,  -16. ,    2. ,    0.6],       [  70. ,    0. ,   -3. ,    1.2],       [  66. ,   24. ,   -3. ,    0.7],       [  47. ,   40. ,    2. ,    0.9],       [  35. ,   57. ,   -1. ,    1. ],       [   7. ,   60. ,    0. ,    1.3],       [  -8. ,   63. ,    4. ,    0.9],       [ -35. ,   59. ,   -3. ,    0.8],       [ -55. ,   38. ,   -5. ,    1.4],       [ -66. ,   24. ,   -5. ,    1.1],       [ -69. ,   -5. ,   -1. ,    0.8],       [ -60. ,  -25. ,    1. ,    1.3],       [ -48. ,  -46. ,   -3. ,    0.6],       [ -34. ,  -63. ,   -3. ,    1.4],       [  -7. ,  -66. ,   -4. ,    0.5],       [   8. ,  -68. ,   -3. ,    1.3],       [  33. ,  -55. ,   -4. ,    0.9],       [  53. ,  -40. ,   -2. ,    1.2],       [  62. ,  -27. ,    2. ,    0.6],       [  70. ,    4. ,    3. ,    1.1],       [  68. ,   23. ,   -2. ,    1. ],       [  54. ,   50. ,   -2. ,    0.5],       [  40. ,   63. ,   -1. ,    0.6],       [  10. ,   74. ,   -2. ,    0.9],       [  -9. ,   73. ,   -1. ,    0.8],       [ -42. ,   61. ,   -1. ,    0.8],       [ -57. ,   49. ,   -5. ,    0.9],       [ -70. ,   24. ,    2. ,    1.1],       [ -73. ,   -4. ,   -3. ,    0.8],       [ -74. ,  -30. ,   -1. ,    0.7],       [ -60. ,  -49. ,    4. ,    0.8],       [ -40. ,  -67. ,    1. ,    1. ],       [ -15. ,  -73. ,   -3. ,    0.7],       [  12. ,  -75. ,   -5. ,    1.5],       [  36. ,  -64. ,   -2. ,    1.3],       [  60. ,  -44. ,    3. ,    0.8],       [  67. ,  -21. ,   -5. ,    1.4],       [  86. ,   -1. ,    0. ,    1.2],       [  77. ,   24. ,   -4. ,    1.2],       [  59. ,   55. ,    3. ,    0.9],       [  45. ,   72. ,    4. ,    1.3],       [  16. ,   86. ,   -2. ,    0.7],       [ -19. ,   81. ,   -1. ,    1.3],       [ -44. ,   72. ,   -3. ,    1. ],       [ -65. ,   54. ,   -1. ,    1. ],       [ -84. ,   25. ,   -2. ,    1.2],       [ -87. ,   -4. ,   -2. ,    1. ],       [ -83. ,  -28. ,   -3. ,    1.2],       [ -67. ,  -54. ,    3. ,    1.2],       [ -42. ,  -72. ,    0. ,    1.3],       [ -15. ,  -80. ,   -3. ,    1.3],       [  15. ,  -82. ,    1. ,    1.1],       [  46. ,  -72. ,    1. ,    1.3],       [  61. ,  -57. ,    3. ,    1.1],       [  76. ,  -29. ,   -4. ,    1.3],       [  88. ,   -2. ,    3. ,    1. ],       [  87. ,   32. ,   -1. ,    1.1],       [  73. ,   56. ,    4. ,    1. ],       [  50. ,   79. ,    0. ,    0.5],       [  18. ,   86. ,    0. ,    1.3],       [ -16. ,   91. ,   -4. ,    0.5],       [ -51. ,   76. ,   -4. ,    0.9],       [ -71. ,   56. ,   -5. ,    0.8],       [ -90. ,   36. ,    1. ,    1.4],       [ -95. ,    4. ,    4. ,    1.5],       [ -91. ,  -35. ,   -5. ,    1. ],       [ -69. ,  -56. ,    4. ,    0.7],       [ -45. ,  -78. ,   -5. ,    0.6],       [ -18. ,  -86. ,   -3. ,    1.4],       [  12. ,  -88. ,    2. ,    1.4],       [  48. ,  -83. ,   -5. ,    1.5],       [  69. ,  -59. ,    1. ,    1.1],       [  88. ,  -34. ,   -2. ,    0.8],       [  98. ,    0. ,    4. ,    1. ],       [  94. ,   33. ,   -4. ,    1.1],       [  75. ,   67. ,    1. ,    1.4],       [  52. ,   88. ,   -4. ,    1. ],       [  14. ,   94. ,   -4. ,    1. ],       [ -22. ,  101. ,   -2. ,    1.3],       [ -47. ,   84. ,   -3. ,    1.2],       [ -81. ,   68. ,   -5. ,    0.8],       [ -90. ,   37. ,   -2. ,    0.7],       [ -97. ,   -3. ,    2. ,    1.3],       [ -94. ,  -33. ,   -3. ,    1.3],       [ -82. ,  -69. ,   -5. ,    0.9],       [ -55. ,  -84. ,   -2. ,    1.3],       [ -21. ,  -97. ,    4. ,    0.6],       [  16. , -101. ,   -5. ,    1.4],       [  52. ,  -82. ,    2. ,    0.6],       [  77. ,  -65. ,    3. ,    0.7],       [  89. ,  -37. ,    4. ,    0.9],       [  51. ,    0. ,    8. ,    0.8],       [  47. ,   12. ,    6. ,    0.9],       [  41. ,   29. ,   10. ,    1. ],       [  29. ,   38. ,   10. ,    1.3],       [   7. ,   46. ,    8. ,    1.4],       [ -12. ,   52. ,   10. ,    1.1],       [ -24. ,   38. ,    3. ,    1.4],       [ -34. ,   28. ,   11. ,    1. ],       [ -51. ,   15. ,    8. ,    0.7],       [ -50. ,    4. ,   11. ,    0.8],       [ -43. ,  -20. ,    9. ,    1. ],       [ -42. ,  -36. ,   11. ,    1.4],       [ -29. ,  -45. ,    7. ,    1.5],       [  -9. ,  -53. ,    4. ,    1.2],       [   6. ,  -46. ,   10. ,    0.7],       [  20. ,  -47. ,    3. ,    1.1],       [  43. ,  -29. ,    5. ,    0.7],       [  48. ,  -22. ,   10. ,    1.4],       [  57. ,    1. ,    8. ,    0.7],       [  55. ,   15. ,   10. ,    0.6],       [  47. ,   39. ,    9. ,    0.5],       [  31. ,   54. ,    9. ,    1. ],       [  13. ,   59. ,    4. ,    1.1],       [ -13. ,   58. ,    9. ,    1. ],       [ -34. ,   53. ,    3. ,    1. ],       [ -44. ,   40. ,    8. ,    1.3],       [ -56. ,   21. ,    6. ,    1.2],       [ -62. ,   -5. ,    3. ,    1.4],       [ -56. ,  -24. ,    3. ,    1. ],       [ -44. ,  -41. ,    6. ,    1. ],       [ -26. ,  -54. ,   11. ,    0.6],       [  -9. ,  -55. ,    9. ,    0.9],       [   6. ,  -59. ,    3. ,    1.3],       [  33. ,  -53. ,    4. ,    1.1],       [  43. ,  -39. ,    4. ,    0.8],       [  57. ,  -21. ,    7. ,    0.6],       [  65. ,   -4. ,    6. ,    1.3],       [  64. ,   25. ,    6. ,    1.3],       [  53. ,   40. ,    9. ,    1. ],       [  35. ,   55. ,    4. ,    0.7],       [  14. ,   68. ,    9. ,    1.3],       [  -8. ,   63. ,   12. ,    1.3],       [ -39. ,   61. ,    4. ,    0.9],       [ -47. ,   45. ,    6. ,    1.4],       [ -60. ,   22. ,    7. ,    1.5],       [ -64. ,    4. ,    4. ,    1.4],       [ -59. ,  -21. ,    7. ,    1.3],       [ -50. ,  -40. ,    5. ,    0.5],       [ -36. ,  -60. ,    9. ,    1.2],       [ -15. ,  -65. ,    5. ,    1. ],       [   9. ,  -65. ,    8. ,    0.6],       [  34. ,  -54. ,    5. ,    0.8],       [  48. ,  -46. ,    5. ,    0.8],       [  61. ,  -28. ,    8. ,    1.4],       [  77. ,    3. ,   10. ,    1.1],       [  74. ,   23. ,    3. ,    1.1],       [  59. ,   50. ,    9. ,    0.9],       [  36. ,   66. ,   12. ,    0.6],       [  14. ,   70. ,    5. ,    0.6],       [ -10. ,   72. ,    7. ,    0.6],       [ -33. ,   68. ,   10. ,    1.1],       [ -56. ,   45. ,    9. ,    0.8],       [ -71. ,   24. ,   11. ,    0.6],       [ -77. ,    3. ,    4. ,    1.1],       [ -73. ,  -27. ,    4. ,    0.6],       [ -59. ,  -50. ,   11. ,    0.8],       [ -39. ,  -62. ,   11. ,    1.4],       [  -9. ,  -76. ,    6. ,    1.5],       [  16. ,  -76. ,    6. ,    1.3],       [  41. ,  -65. ,   10. ,    1.1],       [  59. ,  -45. ,    8. ,    1.2],       [  73. ,  -29. ,    8. ,    1.3],       [  86. ,   -3. ,    8. ,    1.1],       [  78. ,   24. ,    4. ,    0.7],       [  61. ,   55. ,    4. ,    0.7],       [  45. ,   71. ,   11. ,    1. ],       [  12. ,   81. ,   12. ,    0.8],       [ -18. ,   84. ,   12. ,    1.1],       [ -43. ,   67. ,    5. ,    1.2],       [ -61. ,   58. ,    6. ,    1.3],       [ -83. ,   25. ,    8. ,    1.2],       [ -88. ,    4. ,   12. ,    1.2],       [ -81. ,  -30. ,    6. ,    1. ],       [ -67. ,  -51. ,    9. ,    0.7],       [ -43. ,  -76. ,   11. ,    1.2],       [ -11. ,  -84. ,    4. ,    1.1],       [  13. ,  -80. ,   12. ,    0.6],       [  45. ,  -73. ,   12. ,    1.1],       [  61. ,  -57. ,    8. ,    0.7],       [  80. ,  -34. ,    8. ,    0.7],       [  87. ,   -5. ,   12. ,    0.8],       [  88. ,   28. ,    7. ,    1.3],       [  74. ,   54. ,    3. ,    0.7],       [  44. ,   81. ,   11. ,    1.4],       [  20. ,   88. ,    7. ,    1. ],       [ -17. ,   92. ,    3. ,    0.8],       [ -46. ,   74. ,   11. ,    0.5],       [ -71. ,   57. ,    3. ,    0.6],       [ -82. ,   31. ,    6. ,    1.4],       [ -94. ,   -5. ,    3. ,    1.1],       [ -87. ,  -32. ,    9. ,    1. ],       [ -70. ,  -59. ,    4. ,    0.5],       [ -42. ,  -84. ,   12. ,    0.7],       [ -19. ,  -88. ,    8. ,    1.3],       [  19. ,  -89. ,    5. ,    0.5],       [  44. ,  -78. ,    5. ,    1. ],       [  74. ,  -59. ,    3. ,    0.7],       [  82. ,  -29. ,    8. ,    1. ],       [  98. ,   -1. ,   10. ,    1.2],       [  89. ,   34. ,    6. ,    0.8],       [  76. ,   63. ,    8. ,    0.6],       [  54. ,   86. ,    8. ,    1.5],       [  14. ,   95. ,   10. ,    0.7],       [ -17. ,   94. ,    6. ,    1.2],       [ -50. ,   83. ,   10. ,    1.3],       [ -74. ,   65. ,    4. ,    1.1],       [ -98. ,   36. ,    8. ,    0.8],       [ -98. ,    0. ,    3. ,    1.5],       [ -92. ,  -39. ,   11. ,    1.2],       [ -79. ,  -62. ,    3. ,    1.4],       [ -55. ,  -90. ,    9. ,    1.1],       [ -17. , -101. ,   11. ,    1.3],       [  20. , -101. ,   11. ,    0.8],       [  46. ,  -91. ,    8. ,    0.8],       [  72. ,  -63. ,    9. ,    0.7],       [  92. ,  -32. ,    3. ,    1.4],       [  45. ,    2. ,   18. ,    0.7],       [  50. ,   18. ,   20. ,    0.6],       [  41. ,   28. ,   13. ,    1. ],       [  23. ,   40. ,   13. ,    1.1],       [  12. ,   51. ,   16. ,    1. ],       [ -12. ,   54. ,   16. ,    1.2],       [ -21. ,   42. ,   12. ,    1. ],       [ -35. ,   32. ,   19. ,    0.6],       [ -43. ,   19. ,   17. ,    1.4],       [ -49. ,    4. ,   15. ,    1.5],       [ -44. ,  -22. ,   14. ,    0.9],       [ -40. ,  -31. ,   15. ,    1. ],       [ -27. ,  -40. ,   20. ,    0.6],       [  -9. ,  -51. ,   14. ,    1.1],       [   5. ,  -49. ,   13. ,    1.3],       [  22. ,  -40. ,   14. ,    1.2],       [  33. ,  -33. ,   16. ,    1.2],       [  44. ,  -20. ,   12. ,    1.5],       [  62. ,   -3. ,   20. ,    1.4],       [  58. ,   22. ,   11. ,    0.8],       [  43. ,   38. ,   14. ,    1.4],       [  25. ,   52. ,   18. ,    0.6],       [   7. ,   62. ,   12. ,    1.3],       [ -11. ,   53. ,   19. ,    1.1],       [ -27. ,   53. ,   18. ,    0.9],       [ -43. ,   41. ,   18. ,    0.8],       [ -60. ,   20. ,   15. ,    0.9],       [ -56. ,    4. ,   20. ,    1.5],       [ -53. ,  -25. ,   16. ,    0.7],       [ -43. ,  -34. ,   12. ,    1.3],       [ -29. ,  -55. ,   15. ,    0.7],       [ -14. ,  -62. ,   15. ,    1. ],       [  12. ,  -60. ,   14. ,    1.4],       [  24. ,  -50. ,   20. ,    1.2],       [  47. ,  -34. ,   14. ,    1.2],       [  52. ,  -18. ,   19. ,    0.6],       [  69. ,   -5. ,   20. ,    0.7],       [  66. ,   23. ,   17. ,    1.2],       [  55. ,   42. ,   17. ,    0.7],       [  37. ,   62. ,   15. ,    0.7],       [   8. ,   61. ,   18. ,    0.7],       [ -12. ,   62. ,   17. ,    1.5],       [ -33. ,   53. ,   14. ,    1.2],       [ -47. ,   47. ,   15. ,    1.1],       [ -67. ,   20. ,   13. ,    1.3],       [ -70. ,   -3. ,   20. ,    1.2],       [ -62. ,  -21. ,   14. ,    0.6],       [ -53. ,  -43. ,   12. ,    0.8],       [ -39. ,  -54. ,   12. ,    1.5],       [ -16. ,  -70. ,   14. ,    1.5],       [  16. ,  -69. ,   20. ,    1.2],       [  33. ,  -60. ,   16. ,    1.2],       [  48. ,  -39. ,   20. ,    1.2],       [  62. ,  -21. ,   19. ,    1.4],       [  70. ,    3. ,   11. ,    0.6],       [  67. ,   22. ,   20. ,    0.5],       [  57. ,   51. ,   18. ,    0.6],       [  38. ,   63. ,   11. ,    1.1],       [  17. ,   73. ,   18. ,    1.2],       [ -14. ,   71. ,   11. ,    1.1],       [ -35. ,   64. ,   17. ,    0.6],       [ -54. ,   47. ,   14. ,    0.7],       [ -72. ,   22. ,   13. ,    1.1],       [ -80. ,   -1. ,   14. ,    1.2],       [ -71. ,  -28. ,   20. ,    1. ],       [ -62. ,  -49. ,   11. ,    1.2],       [ -40. ,  -67. ,   17. ,    1.1],       [  -9. ,  -77. ,   20. ,    0.7],       [  16. ,  -78. ,   19. ,    1.2],       [  42. ,  -67. ,   17. ,    1.3],       [  55. ,  -46. ,   20. ,    1.3],       [  70. ,  -25. ,   15. ,    1.4],       [  79. ,   -2. ,   12. ,    0.9],       [  80. ,   26. ,   15. ,    1.2],       [  63. ,   55. ,   16. ,    1.1],       [  43. ,   76. ,   20. ,    1. ],       [  11. ,   82. ,   15. ,    0.6],       [ -13. ,   84. ,   20. ,    0.9],       [ -37. ,   69. ,   11. ,    1.4],       [ -64. ,   56. ,   16. ,    0.9],       [ -76. ,   32. ,   20. ,    0.6],       [ -84. ,    4. ,   18. ,    0.9],       [ -81. ,  -32. ,   16. ,    1.1],       [ -68. ,  -50. ,   18. ,    0.7],       [ -47. ,  -76. ,   13. ,    1.2],       [ -18. ,  -85. ,   19. ,    1.3],       [  13. ,  -79. ,   11. ,    1.1],       [  39. ,  -74. ,   11. ,    1.1],       [  66. ,  -50. ,   16. ,    0.8],       [  81. ,  -34. ,   19. ,    1.1],       [  90. ,    0. ,   15. ,    0.8],       [  90. ,   28. ,   20. ,    1.5],       [  65. ,   62. ,   20. ,    0.9],       [  49. ,   76. ,   19. ,    1. ],       [  19. ,   88. ,   11. ,    0.7],       [ -14. ,   90. ,   16. ,    1.5],       [ -42. ,   75. ,   19. ,    1.1],       [ -74. ,   60. ,   15. ,    1.3],       [ -85. ,   34. ,   16. ,    1.5],       [ -90. ,   -3. ,   15. ,    1.3],       [ -84. ,  -36. ,   11. ,    1.4],       [ -70. ,  -64. ,   18. ,    1.5],       [ -48. ,  -81. ,   18. ,    1.3],       [ -20. ,  -87. ,   17. ,    1.3],       [  13. ,  -93. ,   11. ,    0.5],       [  42. ,  -81. ,   12. ,    0.5],       [  74. ,  -64. ,   19. ,    1.1],       [  84. ,  -35. ,   14. ,    1.5],       [ 101. ,    4. ,   15. ,    1.4],       [  89. ,   34. ,   11. ,    0.6],       [  76. ,   59. ,   19. ,    1. ],       [  48. ,   82. ,   12. ,    0.8],       [  18. ,   96. ,   14. ,    0.7],       [ -22. ,  101. ,   11. ,    0.8],       [ -46. ,   89. ,   19. ,    0.9],       [ -73. ,   68. ,   13. ,    0.5],       [ -96. ,   35. ,   13. ,    1. ],       [-101. ,   -2. ,   15. ,    1.2],       [ -92. ,  -39. ,   13. ,    1. ],       [ -79. ,  -66. ,   19. ,    1.2],       [ -53. ,  -89. ,   16. ,    1. ],       [ -18. ,  -99. ,   16. ,    1.1],       [  21. ,  -95. ,   14. ,    0.5],       [  51. ,  -82. ,   20. ,    1.3],       [  71. ,  -70. ,   14. ,    1.4],       [  93. ,  -36. ,   19. ,    1.2],       [  51. ,    2. ,   22. ,    0.7],       [  49. ,   17. ,   22. ,    1. ],       [  33. ,   35. ,   23. ,    1.3],       [  20. ,   42. ,   22. ,    1.3],       [  13. ,   50. ,   24. ,    1.5],       [  -9. ,   52. ,   21. ,    0.9],       [ -29. ,   48. ,   26. ,    1.1],       [ -40. ,   31. ,   19. ,    0.8],       [ -50. ,   12. ,   27. ,    0.6],       [ -49. ,    2. ,   24. ,    0.9],       [ -48. ,  -20. ,   23. ,    1.3],       [ -44. ,  -31. ,   22. ,    0.8],       [ -26. ,  -45. ,   21. ,    1. ],       [  -8. ,  -51. ,   21. ,    1.4],       [   9. ,  -51. ,   22. ,    0.8],       [  29. ,  -47. ,   27. ,    1.4],       [  39. ,  -36. ,   28. ,    0.5],       [  48. ,  -20. ,   23. ,    1.3],       [  53. ,   -1. ,   28. ,    0.8],       [  53. ,   16. ,   28. ,    1.4],       [  49. ,   33. ,   26. ,    0.5],       [  29. ,   46. ,   21. ,    1.4],       [  12. ,   53. ,   23. ,    0.8],       [ -11. ,   58. ,   20. ,    1.2],       [ -33. ,   49. ,   20. ,    0.9],       [ -49. ,   33. ,   28. ,    0.8],       [ -54. ,   22. ,   27. ,    1.3],       [ -63. ,   -1. ,   26. ,    1.2],       [ -55. ,  -18. ,   23. ,    0.5],       [ -47. ,  -34. ,   28. ,    0.8],       [ -25. ,  -54. ,   20. ,    0.7],       [  -7. ,  -57. ,   26. ,    0.7],       [  12. ,  -61. ,   27. ,    0.9],       [  29. ,  -55. ,   26. ,    0.9],       [  45. ,  -40. ,   19. ,    1.3],       [  57. ,  -24. ,   24. ,    0.7],       [  71. ,    0. ,   27. ,    1.2],       [  58. ,   25. ,   19. ,    1.2],       [  48. ,   44. ,   19. ,    1. ],       [  30. ,   59. ,   21. ,    1.2],       [   8. ,   65. ,   23. ,    0.6],       [ -14. ,   63. ,   28. ,    1.2],       [ -36. ,   62. ,   24. ,    1. ],       [ -52. ,   46. ,   22. ,    0.6],       [ -62. ,   25. ,   25. ,    0.7],       [ -63. ,   -5. ,   26. ,    1. ],       [ -66. ,  -28. ,   21. ,    0.7],       [ -47. ,  -43. ,   19. ,    1.1],       [ -38. ,  -57. ,   26. ,    1.4],       [ -15. ,  -68. ,   28. ,    0.6],       [  15. ,  -67. ,   26. ,    1.4],       [  33. ,  -58. ,   26. ,    0.7],       [  51. ,  -45. ,   22. ,    0.7],       [  61. ,  -22. ,   21. ,    1. ],       [  70. ,   -1. ,   27. ,    1.1],       [  66. ,   29. ,   27. ,    1.1],       [  57. ,   47. ,   24. ,    1.2],       [  34. ,   66. ,   22. ,    0.8],       [   9. ,   76. ,   28. ,    0.7],       [ -13. ,   76. ,   22. ,    1.3],       [ -38. ,   62. ,   26. ,    1.4],       [ -57. ,   44. ,   27. ,    1.2],       [ -73. ,   25. ,   25. ,    0.9],       [ -78. ,    1. ,   26. ,    1.2],       [ -67. ,  -28. ,   24. ,    0.6],       [ -54. ,  -45. ,   19. ,    0.7],       [ -37. ,  -68. ,   22. ,    1.5],       [ -18. ,  -71. ,   27. ,    0.9],       [  16. ,  -70. ,   20. ,    1. ],       [  32. ,  -64. ,   22. ,    0.9],       [  58. ,  -49. ,   22. ,    0.8],       [  74. ,  -21. ,   19. ,    0.8],       [  85. ,   -5. ,   24. ,    1.4],       [  74. ,   30. ,   25. ,    1.4],       [  60. ,   49. ,   26. ,    1.1],       [  39. ,   76. ,   20. ,    0.9],       [  17. ,   87. ,   19. ,    0.5],       [ -19. ,   81. ,   23. ,    0.6],       [ -46. ,   74. ,   22. ,    0.6],       [ -65. ,   56. ,   21. ,    1. ],       [ -76. ,   32. ,   24. ,    0.7],       [ -82. ,   -1. ,   19. ,    1.4],       [ -84. ,  -28. ,   24. ,    0.6],       [ -66. ,  -53. ,   27. ,    0.9],       [ -46. ,  -70. ,   20. ,    0.8],       [ -19. ,  -82. ,   19. ,    1.2],       [  16. ,  -82. ,   25. ,    0.9],       [  38. ,  -77. ,   25. ,    1.1],       [  67. ,  -56. ,   21. ,    0.7],       [  75. ,  -28. ,   25. ,    1.3],       [  93. ,   -2. ,   22. ,    0.5],       [  81. ,   30. ,   27. ,    0.6],       [  65. ,   55. ,   24. ,    0.8],       [  49. ,   74. ,   26. ,    1. ],       [  15. ,   93. ,   28. ,    0.6],       [ -11. ,   85. ,   20. ,    1.4],       [ -48. ,   78. ,   27. ,    1.2],       [ -68. ,   60. ,   21. ,    0.9],       [ -88. ,   36. ,   22. ,    0.8],       [ -88. ,   -3. ,   23. ,    1.3],       [ -87. ,  -28. ,   25. ,    1.2],       [ -66. ,  -58. ,   27. ,    0.6],       [ -50. ,  -80. ,   28. ,    0.6],       [ -20. ,  -89. ,   20. ,    0.8],       [  13. ,  -87. ,   21. ,    0.6],       [  48. ,  -77. ,   19. ,    0.8],       [  74. ,  -61. ,   28. ,    1.1],       [  85. ,  -27. ,   28. ,    1.4],       [  98. ,    2. ,   28. ,    0.8],       [  96. ,   36. ,   22. ,    1.4],       [  79. ,   65. ,   25. ,    1. ],       [  53. ,   84. ,   21. ,    1. ],       [  22. ,  102. ,   26. ,    1.4],       [ -18. ,   98. ,   24. ,    0.7],       [ -49. ,   89. ,   21. ,    1.1],       [ -78. ,   62. ,   23. ,    0.7],       [ -93. ,   33. ,   23. ,    1.3],       [-101. ,   -1. ,   28. ,    0.6],       [ -95. ,  -37. ,   25. ,    0.6],       [ -77. ,  -70. ,   26. ,    0.6],       [ -53. ,  -82. ,   21. ,    1. ],       [ -13. , -102. ,   28. ,    1.4],       [  18. , -100. ,   24. ,    0.7],       [  46. ,  -90. ,   28. ,    0.7],       [  73. ,  -63. ,   19. ,    0.9],       [  92. ,  -39. ,   25. ,    1.2],       [  47. ,    3. ,   28. ,    0.6],       [  51. ,   19. ,   28. ,    1.5],       [  41. ,   30. ,   32. ,    0.9],       [  24. ,   46. ,   35. ,    0.7],       [   7. ,   46. ,   33. ,    1.1],       [ -12. ,   51. ,   32. ,    1.1],       [ -30. ,   42. ,   27. ,    1.2],       [ -37. ,   28. ,   27. ,    1.4],       [ -45. ,   13. ,   36. ,    0.8],       [ -52. ,   -1. ,   29. ,    1.4],       [ -45. ,  -13. ,   36. ,    0.6],       [ -43. ,  -28. ,   28. ,    1.1],       [ -25. ,  -43. ,   36. ,    1.1],       [ -13. ,  -51. ,   30. ,    1.4],       [  11. ,  -52. ,   36. ,    1.3],       [  20. ,  -45. ,   27. ,    0.9],       [  34. ,  -35. ,   27. ,    0.8],       [  51. ,  -13. ,   27. ,    1.2],       [  62. ,    3. ,   30. ,    1.1],       [  55. ,   23. ,   35. ,    1.1],       [  41. ,   40. ,   27. ,    1.4],       [  24. ,   53. ,   36. ,    1.3],       [   7. ,   60. ,   28. ,    0.5],       [ -12. ,   54. ,   35. ,    1.2],       [ -26. ,   51. ,   35. ,    1.2],       [ -46. ,   36. ,   35. ,    0.7],       [ -51. ,   23. ,   30. ,    1.2],       [ -62. ,    1. ,   33. ,    1.2],       [ -52. ,  -20. ,   30. ,    0.6],       [ -43. ,  -39. ,   34. ,    1.3],       [ -26. ,  -48. ,   27. ,    0.8],       [ -12. ,  -56. ,   28. ,    0.6],       [   8. ,  -59. ,   27. ,    1.5],       [  28. ,  -50. ,   30. ,    1.3],       [  42. ,  -41. ,   28. ,    1.2],       [  51. ,  -23. ,   34. ,    0.9],       [  65. ,    3. ,   32. ,    1.5],       [  59. ,   17. ,   32. ,    0.8],       [  46. ,   46. ,   35. ,    0.7],       [  30. ,   55. ,   32. ,    0.9],       [   9. ,   63. ,   28. ,    0.9],       [ -12. ,   64. ,   28. ,    0.7],       [ -30. ,   59. ,   35. ,    1.4],       [ -54. ,   41. ,   36. ,    1.2],       [ -65. ,   22. ,   30. ,    1. ],       [ -64. ,    0. ,   30. ,    0.5],       [ -58. ,  -23. ,   34. ,    0.5],       [ -48. ,  -48. ,   35. ,    1.2],       [ -31. ,  -55. ,   30. ,    1.1],       [ -16. ,  -70. ,   29. ,    1.5],       [   7. ,  -63. ,   32. ,    1.4],       [  29. ,  -55. ,   29. ,    1.5],       [  50. ,  -44. ,   29. ,    1.4],       [  65. ,  -21. ,   33. ,    1.2],       [  75. ,    0. ,   34. ,    1. ],       [  74. ,   26. ,   33. ,    0.6],       [  56. ,   46. ,   30. ,    1. ],       [  32. ,   64. ,   32. ,    0.7],       [   8. ,   69. ,   27. ,    1. ],       [ -13. ,   71. ,   29. ,    0.9],       [ -43. ,   67. ,   29. ,    0.7],       [ -57. ,   43. ,   29. ,    1.1],       [ -76. ,   24. ,   31. ,    1.3],       [ -72. ,   -1. ,   28. ,    0.7],       [ -76. ,  -26. ,   36. ,    1.4],       [ -55. ,  -45. ,   30. ,    1. ],       [ -39. ,  -68. ,   30. ,    0.9],       [ -18. ,  -74. ,   33. ,    1.4],       [  16. ,  -75. ,   32. ,    1.2],       [  38. ,  -65. ,   35. ,    1.1],       [  59. ,  -50. ,   33. ,    1.3],       [  70. ,  -27. ,   28. ,    1.4],       [  81. ,    0. ,   32. ,    1.4],       [  73. ,   33. ,   35. ,    1.5],       [  63. ,   55. ,   35. ,    1.4],       [  37. ,   70. ,   33. ,    1.5],       [  14. ,   85. ,   32. ,    1.3],       [ -18. ,   80. ,   28. ,    1.2],       [ -45. ,   75. ,   32. ,    0.6],       [ -65. ,   52. ,   30. ,    0.7],       [ -81. ,   25. ,   30. ,    0.6],       [ -89. ,   -4. ,   29. ,    1.2],       [ -76. ,  -29. ,   34. ,    1.3],       [ -60. ,  -57. ,   27. ,    1.2],       [ -46. ,  -75. ,   31. ,    0.7],       [ -15. ,  -86. ,   32. ,    1.4],       [  14. ,  -78. ,   32. ,    0.7],       [  42. ,  -73. ,   28. ,    1.5],       [  59. ,  -51. ,   36. ,    0.6],       [  74. ,  -26. ,   27. ,    1.3],       [  88. ,    3. ,   31. ,    1.1],       [  90. ,   30. ,   33. ,    0.7],       [  68. ,   54. ,   34. ,    1.3],       [  42. ,   74. ,   32. ,    0.7],       [  12. ,   86. ,   29. ,    1.4],       [ -19. ,   86. ,   31. ,    0.7],       [ -50. ,   81. ,   33. ,    0.7],       [ -71. ,   57. ,   36. ,    1. ],       [ -83. ,   30. ,   36. ,    1.5],       [ -95. ,   -4. ,   36. ,    1.2],       [ -82. ,  -36. ,   33. ,    1.2],       [ -66. ,  -57. ,   31. ,    1.1],       [ -47. ,  -80. ,   28. ,    0.9],       [ -14. ,  -86. ,   35. ,    0.9],       [  12. ,  -86. ,   28. ,    1. ],       [  50. ,  -84. ,   33. ,    1. ],       [  69. ,  -63. ,   33. ,    1.4],       [  84. ,  -30. ,   33. ,    0.9],       [ 100. ,    3. ,   28. ,    1.4],       [  89. ,   31. ,   29. ,    0.6],       [  72. ,   62. ,   29. ,    0.6],       [  48. ,   87. ,   28. ,    1.2],       [  13. ,  100. ,   27. ,    0.8],       [ -21. ,   96. ,   29. ,    1.2],       [ -53. ,   81. ,   32. ,    1.4],       [ -77. ,   63. ,   32. ,    1.3],       [ -91. ,   33. ,   27. ,    0.8],       [-100. ,    4. ,   36. ,    0.9],       [ -92. ,  -32. ,   28. ,    1. ],       [ -78. ,  -64. ,   29. ,    0.5],       [ -49. ,  -83. ,   36. ,    1.4],       [ -13. ,  -96. ,   30. ,    1. ],       [  15. ,  -98. ,   29. ,    1. ],       [  46. ,  -83. ,   31. ,    0.9],       [  73. ,  -63. ,   32. ,    0.7],       [  93. ,  -33. ,   30. ,    0.7],       [  49. ,    0. ,   36. ,    1.4],       [  46. ,   12. ,   44. ,    0.5],       [  36. ,   32. ,   39. ,    1. ],       [  21. ,   43. ,   36. ,    0.9],       [   5. ,   48. ,   39. ,    1.3],       [ -14. ,   54. ,   36. ,    0.6],       [ -30. ,   41. ,   36. ,    1.5],       [ -43. ,   30. ,   43. ,    1. ],       [ -51. ,   13. ,   43. ,    1.2],       [ -47. ,   -3. ,   39. ,    1.4],       [ -50. ,  -17. ,   36. ,    0.5],       [ -34. ,  -37. ,   39. ,    1.2],       [ -28. ,  -45. ,   39. ,    0.9],       [  -7. ,  -54. ,   37. ,    0.6],       [   9. ,  -46. ,   44. ,    1.1],       [  28. ,  -39. ,   43. ,    0.6],       [  35. ,  -33. ,   39. ,    1.2],       [  50. ,  -19. ,   35. ,    1.2],       [  62. ,    2. ,   41. ,    1. ],       [  50. ,   15. ,   37. ,    1.2],       [  41. ,   39. ,   44. ,    1.2],       [  29. ,   48. ,   39. ,    0.9],       [   9. ,   57. ,   35. ,    0.8],       [  -8. ,   58. ,   44. ,    1. ],       [ -29. ,   49. ,   44. ,    1. ],       [ -42. ,   38. ,   39. ,    1. ],       [ -54. ,   24. ,   43. ,    1.2],       [ -62. ,    4. ,   43. ,    0.5],       [ -58. ,  -21. ,   43. ,    0.8],       [ -41. ,  -36. ,   40. ,    1.1],       [ -27. ,  -52. ,   39. ,    1. ],       [  -7. ,  -55. ,   41. ,    0.7],       [   8. ,  -62. ,   38. ,    1.4],       [  29. ,  -48. ,   36. ,    0.8],       [  41. ,  -39. ,   44. ,    0.9],       [  55. ,  -20. ,   38. ,    1.3],       [  66. ,   -2. ,   42. ,    1.3],       [  59. ,   26. ,   36. ,    1.4],       [  53. ,   42. ,   40. ,    0.7],       [  31. ,   55. ,   36. ,    1.1],       [   8. ,   62. ,   35. ,    1. ],       [ -13. ,   67. ,   36. ,    0.9],       [ -30. ,   54. ,   44. ,    1.3],       [ -52. ,   41. ,   41. ,    1.2],       [ -65. ,   22. ,   42. ,    1.2],       [ -65. ,   -4. ,   35. ,    0.9],       [ -66. ,  -19. ,   42. ,    1.4],       [ -54. ,  -45. ,   40. ,    1.4],       [ -34. ,  -61. ,   39. ,    0.9],       [ -16. ,  -65. ,   40. ,    0.8],       [  14. ,  -68. ,   41. ,    0.5],       [  32. ,  -57. ,   37. ,    1.1],       [  46. ,  -39. ,   35. ,    1.2],       [  59. ,  -27. ,   40. ,    0.9],       [  73. ,    2. ,   43. ,    1.3],       [  65. ,   25. ,   40. ,    1.3],       [  55. ,   49. ,   41. ,    0.6],       [  37. ,   62. ,   41. ,    1.3],       [  11. ,   71. ,   43. ,    1.4],       [  -9. ,   70. ,   37. ,    1.2],       [ -38. ,   61. ,   41. ,    1.1],       [ -57. ,   44. ,   39. ,    0.7],       [ -68. ,   29. ,   41. ,    0.8],       [ -78. ,   -3. ,   42. ,    1.4],       [ -71. ,  -25. ,   44. ,    0.7],       [ -62. ,  -50. ,   41. ,    1.2],       [ -34. ,  -62. ,   40. ,    0.8],       [ -15. ,  -77. ,   43. ,    1.2],       [  17. ,  -72. ,   41. ,    0.6],       [  32. ,  -64. ,   39. ,    1.1],       [  56. ,  -48. ,   42. ,    1.5],       [  66. ,  -25. ,   40. ,    1.4],       [  82. ,    4. ,   37. ,    0.6],       [  74. ,   31. ,   35. ,    0.7],       [  67. ,   54. ,   43. ,    0.9],       [  40. ,   71. ,   40. ,    1.3],       [  17. ,   81. ,   41. ,    1.5],       [ -16. ,   84. ,   44. ,    1.1],       [ -41. ,   75. ,   37. ,    1.4],       [ -64. ,   54. ,   35. ,    1.4],       [ -74. ,   30. ,   43. ,    0.6],       [ -81. ,   -5. ,   41. ,    0.6],       [ -83. ,  -31. ,   41. ,    0.9],       [ -60. ,  -52. ,   36. ,    1.2],       [ -39. ,  -77. ,   40. ,    0.8],       [ -16. ,  -87. ,   43. ,    1.3],       [  14. ,  -83. ,   39. ,    1.2],       [  40. ,  -74. ,   37. ,    0.6],       [  68. ,  -58. ,   37. ,    1.4],       [  74. ,  -30. ,   42. ,    0.6],       [  88. ,    0. ,   38. ,    1.5],       [  87. ,   31. ,   42. ,    0.9],       [  68. ,   61. ,   43. ,    1.4],       [  49. ,   81. ,   35. ,    1. ],       [  15. ,   95. ,   37. ,    1.3],       [ -21. ,   94. ,   35. ,    0.8],       [ -42. ,   80. ,   40. ,    1.3],       [ -74. ,   59. ,   44. ,    0.6],       [ -86. ,   31. ,   36. ,    0.5],       [ -91. ,   -2. ,   35. ,    1. ],       [ -91. ,  -28. ,   36. ,    1.5],       [ -75. ,  -62. ,   36. ,    0.6],       [ -44. ,  -84. ,   36. ,    1.3],       [ -16. ,  -87. ,   35. ,    1.1],       [  18. ,  -93. ,   35. ,    1.4],       [  46. ,  -76. ,   42. ,    0.8],       [  74. ,  -61. ,   43. ,    1. ],       [  88. ,  -27. ,   39. ,    0.7],       [ 104. ,   -5. ,   37. ,    1.2],       [  96. ,   29. ,   40. ,    1. ],       [  80. ,   60. ,   37. ,    0.7],       [  47. ,   90. ,   40. ,    0.7],       [  13. ,  100. ,   39. ,    1.1],       [ -14. ,  102. ,   38. ,    0.9],       [ -49. ,   86. ,   43. ,    1.4],       [ -73. ,   68. ,   40. ,    0.8],       [ -91. ,   34. ,   37. ,    1. ],       [-104. ,   -1. ,   35. ,    0.6],       [ -90. ,  -38. ,   41. ,    0.7],       [ -79. ,  -66. ,   40. ,    0.8],       [ -53. ,  -92. ,   41. ,    0.8],       [ -19. , -103. ,   39. ,    0.7],       [  14. ,  -95. ,   41. ,    1.1],       [  53. ,  -85. ,   41. ,    0.7],       [  74. ,  -67. ,   36. ,    0.8],       [  97. ,  -38. ,   39. ,    0.8]])
        basis0 = BSplineBasis(7, np.array([ -2.8,  -2.2,  -1.1,   0. ,   0. ,   0. ,   0. ,   1.3,   2. ,   2.6,   3.9,   5.3,   6.3,
         7. ,   8.3,   9.3,   9.9,  10.8,  12.2,  12.8,  13.9,  15. ,  15. ,  15. ,  15. ,  16.3,
        17. ,  17.6]),2)
        basis1 = BSplineBasis(6, np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  2.,  2.,  2.,  2.,  2.,  2.]))
        basis2 = BSplineBasis(5, np.array([ 0.,  0.,  0.,  0.,  0.,  1.,  2.,  2.,  2.,  2.,  2.]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,True)
        vol2 = vol.clone()
        vol2.insert_knot(0, [13.640]*1) # insert C5-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 29)
        vol2.insert_knot(0, [8.952]*2) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 31)
        vol2.insert_knot(0, [11.229]*3) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 34)
        vol2.insert_knot(0, [11.574]*4) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 38)
        vol2.insert_knot(0, [13.292]*5) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 43)
        vol2.insert_knot(0, [13.349]*6) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 49)
        vol2.insert_knot(1, [1.000]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 14)
        vol2.insert_knot(1, [1.000]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 16)
        vol2.insert_knot(1, [1.000]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 19)
        vol2.insert_knot(1, [1.000]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 23)
        vol2.insert_knot(1, [1.000]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 28)
        vol2.insert_knot(2, [1.000]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 12)
        vol2.insert_knot(2, [1.000]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 14)
        vol2.insert_knot(2, [1.000]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 17)
        vol2.insert_knot(2, [1.000]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 21)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p6(self):
        controlpoints = np.array([[ -2.,   2.,  -5.],
       [  8.,  -1.,  -5.],
       [ 26.,  -5.,  -5.],
       [ 38.,  -1.,  -5.],
       [ 48.,  -4.,   3.],
       [ 53.,   0.,  -3.],
       [ 62.,  -2.,   2.],
       [ 80.,   1.,   3.],
       [ 93.,   1.,  -2.],
       [ 95.,   1.,   3.]])
        basis0 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.7,  2.2,  2.8,  4.3,  5. ,  5. ,  5. ,  5. ,  5. ,  5. ]))
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([0.931]*1) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 17)
        crv2.insert_knot([2.823]*2) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 19)
        crv2.insert_knot([1.551]*3) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 22)
        crv2.insert_knot([3.210]*4) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)
        crv2.insert_knot([2.493]*5) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 31)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p75(self):
        controlpoints = np.array([[   1.,   -1.,   -1.],       [   9.,   -2.,   -5.],       [  14.,    2.,    0.],       [  31.,    1.,   -1.],       [  34.,    1.,   -1.],       [  47.,    3.,   -2.],       [  50.,   -5.,    2.],       [  66.,    1.,    1.],       [  75.,    3.,    2.],       [  86.,   -4.,   -3.],       [  93.,   -3.,    3.],       [ 101.,   -4.,   -5.],       [  -5.,   13.,    0.],       [   8.,   12.,    1.],       [  14.,   15.,    0.],       [  23.,   11.,    1.],       [  39.,   17.,   -2.],       [  48.,   21.,    2.],       [  50.,   20.,   -3.],       [  59.,   18.,   -5.],       [  74.,   16.,    3.],       [  83.,   18.,   -3.],       [  88.,   15.,    0.],       [ 101.,   14.,    0.],       [   4.,   35.,    1.],       [  11.,   28.,   -2.],       [  18.,   34.,   -3.],       [  25.,   32.,   -5.],       [  32.,   32.,    4.],       [  41.,   36.,   -3.],       [  56.,   35.,   -3.],       [  65.,   31.,    0.],       [  68.,   32.,    3.],       [  84.,   35.,    3.],       [  88.,   37.,    3.],       [  96.,   35.,   -4.],       [   0.,   47.,   -2.],       [  10.,   50.,   -2.],       [  17.,   52.,   -4.],       [  27.,   47.,   -4.],       [  34.,   52.,    3.],       [  42.,   49.,   -5.],       [  50.,   51.,    3.],       [  60.,   53.,   -1.],       [  69.,   48.,    4.],       [  77.,   48.,   -4.],       [  88.,   53.,    1.],       [ 104.,   51.,   -2.],       [  -4.,   62.,    3.],       [   9.,   71.,    3.],       [  15.,   66.,   -1.],       [  30.,   63.,   -4.],       [  39.,   69.,    4.],       [  46.,   63.,    1.],       [  53.,   66.,    2.],       [  60.,   68.,   -1.],       [  76.,   66.,    3.],       [  85.,   69.,    2.],       [  90.,   65.,   -2.],       [ 102.,   71.,   -3.],       [  -3.,   87.,    0.],       [  11.,   84.,   -5.],       [  19.,   87.,    0.],       [  23.,   86.,    1.],       [  34.,   78.,    4.],       [  49.,   83.,   -5.],       [  53.,   85.,   -2.],       [  63.,   87.,    4.],       [  72.,   78.,   -3.],       [  80.,   80.,    2.],       [  94.,   83.,   -2.],       [  95.,   83.,    3.],       [   1.,   97.,   -5.],       [   9.,   98.,   -3.],       [  15.,   99.,    0.],       [  25.,   95.,    0.],       [  41.,  102.,    0.],       [  41.,  102.,   -3.],       [  57.,   96.,    1.],       [  59.,   98.,    2.],       [  69.,   98.,    2.],       [  78.,  102.,   -5.],       [  89.,   95.,   -5.],       [ 104.,  104.,    2.]])
        basis0 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.9,  2.2,  3.1,  3.9,  4.7,  6. ,  6. ,  6. ,
        6. ,  6. ,  6. ,  6. ]))
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1.1,  1.9,  3. ,  3. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [0.918]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 20)
        surf2.insert_knot(0, [1.006]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [3.088]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [3.508]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(0, [4.288]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 34)
        surf2.insert_knot(0, [1.618]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 40)
        surf2.insert_knot(1, [1.147]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 13)
        surf2.insert_knot(1, [1.779]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 15)
        surf2.insert_knot(1, [1.722]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 18)
        surf2.insert_knot(1, [1.762]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 22)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p657(self):
        controlpoints = np.array([[   4.,    1.,   -1.],       [   9.,    2.,   -1.],       [  24.,    2.,    2.],       [  28.,    2.,   -1.],       [  40.,   -3.,   -4.],       [  54.,    4.,   -2.],       [  65.,    0.,   -4.],       [  77.,   -4.,   -5.],       [  85.,   -3.,   -2.],       [ 103.,    2.,    4.],       [   3.,   10.,   -3.],       [  12.,   12.,    2.],       [  17.,   18.,    2.],       [  32.,   13.,   -4.],       [  47.,   13.,   -2.],       [  54.,   13.,   -2.],       [  66.,   16.,   -5.],       [  77.,   12.,    1.],       [  89.,   17.,   -3.],       [  97.,   14.,   -1.],       [   1.,   31.,    3.],       [  13.,   28.,   -2.],       [  18.,   28.,    1.],       [  29.,   24.,    1.],       [  48.,   32.,    1.],       [  59.,   33.,   -3.],       [  63.,   33.,    4.],       [  75.,   25.,   -2.],       [  84.,   27.,   -4.],       [  96.,   31.,   -4.],       [   3.,   39.,    1.],       [  14.,   43.,   -5.],       [  21.,   41.,    4.],       [  31.,   39.,    4.],       [  45.,   47.,    3.],       [  58.,   42.,   -2.],       [  63.,   42.,    1.],       [  74.,   41.,   -1.],       [  88.,   43.,   -1.],       [  97.,   42.,   -3.],       [   0.,   59.,   -2.],       [  11.,   53.,   -3.],       [  17.,   59.,   -3.],       [  32.,   58.,   -4.],       [  47.,   55.,   -3.],       [  60.,   53.,    4.],       [  71.,   61.,    0.],       [  74.,   53.,    4.],       [  88.,   59.,    2.],       [ 104.,   52.,    2.],       [  -1.,   71.,   -2.],       [  14.,   73.,    1.],       [  21.,   66.,    1.],       [  32.,   68.,    4.],       [  48.,   75.,   -5.],       [  53.,   67.,   -1.],       [  69.,   73.,    4.],       [  74.,   70.,    2.],       [  85.,   69.,   -5.],       [ 101.,   68.,    2.],       [   3.,   88.,    2.],       [   7.,   84.,   -5.],       [  21.,   81.,   -5.],       [  33.,   84.,    1.],       [  42.,   81.,    1.],       [  55.,   80.,    1.],       [  66.,   86.,    1.],       [  80.,   85.,    3.],       [  91.,   90.,    3.],       [  95.,   81.,   -1.],       [  -3.,  100.,    3.],       [  13.,  103.,    3.],       [  19.,   96.,   -1.],       [  29.,  101.,    4.],       [  40.,  103.,   -4.],       [  55.,  100.,   -2.],       [  70.,   95.,    0.],       [  77.,  104.,   -2.],       [  85.,  100.,    0.],       [ 101.,   96.,   -1.],       [   3.,   -2.,   18.],       [  14.,    3.,   11.],       [  20.,    1.,   17.],       [  33.,   -3.,   16.],       [  43.,   -2.,   13.],       [  52.,   -1.,   18.],       [  67.,   -2.,   13.],       [  79.,   -2.,   19.],       [  88.,    0.,   14.],       [ 101.,    3.,   10.],       [   4.,   12.,   18.],       [  15.,   15.,   10.],       [  27.,   14.,   13.],       [  31.,    9.,   14.],       [  40.,    9.,   16.],       [  59.,   18.,   18.],       [  62.,   10.,   13.],       [  80.,   14.,   14.],       [  87.,   13.,   16.],       [ 103.,   11.,   15.],       [   4.,   24.,   11.],       [   8.,   25.,   11.],       [  17.,   33.,   14.],       [  30.,   29.,   17.],       [  43.,   30.,   13.],       [  55.,   32.,    9.],       [  71.,   32.,   12.],       [  81.,   24.,   13.],       [  88.,   32.,   14.],       [ 104.,   25.,   16.],       [  -2.,   47.,   18.],       [  12.,   40.,   14.],       [  26.,   39.,   17.],       [  31.,   45.,   17.],       [  39.,   38.,   19.],       [  53.,   40.,    9.],       [  70.,   38.,   15.],       [  77.,   41.,   17.],       [  91.,   42.,   14.],       [  96.,   45.,   10.],       [   3.,   57.,    9.],       [  15.,   52.,   14.],       [  20.,   55.,   12.],       [  35.,   61.,    9.],       [  48.,   57.,   11.],       [  56.,   57.,   12.],       [  65.,   55.,   16.],       [  82.,   57.,   18.],       [  92.,   52.,   18.],       [  99.,   60.,   13.],       [  -5.,   75.,   14.],       [   9.,   72.,   18.],       [  18.,   67.,   10.],       [  35.,   66.,   18.],       [  43.,   76.,   15.],       [  51.,   71.,   11.],       [  71.,   73.,   18.],       [  82.,   75.,   18.],       [  83.,   75.,   13.],       [  97.,   74.,   16.],       [  -1.,   86.,   10.],       [   9.,   83.,   13.],       [  24.,   83.,   18.],       [  30.,   81.,   17.],       [  48.,   83.,   15.],       [  59.,   83.,   13.],       [  63.,   87.,   17.],       [  78.,   90.,   10.],       [  86.,   81.,    9.],       [  98.,   85.,   16.],       [   4.,  100.,   13.],       [  13.,   95.,   14.],       [  25.,  101.,   13.],       [  37.,  104.,   10.],       [  43.,  104.,    9.],       [  57.,  102.,   10.],       [  63.,  103.,   11.],       [  82.,   95.,   16.],       [  92.,   97.,   16.],       [  98.,   99.,   10.],       [   4.,    0.,   26.],       [  12.,    1.,   29.],       [  25.,   -1.,   24.],       [  37.,    2.,   30.],       [  40.,   -5.,   24.],       [  59.,   -5.,   31.],       [  69.,    0.,   25.],       [  80.,   -1.,   30.],       [  93.,    3.,   28.],       [ 100.,   -4.,   23.],       [   4.,   19.,   25.],       [  12.,   14.,   25.],       [  23.,    9.,   25.],       [  34.,   17.,   25.],       [  47.,    9.,   28.],       [  60.,   12.,   31.],       [  62.,   15.,   30.],       [  74.,   10.,   29.],       [  87.,   15.,   30.],       [  97.,    9.,   23.],       [  -3.,   24.,   31.],       [   7.,   32.,   27.],       [  25.,   27.,   25.],       [  30.,   24.,   27.],       [  41.,   28.,   28.],       [  53.,   32.,   26.],       [  65.,   31.,   31.],       [  79.,   31.,   31.],       [  89.,   26.,   30.],       [ 102.,   24.,   27.],       [   1.,   46.,   29.],       [   7.,   43.,   28.],       [  17.,   42.,   25.],       [  36.,   37.,   26.],       [  48.,   43.,   30.],       [  53.,   46.,   26.],       [  61.,   47.,   32.],       [  80.,   38.,   29.],       [  84.,   47.,   23.],       [ 103.,   38.,   30.],       [  -1.,   56.,   25.],       [  11.,   53.,   29.],       [  17.,   52.,   29.],       [  33.,   53.,   24.],       [  43.,   59.,   27.],       [  60.,   61.,   29.],       [  66.,   54.,   29.],       [  82.,   60.,   25.],       [  85.,   53.,   26.],       [ 101.,   56.,   28.],       [  -2.,   69.,   27.],       [   8.,   68.,   31.],       [  17.,   68.,   32.],       [  34.,   72.,   28.],       [  45.,   72.,   32.],       [  56.,   72.,   28.],       [  67.,   73.,   24.],       [  76.,   67.,   25.],       [  84.,   66.,   31.],       [ 100.,   76.,   25.],       [  -4.,   82.,   25.],       [  14.,   84.,   27.],       [  21.,   85.,   33.],       [  33.,   87.,   27.],       [  42.,   82.,   30.],       [  56.,   81.,   23.],       [  68.,   87.,   33.],       [  73.,   89.,   29.],       [  86.,   81.,   24.],       [  96.,   90.,   27.],       [   1.,  104.,   29.],       [   7.,   96.,   24.],       [  20.,  103.,   27.],       [  34.,  104.,   24.],       [  43.,  101.,   32.],       [  59.,   96.,   28.],       [  69.,  103.,   27.],       [  73.,   99.,   28.],       [  88.,  100.,   31.],       [  96.,   99.,   27.],       [   1.,   -5.,   38.],       [   9.,   -3.,   45.],       [  23.,    1.,   40.],       [  30.,   -4.,   43.],       [  46.,   -3.,   40.],       [  58.,   -3.,   44.],       [  67.,   -2.,   40.],       [  73.,   -5.,   46.],       [  93.,    2.,   39.],       [  99.,   -1.,   38.],       [  -2.,   11.,   43.],       [  15.,   11.,   42.],       [  18.,   14.,   40.],       [  31.,   14.,   39.],       [  40.,   15.,   40.],       [  57.,   13.,   45.],       [  66.,   13.,   40.],       [  77.,   18.,   42.],       [  93.,   12.,   47.],       [  95.,   11.,   45.],       [   3.,   31.,   47.],       [  12.,   30.,   47.],       [  21.,   27.,   46.],       [  30.,   29.,   40.],       [  47.,   30.,   43.],       [  58.,   25.,   44.],       [  62.,   31.,   41.],       [  78.,   23.,   39.],       [  92.,   31.,   39.],       [  98.,   29.,   45.],       [  -5.,   41.,   47.],       [   7.,   44.,   47.],       [  26.,   46.,   43.],       [  37.,   43.,   45.],       [  40.,   47.,   39.],       [  55.,   43.,   44.],       [  62.,   42.,   38.],       [  81.,   43.,   45.],       [  91.,   45.,   46.],       [  95.,   45.,   39.],       [  -4.,   57.,   46.],       [   8.,   60.,   47.],       [  25.,   52.,   43.],       [  37.,   56.,   38.],       [  44.,   61.,   45.],       [  59.,   55.,   45.],       [  70.,   56.,   42.],       [  79.,   57.,   44.],       [  87.,   53.,   46.],       [ 102.,   56.,   47.],       [  -2.,   66.,   39.],       [   9.,   71.,   40.],       [  21.,   72.,   43.],       [  32.,   70.,   39.],       [  42.,   69.,   43.],       [  52.,   76.,   41.],       [  71.,   70.,   44.],       [  73.,   75.,   40.],       [  92.,   76.,   46.],       [  97.,   70.,   41.],       [   0.,   81.,   42.],       [   6.,   88.,   47.],       [  26.,   85.,   42.],       [  30.,   83.,   40.],       [  43.,   90.,   42.],       [  55.,   84.,   38.],       [  68.,   90.,   39.],       [  78.,   88.,   45.],       [  92.,   87.,   45.],       [  95.,   86.,   37.],       [   4.,  100.,   46.],       [   7.,  103.,   40.],       [  23.,   97.,   40.],       [  28.,   97.,   41.],       [  40.,  103.,   41.],       [  59.,   97.,   42.],       [  66.,  103.,   47.],       [  76.,  100.,   40.],       [  85.,  100.,   37.],       [ 104.,   95.,   43.],       [  -3.,    3.,   53.],       [  11.,    2.,   56.],       [  19.,    1.,   60.],       [  33.,    0.,   54.],       [  44.,    1.,   56.],       [  59.,   -5.,   60.],       [  62.,   -5.,   53.],       [  73.,    4.,   57.],       [  85.,    2.,   61.],       [ 103.,   -3.,   60.],       [  -5.,   13.,   54.],       [   7.,   17.,   56.],       [  26.,   13.,   60.],       [  31.,   11.,   56.],       [  42.,   17.,   62.],       [  52.,   11.,   58.],       [  68.,   12.,   56.],       [  74.,   15.,   58.],       [  88.,   15.,   60.],       [ 100.,   12.,   61.],       [   1.,   25.,   57.],       [   9.,   24.,   60.],       [  25.,   25.,   59.],       [  33.,   24.,   52.],       [  42.,   29.,   56.],       [  57.,   25.,   56.],       [  65.,   32.,   57.],       [  76.,   31.,   53.],       [  92.,   31.,   55.],       [  99.,   30.,   57.],       [   0.,   43.,   55.],       [  16.,   46.,   53.],       [  26.,   45.,   55.],       [  34.,   46.,   55.],       [  47.,   43.,   59.],       [  52.,   40.,   58.],       [  68.,   43.,   53.],       [  77.,   42.,   58.],       [  89.,   41.,   61.],       [ 103.,   39.,   57.],       [  -1.,   53.,   60.],       [   9.,   55.,   55.],       [  24.,   59.,   57.],       [  29.,   53.,   52.],       [  43.,   57.,   52.],       [  51.,   54.,   61.],       [  67.,   61.,   52.],       [  77.,   57.,   57.],       [  85.,   52.,   54.],       [  96.,   55.,   52.],       [   4.,   74.,   52.],       [  11.,   72.,   56.],       [  18.,   69.,   58.],       [  29.,   75.,   62.],       [  48.,   75.,   54.],       [  51.,   70.,   56.],       [  65.,   73.,   54.],       [  81.,   76.,   58.],       [  83.,   75.,   52.],       [ 104.,   69.,   56.],       [   3.,   82.,   52.],       [  11.,   86.,   59.],       [  19.,   83.,   59.],       [  28.,   84.,   52.],       [  41.,   88.,   59.],       [  52.,   82.,   56.],       [  71.,   86.,   53.],       [  76.,   87.,   54.],       [  84.,   85.,   56.],       [  95.,   82.,   57.],       [  -2.,  100.,   60.],       [   6.,   96.,   59.],       [  20.,   95.,   61.],       [  32.,   96.,   59.],       [  43.,   97.,   60.],       [  52.,  104.,   54.],       [  66.,   99.,   59.],       [  74.,   97.,   54.],       [  89.,   97.,   53.],       [  95.,  102.,   60.],       [  -5.,   -3.,   70.],       [  14.,   -3.,   73.],       [  17.,    0.,   68.],       [  31.,    1.,   73.],       [  43.,    2.,   72.],       [  56.,   -3.,   76.],       [  70.,    0.,   72.],       [  81.,    2.,   75.],       [  93.,   -4.,   69.],       [ 101.,   -5.,   75.],       [  -5.,   11.,   66.],       [  13.,   12.,   71.],       [  18.,   11.,   73.],       [  30.,    9.,   70.],       [  42.,   16.,   70.],       [  57.,    9.,   74.],       [  63.,   19.,   71.],       [  77.,   15.,   73.],       [  92.,   15.,   68.],       [  96.,   14.,   70.],       [   0.,   26.,   69.],       [  14.,   28.,   72.],       [  25.,   32.,   67.],       [  31.,   31.,   68.],       [  45.,   29.,   70.],       [  59.,   23.,   72.],       [  68.,   30.,   73.],       [  74.,   27.,   68.],       [  86.,   25.,   74.],       [  95.,   27.,   75.],       [   0.,   45.,   74.],       [  10.,   44.,   66.],       [  25.,   38.,   69.],       [  38.,   43.,   70.],       [  42.,   38.,   72.],       [  60.,   39.,   75.],       [  64.,   44.,   70.],       [  78.,   44.,   69.],       [  90.,   39.,   71.],       [  96.,   45.,   67.],       [  -5.,   59.,   70.],       [  10.,   57.,   74.],       [  22.,   54.,   75.],       [  28.,   58.,   71.],       [  41.,   56.,   68.],       [  58.,   55.,   67.],       [  66.,   54.,   69.],       [  79.,   55.,   73.],       [  89.,   53.,   74.],       [ 103.,   56.,   70.],       [   3.,   73.,   66.],       [  11.,   70.,   74.],       [  24.,   69.,   73.],       [  35.,   72.,   72.],       [  42.,   66.,   74.],       [  57.,   72.,   71.],       [  70.,   75.,   72.],       [  79.,   70.,   75.],       [  85.,   74.,   76.],       [ 104.,   72.,   67.],       [  -2.,   84.,   68.],       [   7.,   88.,   72.],       [  22.,   83.,   69.],       [  37.,   89.,   74.],       [  45.,   87.,   69.],       [  56.,   85.,   70.],       [  62.,   81.,   75.],       [  82.,   85.,   71.],       [  87.,   87.,   69.],       [  96.,   87.,   68.],       [   3.,   99.,   68.],       [   6.,  103.,   73.],       [  22.,   99.,   74.],       [  30.,  104.,   76.],       [  42.,   98.,   73.],       [  57.,   96.,   67.],       [  70.,   97.,   67.],       [  82.,  100.,   68.],       [  84.,  103.,   67.],       [  98.,   99.,   76.],       [  -2.,    3.,   86.],       [  14.,   -3.,   85.],       [  24.,   -2.,   90.],       [  29.,   -2.,   88.],       [  48.,   -4.,   90.],       [  52.,   -5.,   89.],       [  65.,    2.,   89.],       [  78.,    2.,   90.],       [  90.,    2.,   90.],       [ 100.,    4.,   87.],       [   1.,   12.,   85.],       [  14.,   18.,   83.],       [  22.,   12.,   85.],       [  36.,   18.,   89.],       [  48.,   15.,   85.],       [  54.,   18.,   86.],       [  67.,   14.,   82.],       [  81.,   12.,   83.],       [  85.,   12.,   81.],       [ 103.,    9.,   87.],       [  -1.,   32.,   81.],       [   6.,   33.,   87.],       [  18.,   28.,   89.],       [  28.,   27.,   86.],       [  40.,   32.,   89.],       [  59.,   29.,   82.],       [  71.,   27.,   89.],       [  77.,   29.,   89.],       [  87.,   32.,   82.],       [ 101.,   29.,   85.],       [  -4.,   44.,   87.],       [   7.,   42.,   81.],       [  22.,   38.,   86.],       [  35.,   40.,   81.],       [  40.,   45.,   82.],       [  51.,   38.,   82.],       [  63.,   46.,   85.],       [  81.,   38.,   89.],       [  89.,   43.,   87.],       [ 100.,   39.,   85.],       [  -5.,   61.,   82.],       [  10.,   59.,   87.],       [  22.,   53.,   90.],       [  34.,   54.,   87.],       [  45.,   58.,   82.],       [  57.,   53.,   87.],       [  63.,   57.,   84.],       [  80.,   60.,   85.],       [  92.,   56.,   87.],       [  99.,   58.,   82.],       [   4.,   70.,   87.],       [  12.,   69.,   81.],       [  18.,   67.,   86.],       [  28.,   72.,   85.],       [  45.,   72.,   88.],       [  51.,   68.,   84.],       [  67.,   73.,   84.],       [  74.,   70.,   83.],       [  92.,   71.,   89.],       [ 100.,   76.,   86.],       [   1.,   87.,   86.],       [   9.,   86.,   88.],       [  18.,   81.,   81.],       [  36.,   81.,   80.],       [  42.,   84.,   86.],       [  50.,   82.,   86.],       [  69.,   87.,   81.],       [  75.,   86.,   86.],       [  84.,   86.,   81.],       [ 101.,   82.,   90.],       [  -1.,  103.,   89.],       [   7.,  101.,   88.],       [  19.,   95.,   83.],       [  33.,  100.,   83.],       [  47.,  100.,   83.],       [  55.,  103.,   83.],       [  61.,   95.,   87.],       [  80.,   98.,   90.],       [  88.,   98.,   81.],       [ 100.,   99.,   82.],       [  -4.,   -1.,  104.],       [  10.,    0.,   96.],       [  25.,   -5.,  104.],       [  37.,    2.,   98.],       [  40.,   -2.,   98.],       [  57.,   -1.,   95.],       [  66.,    3.,  102.],       [  74.,    0.,   98.],       [  92.,    1.,  104.],       [  99.,   -2.,   95.],       [  -4.,   18.,  100.],       [   7.,   12.,   96.],       [  18.,   17.,  102.],       [  29.,   14.,  101.],       [  42.,   10.,   95.],       [  56.,   13.,   99.],       [  62.,   11.,   95.],       [  75.,   16.,  103.],       [  90.,   13.,  100.],       [ 103.,   10.,   95.],       [  -4.,   23.,   97.],       [   9.,   28.,   95.],       [  25.,   29.,   95.],       [  31.,   25.,  100.],       [  43.,   31.,   96.],       [  56.,   24.,   98.],       [  65.,   27.,  102.],       [  81.,   24.,  100.],       [  89.,   26.,  102.],       [ 104.,   31.,  102.],       [   2.,   45.,  104.],       [  10.,   39.,  103.],       [  23.,   44.,   95.],       [  36.,   47.,   96.],       [  45.,   40.,  100.],       [  58.,   38.,  100.],       [  63.,   41.,   98.],       [  75.,   44.,  103.],       [  93.,   44.,   98.],       [ 103.,   47.,  102.],       [   1.,   52.,  102.],       [  10.,   54.,  100.],       [  25.,   52.,   98.],       [  33.,   53.,  104.],       [  39.,   58.,   98.],       [  50.,   52.,  101.],       [  70.,   56.,  103.],       [  77.,   53.,  103.],       [  92.,   55.,  103.],       [ 103.,   54.,   95.],       [  -5.,   68.,  102.],       [   9.,   74.,  103.],       [  23.,   74.,   98.],       [  32.,   75.,   98.],       [  40.,   67.,   98.],       [  57.,   71.,   97.],       [  63.,   68.,  103.],       [  81.,   74.,   99.],       [  87.,   76.,   95.],       [ 101.,   73.,  101.],       [   3.,   83.,  104.],       [  13.,   89.,  104.],       [  19.,   82.,   99.],       [  36.,   90.,   98.],       [  43.,   86.,   96.],       [  58.,   83.,   98.],       [  66.,   89.,  104.],       [  79.,   86.,  104.],       [  85.,   90.,   96.],       [ 102.,   81.,   96.],       [  -4.,   96.,   95.],       [  11.,  101.,   96.],       [  18.,  103.,   96.],       [  35.,  102.,  103.],       [  47.,   98.,   98.],       [  56.,   97.,   98.],       [  64.,   96.,  104.],       [  81.,  103.,   99.],       [  87.,   97.,   98.],       [ 103.,   96.,  103.]])
        basis0 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.9,  1.7,  3. ,  3.6,  5. ,  5. ,  5. ,  5. ,  5. ,  5. ]))
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1. ,  2. ,  2.8,  4. ,  4. ,  4. ,  4. ,  4. ]))
        basis2 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.7,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,False)
        vol2 = vol.clone()
        vol2.insert_knot(0, [3.221]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 17)
        vol2.insert_knot(0, [1.409]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 19)
        vol2.insert_knot(0, [3.475]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 22)
        vol2.insert_knot(0, [3.327]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 26)
        vol2.insert_knot(0, [1.714]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 31)
        vol2.insert_knot(1, [1.156]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 14)
        vol2.insert_knot(1, [1.196]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 16)
        vol2.insert_knot(1, [1.685]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 19)
        vol2.insert_knot(1, [1.648]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 23)
        vol2.insert_knot(2, [0.700]*1) # insert C5-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 16)
        vol2.insert_knot(2, [0.700]*2) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 18)
        vol2.insert_knot(2, [0.700]*3) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 21)
        vol2.insert_knot(2, [0.700]*4) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 25)
        vol2.insert_knot(2, [0.700]*5) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 30)
        vol2.insert_knot(2, [0.700]*6) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 36)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p5_C0_periodic(self):
        controlpoints = np.array([[ 100.,   -2.,   -1.],
       [  79.,   57.,    1.],
       [  33.,   93.,   -2.],
       [ -32.,   90.,    1.],
       [ -76.,   58.,    1.],
       [-104.,   -3.,   -4.],
       [ -76.,  -62.,    3.],
       [ -29.,  -93.,   -2.],
       [  28.,  -95.,   -4.],
       [  85.,  -58.,   -2.]])
        basis0 = BSplineBasis(5, np.array([-1.3,  0. ,  0. ,  0. ,  0. ,  1.3,  1.7,  2.8,  3.9,  5.1,  5.7,  7. ,  7. ,  7. ,  7. ,
        8.3]),0)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([1.522]*1) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 17)
        crv2.insert_knot([1.532]*2) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 19)
        crv2.insert_knot([5.612]*3) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 22)
        crv2.insert_knot([1.499]*4) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p55_C0_periodic(self):
        controlpoints = np.array([[  55.,   -3.,   -4.],       [  49.,   35.,   -1.],       [  22.,   52.,   -2.],       [ -17.,   56.,    1.],       [ -48.,   31.,   -1.],       [ -64.,    1.,   -3.],       [ -53.,  -39.,    3.],       [ -23.,  -57.,    4.],       [  18.,  -58.,   -1.],       [  44.,  -41.,    2.],       [  71.,   -5.,    4.],       [  58.,   39.,    2.],       [  20.,   62.,    2.],       [ -20.,   67.,   -2.],       [ -58.,   42.,   -2.],       [ -67.,    1.,    2.],       [ -55.,  -38.,    4.],       [ -17.,  -60.,    2.],       [  17.,  -65.,   -3.],       [  49.,  -38.,   -4.],       [  72.,    0.,   -3.],       [  56.,   38.,   -4.],       [  26.,   73.,    3.],       [ -19.,   66.,    0.],       [ -64.,   48.,    2.],       [ -75.,   -1.,    1.],       [ -64.,  -46.,   -1.],       [ -24.,  -68.,   -2.],       [  25.,  -72.,   -4.],       [  57.,  -40.,   -5.],       [  76.,    0.,   -1.],       [  60.,   47.,    0.],       [  24.,   80.,   -2.],       [ -24.,   79.,    0.],       [ -64.,   43.,   -3.],       [ -77.,   -5.,   -3.],       [ -70.,  -48.,   -5.],       [ -21.,  -74.,   -4.],       [  21.,  -72.,   -1.],       [  68.,  -45.,    0.],       [  85.,    2.,    2.],       [  72.,   55.,    3.],       [  29.,   87.,   -5.],       [ -27.,   80.,    2.],       [ -72.,   53.,    3.],       [ -88.,    1.,    1.],       [ -74.,  -47.,   -3.],       [ -29.,  -86.,   -4.],       [  26.,  -87.,    4.],       [  71.,  -50.,   -2.],       [  88.,    4.,   -3.],       [  72.,   58.,    3.],       [  32.,   93.,   -2.],       [ -33.,   85.,    2.],       [ -77.,   57.,    3.],       [ -91.,   -2.,    1.],       [ -72.,  -55.,    1.],       [ -25.,  -94.,   -1.],       [  31.,  -92.,    4.],       [  77.,  -53.,    0.],       [ 101.,   -5.,   -1.],       [  78.,   59.,   -5.],       [  33.,   91.,    0.],       [ -27.,   91.,   -5.],       [ -82.,   56.,    3.],       [-105.,    1.,    4.],       [ -78.,  -56.,   -4.],       [ -36.,  -97.,   -2.],       [  31., -100.,    0.],       [  81.,  -58.,   -3.]])
        basis0 = BSplineBasis(5, np.array([-1. ,  0. ,  0. ,  0. ,  0. ,  1.2,  2.3,  2.9,  4. ,  4.8,  6. ,  7. ,  7. ,  7. ,  7. ,
        8.2]),0)
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1.3,  2.1,  3. ,  3. ,  3. ,  3. ,  3. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [2.327]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 17)
        surf2.insert_knot(0, [5.285]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 19)
        surf2.insert_knot(0, [5.262]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 22)
        surf2.insert_knot(0, [4.536]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 26)
        surf2.insert_knot(1, [1.945]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 13)
        surf2.insert_knot(1, [1.713]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 15)
        surf2.insert_knot(1, [1.664]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 18)
        surf2.insert_knot(1, [1.990]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 22)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p657_C0_periodic(self):
        controlpoints = np.array([[  53.,    1.,    2.],       [  48.,   28.,    4.],       [  29.,   43.,   -4.],       [   4.,   54.,    2.],       [ -29.,   47.,    3.],       [ -40.,   27.,    4.],       [ -48.,   -4.,    0.],       [ -40.,  -29.,   -5.],       [ -25.,  -41.,   -1.],       [  -3.,  -54.,   -3.],       [  28.,  -43.,    0.],       [  41.,  -25.,    3.],       [  56.,   -2.,   -1.],       [  47.,   28.,   -2.],       [  34.,   54.,    2.],       [   2.,   63.,   -2.],       [ -32.,   47.,   -1.],       [ -57.,   26.,   -3.],       [ -60.,    4.,   -3.],       [ -53.,  -33.,   -5.],       [ -31.,  -55.,   -5.],       [   3.,  -65.,    3.],       [  30.,  -52.,    4.],       [  48.,  -27.,    4.],       [  72.,    3.,   -2.],       [  61.,   34.,   -2.],       [  37.,   65.,   -5.],       [  -3.,   67.,    4.],       [ -33.,   63.,   -1.],       [ -57.,   35.,    0.],       [ -73.,   -3.,    0.],       [ -59.,  -32.,    3.],       [ -40.,  -65.,    3.],       [   1.,  -67.,   -1.],       [  31.,  -64.,   -3.],       [  62.,  -32.,    3.],       [  79.,   -2.,   -2.],       [  65.,   38.,    4.],       [  37.,   71.,   -1.],       [   3.,   80.,    2.],       [ -38.,   68.,    1.],       [ -72.,   44.,   -2.],       [ -76.,   -5.,   -1.],       [ -71.,  -45.,   -1.],       [ -42.,  -70.,   -1.],       [   4.,  -80.,    0.],       [  37.,  -65.,    3.],       [  71.,  -40.,    0.],       [  93.,    0.,   -1.],       [  79.,   46.,   -1.],       [  44.,   79.,    2.],       [   3.,   89.,    0.],       [ -42.,   78.,    3.],       [ -80.,   40.,   -2.],       [ -86.,    1.,    3.],       [ -74.,  -41.,   -5.],       [ -43.,  -83.,    0.],       [   2.,  -87.,   -3.],       [  48.,  -76.,    0.],       [  76.,  -41.,   -3.],       [  99.,   -5.,    2.],       [  83.,   47.,   -5.],       [  51.,   90.,   -2.],       [   2.,  102.,   -2.],       [ -50.,   90.,   -2.],       [ -89.,   51.,   -5.],       [ -97.,    3.,    1.],       [ -83.,  -54.,   -4.],       [ -52.,  -92.,   -1.],       [  -5., -102.,   -4.],       [  47.,  -89.,    1.],       [  90.,  -50.,   -5.],       [  45.,   -2.,    3.],       [  47.,   26.,    3.],       [  21.,   44.,    3.],       [   1.,   51.,    9.],       [ -28.,   47.,    6.],       [ -40.,   25.,    2.],       [ -53.,    1.,    5.],       [ -41.,  -24.,    2.],       [ -23.,  -41.,    3.],       [   1.,  -53.,    2.],       [  26.,  -48.,    7.],       [  44.,  -23.,   -1.],       [  63.,    4.,    8.],       [  51.,   26.,    2.],       [  33.,   50.,    4.],       [  -5.,   57.,    9.],       [ -30.,   55.,    8.],       [ -53.,   29.,    5.],       [ -61.,    4.,    8.],       [ -51.,  -31.,    7.],       [ -32.,  -49.,    7.],       [  -2.,  -61.,    0.],       [  28.,  -56.,    6.],       [  48.,  -34.,    5.],       [  68.,   -5.,    1.],       [  60.,   33.,    5.],       [  38.,   59.,    3.],       [  -2.,   65.,    8.],       [ -31.,   59.,    8.],       [ -58.,   31.,    6.],       [ -71.,   -5.,    0.],       [ -60.,  -33.,    2.],       [ -40.,  -61.,    1.],       [   2.,  -70.,    6.],       [  31.,  -58.,    0.],       [  56.,  -32.,    1.],       [  76.,    1.,    1.],       [  69.,   42.,    8.],       [  43.,   70.,    5.],       [   1.,   75.,    7.],       [ -43.,   65.,    5.],       [ -70.,   39.,    8.],       [ -85.,    0.,    1.],       [ -68.,  -36.,    4.],       [ -36.,  -67.,   -1.],       [  -3.,  -77.,    5.],       [  41.,  -72.,   -1.],       [  66.,  -39.,    4.],       [  94.,   -3.,    0.],       [  78.,   46.,    2.],       [  44.,   81.,    7.],       [  -1.,   94.,    8.],       [ -43.,   73.,    2.],       [ -76.,   47.,    7.],       [ -95.,   -3.,    7.],       [ -74.,  -47.,    1.],       [ -46.,  -77.,    5.],       [   0.,  -95.,    8.],       [  49.,  -74.,    5.],       [  82.,  -42.,    8.],       [  97.,   -5.,    1.],       [  87.,   45.,    9.],       [  47.,   86.,    9.],       [   0.,  101.,    9.],       [ -50.,   86.,    0.],       [ -87.,   48.,    7.],       [-104.,    0.,    1.],       [ -91.,  -47.,    2.],       [ -52.,  -89.,    1.],       [  -3.,  -99.,    2.],       [  53.,  -91.,    1.],       [  85.,  -47.,    1.],       [  54.,    3.,   11.],       [  38.,   21.,   11.],       [  21.,   44.,    5.],       [  -5.,   46.,    4.],       [ -26.,   45.,    9.],       [ -42.,   24.,    7.],       [ -53.,   -2.,   13.],       [ -49.,  -25.,   11.],       [ -26.,  -45.,    5.],       [  -5.,  -54.,   10.],       [  28.,  -41.,    9.],       [  38.,  -21.,    8.],       [  62.,    1.,   13.],       [  49.,   30.,   13.],       [  30.,   53.,    5.],       [   4.,   59.,    4.],       [ -34.,   47.,    7.],       [ -50.,   31.,    8.],       [ -56.,    0.,    6.],       [ -57.,  -31.,    6.],       [ -26.,  -53.,    9.],       [  -1.,  -56.,   13.],       [  29.,  -56.,    4.],       [  53.,  -34.,    8.],       [  66.,    0.,    7.],       [  57.,   37.,    8.],       [  30.,   60.,   13.],       [   4.,   70.,    5.],       [ -40.,   56.,    5.],       [ -65.,   34.,    3.],       [ -75.,   -2.,    5.],       [ -63.,  -39.,    6.],       [ -36.,  -66.,   12.],       [  -2.,  -74.,    6.],       [  39.,  -61.,   12.],       [  57.,  -32.,   10.],       [  75.,   -4.,    9.],       [  73.,   37.,   10.],       [  38.,   68.,    5.],       [   4.,   84.,    4.],       [ -40.,   71.,    4.],       [ -68.,   36.,    4.],       [ -84.,    3.,    7.],       [ -66.,  -44.,    4.],       [ -37.,  -73.,    9.],       [   0.,  -85.,   11.],       [  40.,  -73.,   11.],       [  68.,  -41.,   10.],       [  94.,    4.,   13.],       [  77.,   48.,    8.],       [  40.,   78.,   13.],       [  -5.,   93.,    5.],       [ -44.,   80.,   12.],       [ -76.,   49.,    9.],       [ -91.,   -3.,    4.],       [ -81.,  -48.,   11.],       [ -41.,  -76.,   10.],       [  -1.,  -87.,    4.],       [  46.,  -74.,    8.],       [  77.,  -43.,   11.],       [ 103.,    0.,    9.],       [  90.,   47.,    7.],       [  50.,   90.,    5.],       [   3.,   95.,    6.],       [ -51.,   81.,   12.],       [ -83.,   50.,   11.],       [-105.,    3.,    4.],       [ -83.,  -52.,   12.],       [ -53.,  -85.,    8.],       [   0.,  -98.,   13.],       [  51.,  -89.,    4.],       [  84.,  -52.,    5.],       [  50.,   -1.,   10.],       [  40.,   26.,   11.],       [  21.,   40.,   13.],       [  -2.,   52.,   15.],       [ -24.,   46.,   11.],       [ -42.,   26.,   13.],       [ -52.,    1.,   15.],       [ -41.,  -30.,   11.],       [ -29.,  -44.,   17.],       [   2.,  -52.,   11.],       [  24.,  -39.,   11.],       [  42.,  -23.,   15.],       [  64.,   -2.,   10.],       [  53.,   30.,   13.],       [  32.,   48.,   12.],       [  -5.,   62.,    9.],       [ -35.,   47.,   11.],       [ -55.,   27.,    9.],       [ -61.,    3.,   10.],       [ -52.,  -26.,   11.],       [ -29.,  -55.,   17.],       [  -5.,  -58.,   18.],       [  31.,  -50.,    8.],       [  54.,  -30.,   10.],       [  72.,    4.,   10.],       [  58.,   36.,   11.],       [  30.,   63.,   12.],       [   2.,   71.,    8.],       [ -33.,   55.,   14.],       [ -57.,   39.,   13.],       [ -72.,    0.,   18.],       [ -60.,  -34.,   11.],       [ -39.,  -65.,   11.],       [  -1.,  -72.,    8.],       [  39.,  -65.,   13.],       [  64.,  -37.,   11.],       [  81.,   -1.,   12.],       [  67.,   35.,   17.],       [  37.,   64.,   13.],       [   4.,   76.,   13.],       [ -45.,   66.,   11.],       [ -72.,   43.,   12.],       [ -77.,   -4.,   14.],       [ -69.,  -43.,   11.],       [ -45.,  -72.,   17.],       [  -3.,  -81.,   14.],       [  38.,  -69.,   13.],       [  70.,  -36.,   13.],       [  86.,    4.,   11.],       [  78.,   45.,   13.],       [  41.,   77.,   10.],       [  -1.,   90.,   16.],       [ -43.,   77.,    9.],       [ -80.,   43.,   11.],       [ -95.,   -2.,   16.],       [ -82.,  -50.,   14.],       [ -44.,  -78.,    8.],       [  -2.,  -90.,   15.],       [  46.,  -79.,   14.],       [  81.,  -45.,   13.],       [ 101.,   -1.,   14.],       [  90.,   46.,   10.],       [  47.,   86.,   11.],       [   1.,   95.,   16.],       [ -53.,   89.,   10.],       [ -82.,   49.,   17.],       [-105.,   -1.,   17.],       [ -89.,  -55.,   15.],       [ -48.,  -86.,   10.],       [  -2., -103.,   17.],       [  45.,  -90.,   10.],       [  83.,  -47.,   13.],       [  47.,    1.,   19.],       [  38.,   22.,   17.],       [  28.,   44.,   21.],       [  -1.,   53.,   17.],       [ -28.,   44.,   20.],       [ -41.,   26.,   19.],       [ -53.,    2.,   14.],       [ -40.,  -25.,   14.],       [ -22.,  -45.,   21.],       [   0.,  -51.,   20.],       [  24.,  -44.,   17.],       [  40.,  -22.,   14.],       [  61.,    2.,   16.],       [  55.,   29.,   14.],       [  33.,   52.,   18.],       [  -1.,   64.,   13.],       [ -27.,   55.,   13.],       [ -53.,   29.,   21.],       [ -63.,   -3.,   15.],       [ -50.,  -32.,   16.],       [ -26.,  -55.,   13.],       [  -4.,  -57.,   21.],       [  34.,  -56.,   13.],       [  51.,  -32.,   20.],       [  67.,    3.,   12.],       [  58.,   31.,   17.],       [  37.,   63.,   16.],       [  -5.,   74.,   20.],       [ -38.,   55.,   19.],       [ -65.,   32.,   16.],       [ -70.,   -3.,   21.],       [ -58.,  -37.,   17.],       [ -39.,  -58.,   15.],       [  -1.,  -68.,   19.],       [  39.,  -57.,   13.],       [  58.,  -32.,   13.],       [  83.,   -4.,   22.],       [  70.,   41.,   21.],       [  39.,   67.,   13.],       [  -1.,   78.,   18.],       [ -43.,   66.,   17.],       [ -69.,   36.,   18.],       [ -81.,   -5.,   15.],       [ -67.,  -40.,   22.],       [ -44.,  -74.,   14.],       [   0.,  -80.,   13.],       [  38.,  -67.,   20.],       [  68.,  -42.,   17.],       [  87.,    2.,   16.],       [  80.,   41.,   21.],       [  43.,   75.,   15.],       [   2.,   93.,   16.],       [ -48.,   80.,   19.],       [ -77.,   46.,   19.],       [ -89.,    2.,   15.],       [ -79.,  -45.,   15.],       [ -50.,  -83.,   15.],       [   3.,  -94.,   14.],       [  40.,  -76.,   16.],       [  82.,  -44.,   20.],       [ 103.,    1.,   13.],       [  86.,   47.,   15.],       [  51.,   87.,   22.],       [   4.,  102.,   16.],       [ -50.,   91.,   19.],       [ -89.,   45.,   16.],       [ -98.,   -5.,   21.],       [ -83.,  -46.,   22.],       [ -49.,  -85.,   18.],       [   0., -103.,   21.],       [  50.,  -89.,   15.],       [  90.,  -52.,   16.],       [  48.,   -4.,   20.],       [  43.,   28.,   26.],       [  21.,   45.,   26.],       [  -5.,   45.,   23.],       [ -28.,   42.,   22.],       [ -48.,   20.,   22.],       [ -49.,    0.,   23.],       [ -42.,  -28.,   20.],       [ -28.,  -45.,   18.],       [  -5.,  -55.,   17.],       [  22.,  -40.,   25.],       [  44.,  -29.,   26.],       [  63.,   -3.,   20.],       [  49.,   34.,   20.],       [  31.,   50.,   18.],       [  -2.,   59.,   25.],       [ -27.,   48.,   17.],       [ -57.,   31.,   17.],       [ -64.,   -2.,   25.],       [ -53.,  -28.,   22.],       [ -31.,  -52.,   18.],       [   1.,  -64.,   22.],       [  27.,  -49.,   24.],       [  52.,  -26.,   23.],       [  66.,   -3.,   23.],       [  62.,   36.,   24.],       [  37.,   59.,   18.],       [  -4.,   70.,   20.],       [ -40.,   63.,   18.],       [ -66.,   35.,   23.],       [ -69.,   -1.,   22.],       [ -64.,  -36.,   18.],       [ -31.,  -60.,   24.],       [  -5.,  -70.,   26.],       [  38.,  -65.,   17.],       [  56.,  -33.,   22.],       [  77.,   -5.,   23.],       [  69.,   35.,   20.],       [  41.,   72.,   18.],       [   3.,   80.,   18.],       [ -45.,   65.,   24.],       [ -73.,   41.,   21.],       [ -84.,    1.,   26.],       [ -71.,  -38.,   25.],       [ -43.,  -67.,   22.],       [   3.,  -81.,   18.],       [  42.,  -65.,   19.],       [  66.,  -41.,   22.],       [  88.,    0.,   22.],       [  79.,   44.,   24.],       [  43.,   81.,   20.],       [  -5.,   90.,   19.],       [ -47.,   73.,   26.],       [ -80.,   42.,   23.],       [ -89.,   -4.,   23.],       [ -79.,  -48.,   18.],       [ -45.,  -80.,   17.],       [  -5.,  -94.,   19.],       [  48.,  -74.,   22.],       [  81.,  -44.,   22.],       [ 102.,   -3.,   21.],       [  91.,   45.,   20.],       [  52.,   87.,   20.],       [  -3.,  102.,   26.],       [ -53.,   84.,   19.],       [ -86.,   51.,   22.],       [-105.,    4.,   24.],       [ -86.,  -47.,   19.],       [ -52.,  -88.,   19.],       [   0.,  -97.,   25.],       [  46.,  -82.,   25.],       [  85.,  -55.,   20.],       [  50.,   -2.,   26.],       [  39.,   29.,   30.],       [  24.,   47.,   31.],       [   1.,   51.,   23.],       [ -29.,   39.,   28.],       [ -39.,   21.,   31.],       [ -51.,   -2.,   21.],       [ -43.,  -30.,   28.],       [ -25.,  -44.,   26.],       [   3.,  -47.,   22.],       [  20.,  -39.,   28.],       [  38.,  -24.,   24.],       [  62.,    3.,   30.],       [  55.,   30.,   29.],       [  25.,   50.,   21.],       [  -1.,   57.,   27.],       [ -26.,   55.,   30.],       [ -52.,   28.,   24.],       [ -56.,   -2.,   24.],       [ -57.,  -31.,   29.],       [ -28.,  -55.,   29.],       [  -3.,  -56.,   24.],       [  27.,  -49.,   30.],       [  48.,  -26.,   26.],       [  71.,   -5.,   29.],       [  61.,   33.,   23.],       [  30.,   65.,   23.],       [   3.,   74.,   24.],       [ -33.,   65.,   21.],       [ -58.,   35.,   29.],       [ -71.,   -4.,   24.],       [ -58.,  -34.,   22.],       [ -31.,  -64.,   23.],       [   4.,  -72.,   25.],       [  35.,  -65.,   24.],       [  58.,  -32.,   27.],       [  79.,   -5.,   22.],       [  71.,   40.,   24.],       [  44.,   65.,   27.],       [  -3.,   75.,   27.],       [ -42.,   72.,   26.],       [ -67.,   36.,   25.],       [ -83.,   -2.,   26.],       [ -74.,  -37.,   26.],       [ -43.,  -70.,   31.],       [  -2.,  -76.,   28.],       [  43.,  -72.,   22.],       [  67.,  -43.,   29.],       [  91.,    2.,   30.],       [  73.,   46.,   29.],       [  48.,   81.,   21.],       [  -3.,   89.,   28.],       [ -46.,   77.,   25.],       [ -76.,   49.,   30.],       [ -91.,   -1.,   30.],       [ -82.,  -46.,   24.],       [ -47.,  -81.,   27.],       [   2.,  -87.,   27.],       [  46.,  -78.,   27.],       [  76.,  -46.,   30.],       [  98.,    2.,   30.],       [  90.,   49.,   22.],       [  50.,   86.,   24.],       [  -4.,   95.,   25.],       [ -46.,   89.,   22.],       [ -84.,   54.,   22.],       [ -97.,   -3.,   22.],       [ -85.,  -48.,   30.],       [ -48.,  -87.,   30.],       [  -2.,  -96.,   25.],       [  51.,  -89.,   31.],       [  83.,  -48.,   24.],       [  48.,   -5.,   27.],       [  42.,   20.,   35.],       [  25.,   41.,   33.],       [   4.,   46.,   30.],       [ -27.,   38.,   28.],       [ -45.,   20.,   32.],       [ -51.,    4.,   28.],       [ -43.,  -21.,   34.],       [ -23.,  -48.,   30.],       [  -4.,  -49.,   33.],       [  24.,  -49.,   28.],       [  48.,  -21.,   30.],       [  62.,   -3.,   33.],       [  56.,   32.,   29.],       [  29.,   49.,   30.],       [   2.,   59.,   30.],       [ -31.,   53.,   35.],       [ -48.,   25.,   33.],       [ -56.,    4.,   33.],       [ -54.,  -31.,   33.],       [ -32.,  -52.,   29.],       [  -2.,  -62.,   28.],       [  27.,  -49.,   29.],       [  52.,  -28.,   28.],       [  66.,   -4.,   28.],       [  56.,   39.,   34.],       [  30.,   63.,   32.],       [  -4.,   72.,   28.],       [ -33.,   58.,   34.],       [ -66.,   33.,   29.],       [ -66.,    3.,   26.],       [ -61.,  -37.,   31.],       [ -40.,  -66.,   30.],       [  -4.,  -69.,   31.],       [  35.,  -57.,   34.],       [  58.,  -38.,   34.],       [  83.,   -2.,   32.],       [  70.,   43.,   31.],       [  44.,   72.,   26.],       [  -2.,   78.,   30.],       [ -38.,   72.,   30.],       [ -71.,   35.,   34.],       [ -78.,    2.,   32.],       [ -73.,  -42.,   35.],       [ -36.,  -70.,   27.],       [   3.,  -80.,   28.],       [  40.,  -75.,   30.],       [  66.,  -43.,   29.],       [  91.,   -4.,   27.],       [  81.,   46.,   31.],       [  49.,   73.,   31.],       [   1.,   92.,   27.],       [ -43.,   74.,   34.],       [ -75.,   41.,   30.],       [ -91.,    0.,   30.],       [ -82.,  -45.,   28.],       [ -41.,  -82.,   31.],       [  -4.,  -95.,   29.],       [  49.,  -82.,   33.],       [  81.,  -49.,   31.],       [ 100.,    0.,   31.],       [  82.,   46.,   31.],       [  48.,   81.,   33.],       [  -4.,  104.,   31.],       [ -46.,   84.,   35.],       [ -88.,   52.,   35.],       [-100.,   -1.,   27.],       [ -83.,  -50.,   33.],       [ -50.,  -83.,   32.],       [  -5., -102.,   27.],       [  51.,  -83.,   34.],       [  84.,  -48.,   31.],       [  45.,    1.,   39.],       [  46.,   27.,   34.],       [  25.,   40.,   36.],       [   3.,   45.,   30.],       [ -28.,   44.,   35.],       [ -43.,   24.,   39.],       [ -55.,    2.,   35.],       [ -42.,  -21.,   32.],       [ -22.,  -40.,   40.],       [   4.,  -49.,   34.],       [  25.,  -48.,   36.],       [  46.,  -28.,   31.],       [  64.,    3.,   38.],       [  53.,   34.,   37.],       [  26.,   48.,   32.],       [   4.,   58.,   31.],       [ -31.,   54.,   39.],       [ -50.,   25.,   36.],       [ -62.,    4.,   33.],       [ -48.,  -29.,   38.],       [ -29.,  -50.,   36.],       [  -2.,  -58.,   37.],       [  28.,  -54.,   37.],       [  48.,  -26.,   34.],       [  70.,    0.,   40.],       [  63.,   37.,   34.],       [  32.,   58.,   39.],       [  -3.,   73.,   31.],       [ -32.,   56.,   32.],       [ -59.,   34.,   32.],       [ -69.,    3.,   38.],       [ -62.,  -40.,   34.],       [ -40.,  -63.,   37.],       [   1.,  -68.,   30.],       [  35.,  -64.,   33.],       [  58.,  -39.,   32.],       [  80.,   -5.,   36.],       [  65.,   41.,   33.],       [  44.,   66.,   39.],       [  -2.,   80.,   31.],       [ -43.,   70.,   35.],       [ -74.,   43.,   33.],       [ -83.,    4.,   31.],       [ -73.,  -40.,   38.],       [ -43.,  -74.,   30.],       [  -1.,  -79.,   36.],       [  35.,  -67.,   40.],       [  68.,  -38.,   40.],       [  93.,   -3.,   38.],       [  78.,   44.,   33.],       [  46.,   76.,   39.],       [  -2.,   94.,   37.],       [ -43.,   75.,   33.],       [ -80.,   48.,   33.],       [ -95.,    4.,   31.],       [ -78.,  -48.,   39.],       [ -44.,  -81.,   36.],       [  -1.,  -89.,   35.],       [  47.,  -80.,   36.],       [  77.,  -43.,   33.],       [  99.,   -5.,   32.],       [  87.,   52.,   31.],       [  54.,   90.,   30.],       [  -4.,  100.,   35.],       [ -54.,   86.,   34.],       [ -84.,   49.,   35.],       [ -98.,    2.,   30.],       [ -90.,  -54.,   31.],       [ -50.,  -83.,   39.],       [   0., -102.,   35.],       [  52.,  -84.,   37.],       [  88.,  -53.,   36.],       [  49.,    3.,   35.],       [  42.,   25.,   35.],       [  25.,   39.,   40.],       [  -1.,   49.,   36.],       [ -27.,   48.,   39.],       [ -39.,   24.,   44.],       [ -52.,    2.,   42.],       [ -44.,  -27.,   42.],       [ -27.,  -41.,   38.],       [   1.,  -53.,   36.],       [  25.,  -41.,   44.],       [  43.,  -29.,   41.],       [  56.,    1.,   42.],       [  53.,   31.,   44.],       [  25.,   56.,   37.],       [   0.,   60.,   40.],       [ -29.,   54.,   35.],       [ -55.,   34.,   37.],       [ -63.,    2.,   42.],       [ -50.,  -35.,   35.],       [ -28.,  -50.,   44.],       [   0.,  -56.,   36.],       [  33.,  -49.,   37.],       [  49.,  -26.,   39.],       [  66.,    3.,   42.],       [  62.,   30.,   35.],       [  34.,   60.,   38.],       [   3.,   67.,   36.],       [ -36.,   65.,   37.],       [ -59.,   36.,   43.],       [ -68.,    4.,   44.],       [ -59.,  -36.,   38.],       [ -34.,  -63.,   37.],       [  -3.,  -75.,   43.],       [  37.,  -59.,   40.],       [  63.,  -36.,   44.],       [  80.,   -2.,   35.],       [  69.,   39.,   41.],       [  37.,   68.,   41.],       [   4.,   81.,   39.],       [ -38.,   67.,   37.],       [ -67.,   39.,   38.],       [ -85.,    2.,   35.],       [ -73.,  -41.,   36.],       [ -39.,  -75.,   35.],       [  -1.,  -77.,   36.],       [  35.,  -74.,   36.],       [  65.,  -45.,   38.],       [  87.,    0.,   39.],       [  82.,   43.,   35.],       [  43.,   75.,   37.],       [   4.,   88.,   36.],       [ -49.,   79.,   41.],       [ -80.,   44.,   35.],       [ -87.,   -1.,   43.],       [ -75.,  -43.,   38.],       [ -49.,  -74.,   37.],       [   1.,  -87.,   37.],       [  44.,  -80.,   41.],       [  78.,  -45.,   37.],       [ 104.,   -1.,   42.],       [  90.,   46.,   40.],       [  45.,   86.,   42.],       [  -5.,   97.,   39.],       [ -46.,   89.,   43.],       [ -89.,   51.,   44.],       [ -96.,    2.,   35.],       [ -87.,  -53.,   38.],       [ -52.,  -89.,   38.],       [  -5., -100.,   44.],       [  54.,  -90.,   36.],       [  84.,  -46.,   37.]])
        basis0 = BSplineBasis(6, np.array([-1.4,  0. ,  0. ,  0. ,  0. ,  0. ,  0.8,  2.2,  2.7,  4. ,  4.8,  6.2,  6.6,  8. ,  8. ,
        8. ,  8. ,  8. ,  8.8]),0)
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.9,  2. ,  2. ,  2. ,  2. ,  2. ]))
        basis2 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.6,  1.8,  3. ,  4. ,  4. ,  4. ,  4. ,  4. ,
        4. ,  4. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,False)
        vol2 = vol.clone()
        vol2.insert_knot(0, [1.132]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 20)
        vol2.insert_knot(0, [2.709]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 22)
        vol2.insert_knot(0, [3.660]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 25)
        vol2.insert_knot(0, [3.995]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 29)
        vol2.insert_knot(0, [2.031]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 34)
        vol2.insert_knot(1, [0.900]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 12)
        vol2.insert_knot(1, [0.900]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 14)
        vol2.insert_knot(1, [0.900]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 17)
        vol2.insert_knot(1, [0.900]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 21)
        vol2.insert_knot(2, [1.114]*1) # insert C5-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 18)
        vol2.insert_knot(2, [0.988]*2) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 20)
        vol2.insert_knot(2, [1.188]*3) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 23)
        vol2.insert_knot(2, [1.318]*4) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 27)
        vol2.insert_knot(2, [1.279]*5) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 32)
        vol2.insert_knot(2, [1.001]*6) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 38)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p7_C1_periodic(self):
        controlpoints = np.array([[  98.,    4.,    3.],
       [  94.,   41.,    3.],
       [  73.,   72.,    0.],
       [  41.,   90.,    3.],
       [  -4.,  100.,   -1.],
       [ -44.,   91.,   -1.],
       [ -71.,   67.,    4.],
       [ -93.,   39.,    3.],
       [-102.,   -3.,   -4.],
       [ -94.,  -38.,    0.],
       [ -74.,  -67.,    4.],
       [ -38.,  -89.,   -5.],
       [  -5., -105.,   -4.],
       [  37.,  -91.,    2.],
       [  70.,  -75.,   -3.],
       [  90.,  -38.,   -1.]])
        basis0 = BSplineBasis(7, np.array([ -1.9,  -0.9,   0. ,   0. ,   0. ,   0. ,   0. ,   0.8,   2.3,   2.9,   4.4,   5.1,   5.9,
         7. ,   8.1,   8.7,  10.1,  11.1,  12. ,  12. ,  12. ,  12. ,  12. ,  12.8,  14.3]),1)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([4.518]*1) # insert C5-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 26)
        crv2.insert_knot([9.855]*2) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 28)
        crv2.insert_knot([4.434]*3) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 31)
        crv2.insert_knot([8.296]*4) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 35)
        crv2.insert_knot([3.727]*5) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 40)
        crv2.insert_knot([8.890]*6) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 46)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p65_C1_periodic(self):
        controlpoints = np.array([[  63.,    1.,   -2.],       [  54.,   27.,    0.],       [  38.,   50.,    2.],       [  10.,   56.,    4.],       [ -16.,   55.,    3.],       [ -35.,   44.,   -1.],       [ -56.,   27.,   -4.],       [ -59.,   -5.,    0.],       [ -55.,  -28.,   -2.],       [ -38.,  -43.,    1.],       [ -15.,  -56.,    4.],       [  12.,  -63.,   -4.],       [  35.,  -45.,    1.],       [  50.,  -30.,   -4.],       [  66.,   -1.,    2.],       [  60.,   29.,    1.],       [  38.,   53.,   -5.],       [  10.,   67.,   -2.],       [ -14.,   68.,   -4.],       [ -42.,   53.,    0.],       [ -61.,   27.,    1.],       [ -63.,    3.,    0.],       [ -56.,  -33.,    0.],       [ -43.,  -51.,    4.],       [ -16.,  -59.,    4.],       [  13.,  -69.,    1.],       [  44.,  -51.,    4.],       [  59.,  -34.,    1.],       [  67.,   -1.,   -5.],       [  64.,   31.,    2.],       [  46.,   50.,    1.],       [  20.,   65.,   -5.],       [ -13.,   69.,    2.],       [ -44.,   56.,    4.],       [ -66.,   34.,   -1.],       [ -71.,   -4.,    4.],       [ -60.,  -26.,   -4.],       [ -47.,  -52.,    0.],       [ -20.,  -69.,    2.],       [  17.,  -67.,   -5.],       [  44.,  -55.,   -1.],       [  59.,  -36.,   -1.],       [  77.,   -4.,    3.],       [  64.,   33.,   -2.],       [  46.,   62.,    0.],       [  13.,   68.,   -1.],       [ -16.,   72.,    3.],       [ -46.,   59.,   -4.],       [ -70.,   34.,   -1.],       [ -71.,    0.,    2.],       [ -68.,  -28.,    4.],       [ -50.,  -63.,    0.],       [ -19.,  -74.,   -1.],       [  13.,  -79.,    3.],       [  48.,  -57.,    1.],       [  66.,  -35.,   -4.],       [  81.,    1.,    4.],       [  76.,   37.,    4.],       [  48.,   63.,    4.],       [  17.,   82.,   -5.],       [ -19.,   77.,    3.],       [ -54.,   66.,   -4.],       [ -78.,   32.,    1.],       [ -83.,    0.,   -5.],       [ -72.,  -32.,    3.],       [ -53.,  -68.,    0.],       [ -15.,  -76.,   -5.],       [  15.,  -76.,    2.],       [  46.,  -68.,    0.],       [  72.,  -33.,    0.],       [  86.,   -4.,   -3.],       [  80.,   39.,   -1.],       [  50.,   66.,   -2.],       [  15.,   79.,   -4.],       [ -23.,   86.,   -4.],       [ -56.,   69.,   -2.],       [ -77.,   39.,    1.],       [ -83.,   -5.,   -5.],       [ -80.,  -38.,   -5.],       [ -52.,  -66.,   -4.],       [ -20.,  -82.,   -3.],       [  22.,  -88.,    1.],       [  54.,  -65.,   -3.],       [  74.,  -35.,   -1.],       [  85.,   -2.,    1.],       [  77.,   38.,   -1.],       [  53.,   70.,   -1.],       [  16.,   88.,    3.],       [ -21.,   87.,   -2.],       [ -59.,   73.,   -3.],       [ -84.,   40.,    4.],       [ -88.,    2.,   -2.],       [ -82.,  -35.,    0.],       [ -56.,  -74.,   -2.],       [ -17.,  -90.,    3.],       [  21.,  -87.,   -4.],       [  55.,  -69.,   -4.],       [  85.,  -44.,    4.],       [  99.,   -1.,   -3.],       [  88.,   43.,   -5.],       [  62.,   73.,    2.],       [  20.,   92.,    3.],       [ -25.,   94.,   -4.],       [ -62.,   76.,    0.],       [ -82.,   45.,   -5.],       [ -96.,   -5.,    0.],       [ -87.,  -42.,    4.],       [ -60.,  -71.,    0.],       [ -17.,  -94.,   -3.],       [  16.,  -93.,   -5.],       [  55.,  -77.,    1.],       [  87.,  -40.,    1.],       [ 102.,   -4.,    3.],       [  85.,   44.,   -3.],       [  64.,   76.,    3.],       [  24.,  100.,    2.],       [ -22.,   99.,   -2.],       [ -66.,   78.,    3.],       [ -95.,   41.,   -4.],       [ -99.,    3.,    2.],       [ -92.,  -41.,    4.],       [ -62.,  -83.,    2.],       [ -20.,  -94.,    1.],       [  19.,  -97.,    0.],       [  59.,  -74.,   -4.],       [  91.,  -41.,    4.]])
        basis0 = BSplineBasis(6, np.array([ -2.3,  -0.9,   0. ,   0. ,   0. ,   0. ,   0.7,   2.3,   3.3,   4.2,   4.7,   5.7,   7.1,
         8.1,   8.7,  10.1,  11. ,  11. ,  11. ,  11. ,  11.7,  13.3]),1)
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0.7,  1.8,  2.6,  3.7,  5. ,  5. ,  5. ,  5. ,  5. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [0.903]*1) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 23)
        surf2.insert_knot(0, [3.576]*2) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 25)
        surf2.insert_knot(0, [8.032]*3) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 28)
        surf2.insert_knot(0, [5.222]*4) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 32)
        surf2.insert_knot(0, [2.039]*5) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 37)
        surf2.insert_knot(1, [3.392]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 15)
        surf2.insert_knot(1, [1.993]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 17)
        surf2.insert_knot(1, [2.236]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 20)
        surf2.insert_knot(1, [1.114]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 24)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p776_C1_periodic(self):
        controlpoints = np.array([[  54.,   -4.,    3.],       [  50.,   20.,    4.],       [  34.,   38.,    1.],       [  20.,   41.,    1.],       [   0.,   49.,    2.],       [ -17.,   41.,   -2.],       [ -41.,   35.,    2.],       [ -46.,   22.,    1.],       [ -55.,    0.,    2.],       [ -44.,  -16.,    3.],       [ -33.,  -39.,    4.],       [ -17.,  -45.,   -5.],       [  -4.,  -51.,   -5.],       [  20.,  -48.,    1.],       [  36.,  -39.,    0.],       [  51.,  -16.,    4.],       [  54.,   -1.,    0.],       [  57.,   21.,    4.],       [  44.,   38.,   -4.],       [  17.,   56.,   -4.],       [  -3.,   59.,   -3.],       [ -26.,   51.,    4.],       [ -39.,   44.,    3.],       [ -52.,   22.,    1.],       [ -57.,    2.,   -4.],       [ -56.,  -23.,    1.],       [ -45.,  -45.,   -3.],       [ -18.,  -57.,   -3.],       [   3.,  -60.,    2.],       [  22.,  -53.,    0.],       [  38.,  -44.,   -1.],       [  48.,  -19.,   -2.],       [  60.,   -5.,   -4.],       [  59.,   23.,    0.],       [  48.,   46.,   -1.],       [  21.,   55.,    0.],       [  -1.,   66.,    4.],       [ -26.,   63.,   -5.],       [ -49.,   41.,    1.],       [ -64.,   28.,    1.],       [ -65.,    1.,   -4.],       [ -60.,  -27.,   -4.],       [ -45.,  -45.,    3.],       [ -27.,  -62.,    2.],       [  -5.,  -61.,   -1.],       [  23.,  -62.,    0.],       [  47.,  -46.,    0.],       [  59.,  -22.,   -4.],       [  67.,    1.,   -2.],       [  65.,   28.,    0.],       [  51.,   51.,    1.],       [  31.,   66.,   -5.],       [   0.,   66.,    4.],       [ -24.,   61.,   -1.],       [ -52.,   54.,    0.],       [ -68.,   27.,   -1.],       [ -73.,   -2.,    1.],       [ -67.,  -29.,    2.],       [ -50.,  -53.,    1.],       [ -23.,  -62.,    3.],       [  -5.,  -68.,    1.],       [  31.,  -67.,    0.],       [  53.,  -55.,    4.],       [  70.,  -29.,   -4.],       [  74.,   -4.,   -4.],       [  77.,   32.,   -2.],       [  60.,   57.,    1.],       [  27.,   68.,   -2.],       [   1.,   76.,    4.],       [ -27.,   68.,   -4.],       [ -57.,   51.,   -1.],       [ -78.,   26.,   -4.],       [ -81.,   -4.,    0.],       [ -77.,  -33.,    2.],       [ -58.,  -57.,   -1.],       [ -34.,  -68.,    2.],       [  -3.,  -77.,    4.],       [  30.,  -75.,   -2.],       [  52.,  -59.,    4.],       [  70.,  -34.,   -5.],       [  81.,   -2.,    3.],       [  82.,   31.,   -5.],       [  57.,   59.,   -3.],       [  30.,   76.,    1.],       [   0.,   83.,   -2.],       [ -29.,   79.,    1.],       [ -56.,   62.,    2.],       [ -75.,   35.,   -3.],       [ -90.,    2.,   -3.],       [ -82.,  -30.,    0.],       [ -61.,  -58.,   -2.],       [ -30.,  -82.,   -2.],       [  -2.,  -85.,   -5.],       [  28.,  -84.,   -1.],       [  61.,  -61.,   -4.],       [  82.,  -32.,    1.],       [  95.,    3.,    0.],       [  83.,   33.,    4.],       [  64.,   63.,    1.],       [  36.,   86.,   -1.],       [   1.,   97.,    4.],       [ -35.,   82.,   -2.],       [ -62.,   62.,    2.],       [ -83.,   34.,    0.],       [ -95.,    1.,    0.],       [ -87.,  -36.,   -5.],       [ -63.,  -66.,   -5.],       [ -36.,  -88.,   -1.],       [  -5.,  -88.,    3.],       [  32.,  -85.,    3.],       [  62.,  -69.,   -2.],       [  87.,  -41.,   -3.],       [  99.,    4.,   -2.],       [  90.,   42.,   -3.],       [  74.,   71.,   -3.],       [  33.,   91.,    0.],       [   2.,  103.,   -4.],       [ -36.,   93.,   -4.],       [ -73.,   72.,    1.],       [ -91.,   42.,   -4.],       [-100.,    0.,    3.],       [ -88.,  -36.,   -5.],       [ -70.,  -72.,    2.],       [ -39.,  -88.,   -5.],       [   1., -105.,    0.],       [  41.,  -93.,    0.],       [  70.,  -69.,    1.],       [  87.,  -43.,   -2.],       [  45.,    4.,    0.],       [  47.,   16.,    7.],       [  35.,   33.,    3.],       [  14.,   44.,    0.],       [   1.,   46.,    3.],       [ -23.,   45.,    5.],       [ -40.,   39.,    6.],       [ -49.,   21.,    4.],       [ -52.,   -1.,    8.],       [ -51.,  -19.,    7.],       [ -36.,  -33.,    2.],       [ -23.,  -43.,    1.],       [  -1.,  -51.,    4.],       [  23.,  -49.,    5.],       [  38.,  -33.,    4.],       [  48.,  -17.,    3.],       [  57.,   -2.,    8.],       [  57.,   24.,    4.],       [  39.,   36.,    3.],       [  26.,   53.,    9.],       [  -5.,   54.,    6.],       [ -20.,   54.,    1.],       [ -46.,   40.,    1.],       [ -49.,   21.,    2.],       [ -60.,    4.,    0.],       [ -58.,  -17.,    9.],       [ -45.,  -43.,    9.],       [ -26.,  -58.,    2.],       [   1.,  -53.,    5.],       [  17.,  -54.,    2.],       [  43.,  -37.,    2.],       [  50.,  -25.,    4.],       [  66.,   -3.,    0.],       [  59.,   25.,    8.],       [  41.,   41.,    6.],       [  23.,   61.,    7.],       [  -4.,   64.,    2.],       [ -28.,   59.,    7.],       [ -42.,   42.,    3.],       [ -58.,   23.,    4.],       [ -64.,    4.,    8.],       [ -56.,  -25.,    7.],       [ -46.,  -42.,    6.],       [ -27.,  -58.,    9.],       [   3.,  -67.,    0.],       [  27.,  -58.,    7.],       [  45.,  -46.,    3.],       [  61.,  -29.,    4.],       [  72.,   -1.,    9.],       [  65.,   25.,    6.],       [  50.,   48.,    9.],       [  23.,   61.,    5.],       [   2.,   72.,    4.],       [ -23.,   62.,    9.],       [ -52.,   45.,    8.],       [ -69.,   28.,    5.],       [ -70.,   -4.,    4.],       [ -67.,  -27.,    5.],       [ -47.,  -53.,    4.],       [ -30.,  -65.,    5.],       [   3.,  -72.,    7.],       [  22.,  -70.,    1.],       [  47.,  -47.,    9.],       [  66.,  -31.,    3.],       [  73.,   -5.,    5.],       [  73.,   30.,    7.],       [  57.,   57.,    5.],       [  30.,   75.,    4.],       [  -3.,   82.,    9.],       [ -31.,   68.,    2.],       [ -60.,   58.,    4.],       [ -77.,   28.,    2.],       [ -84.,   -2.,    7.],       [ -76.,  -35.,    7.],       [ -52.,  -61.,    2.],       [ -29.,  -70.,    3.],       [  -5.,  -81.,    9.],       [  28.,  -78.,    8.],       [  54.,  -56.,    3.],       [  72.,  -29.,    1.],       [  86.,    4.,    9.],       [  78.,   36.,    4.],       [  60.,   59.,    2.],       [  35.,   81.,    1.],       [  -3.,   83.,    1.],       [ -30.,   83.,    3.],       [ -58.,   58.,    0.],       [ -82.,   36.,    4.],       [ -81.,   -2.,    6.],       [ -82.,  -32.,    2.],       [ -62.,  -62.,    0.],       [ -31.,  -75.,    8.],       [   4.,  -81.,    6.],       [  29.,  -75.,    7.],       [  57.,  -62.,    5.],       [  82.,  -33.,    1.],       [  93.,    1.,    7.],       [  81.,   31.,    1.],       [  62.,   64.,    0.],       [  40.,   83.,    4.],       [   2.,   95.,    2.],       [ -31.,   89.,    1.],       [ -62.,   67.,    1.],       [ -87.,   32.,    9.],       [ -96.,    1.,    2.],       [ -81.,  -35.,    5.],       [ -69.,  -66.,    4.],       [ -38.,  -85.,    8.],       [  -3.,  -88.,    0.],       [  39.,  -90.,    1.],       [  69.,  -67.,    2.],       [  89.,  -38.,    6.],       [ 101.,    0.,    8.],       [  89.,   34.,    5.],       [  68.,   70.,    2.],       [  41.,   90.,    2.],       [  -5.,  100.,    2.],       [ -40.,   93.,    1.],       [ -67.,   70.,    7.],       [ -93.,   37.,    4.],       [-105.,   -1.,    9.],       [ -90.,  -39.,    4.],       [ -74.,  -67.,    8.],       [ -38.,  -92.,    3.],       [  -5., -102.,    5.],       [  37.,  -94.,    0.],       [  68.,  -70.,    1.],       [  89.,  -42.,    5.],       [  49.,    0.,   11.],       [  44.,   22.,   13.],       [  39.,   39.,    5.],       [  15.,   47.,   14.],       [   4.,   46.,    6.],       [ -16.,   49.,   12.],       [ -36.,   40.,   13.],       [ -42.,   15.,    7.],       [ -47.,    0.,   14.],       [ -46.,  -22.,   12.],       [ -31.,  -41.,   13.],       [ -24.,  -43.,    5.],       [  -2.,  -48.,    5.],       [  22.,  -42.,   10.],       [  39.,  -40.,    6.],       [  41.,  -19.,    6.],       [  61.,   -5.,   14.],       [  52.,   19.,   13.],       [  39.,   38.,    9.],       [  23.,   54.,    5.],       [  -4.,   53.,   13.],       [ -24.,   49.,    7.],       [ -45.,   43.,   10.],       [ -52.,   23.,    6.],       [ -59.,   -4.,    7.],       [ -54.,  -19.,    9.],       [ -40.,  -38.,   13.],       [ -17.,  -52.,    9.],       [  -3.,  -59.,    6.],       [  18.,  -57.,   12.],       [  42.,  -37.,   12.],       [  50.,  -19.,   10.],       [  65.,   -1.,   13.],       [  62.,   25.,    9.],       [  49.,   48.,    5.],       [  26.,   63.,    7.],       [   2.,   63.,   13.],       [ -26.,   55.,   10.],       [ -49.,   48.,    8.],       [ -63.,   28.,   11.],       [ -69.,   -5.,   10.],       [ -63.,  -26.,   12.],       [ -48.,  -48.,   13.],       [ -29.,  -59.,    9.],       [   1.,  -67.,    5.],       [  21.,  -60.,   11.],       [  48.,  -43.,   14.],       [  62.,  -21.,   13.],       [  75.,    3.,   11.],       [  70.,   27.,    5.],       [  53.,   50.,    9.],       [  27.,   65.,   12.],       [  -3.,   68.,   13.],       [ -25.,   66.,    6.],       [ -48.,   50.,   13.],       [ -62.,   29.,    6.],       [ -69.,    3.,   10.],       [ -69.,  -28.,   13.],       [ -53.,  -54.,    9.],       [ -24.,  -68.,   10.],       [  -4.,  -68.,    7.],       [  22.,  -67.,    6.],       [  47.,  -47.,    8.],       [  63.,  -29.,   13.],       [  76.,   -3.,    6.],       [  70.,   26.,   10.],       [  52.,   58.,    5.],       [  29.,   77.,    6.],       [   4.,   78.,    7.],       [ -30.,   70.,    9.],       [ -55.,   54.,   11.],       [ -70.,   29.,   14.],       [ -83.,   -1.,    9.],       [ -73.,  -28.,   13.],       [ -52.,  -59.,    6.],       [ -31.,  -78.,   13.],       [  -3.,  -83.,    7.],       [  26.,  -70.,   14.],       [  50.,  -52.,   13.],       [  69.,  -28.,    8.],       [  87.,   -4.,   14.],       [  74.,   32.,   14.],       [  61.,   58.,    5.],       [  29.,   83.,    9.],       [  -1.,   88.,    9.],       [ -31.,   83.,   10.],       [ -62.,   55.,    5.],       [ -76.,   30.,   12.],       [ -89.,    2.,   14.],       [ -76.,  -32.,   11.],       [ -58.,  -62.,    7.],       [ -31.,  -84.,    7.],       [   3.,  -87.,   12.],       [  28.,  -82.,   12.],       [  64.,  -61.,   13.],       [  78.,  -37.,    6.],       [  88.,    0.,   14.],       [  88.,   37.,    9.],       [  69.,   63.,    6.],       [  33.,   89.,    9.],       [   2.,   91.,    5.],       [ -38.,   81.,   13.],       [ -64.,   68.,    5.],       [ -86.,   36.,   14.],       [ -94.,   -5.,   10.],       [ -89.,  -39.,    5.],       [ -66.,  -71.,   12.],       [ -33.,  -84.,   12.],       [   2.,  -95.,    9.],       [  31.,  -85.,    8.],       [  70.,  -70.,    8.],       [  81.,  -40.,    7.],       [ 101.,    4.,   12.],       [  92.,   36.,    9.],       [  74.,   73.,   10.],       [  36.,   93.,   14.],       [   0.,  104.,   12.],       [ -36.,   91.,   10.],       [ -74.,   70.,    7.],       [ -93.,   42.,   12.],       [-100.,   -1.,    6.],       [ -89.,  -41.,    6.],       [ -76.,  -70.,   11.],       [ -36.,  -93.,    8.],       [  -1., -103.,    7.],       [  40.,  -91.,   11.],       [  67.,  -69.,    5.],       [  95.,  -43.,    7.],       [  54.,    2.,   11.],       [  46.,   19.,   15.],       [  36.,   40.,   15.],       [  22.,   45.,   16.],       [  -4.,   50.,   15.],       [ -17.,   51.,   13.],       [ -33.,   36.,   12.],       [ -51.,   18.,   18.],       [ -48.,    3.,   11.],       [ -42.,  -23.,   12.],       [ -37.,  -38.,   18.],       [ -18.,  -48.,   12.],       [  -5.,  -47.,   13.],       [  16.,  -42.,   15.],       [  32.,  -39.,   19.],       [  42.,  -15.,   17.],       [  56.,   -5.,   17.],       [  57.,   20.,   14.],       [  36.,   38.,   15.],       [  18.,   56.,   17.],       [   4.,   61.,   16.],       [ -25.,   56.,   19.],       [ -42.,   37.,   13.],       [ -55.,   22.,   19.],       [ -59.,   -4.,   10.],       [ -53.,  -25.,   12.],       [ -37.,  -43.,   10.],       [ -25.,  -50.,   10.],       [  -3.,  -61.,   12.],       [  23.,  -54.,   18.],       [  36.,  -43.,   16.],       [  52.,  -18.,   13.],       [  67.,   -5.,   13.],       [  57.,   20.,   12.],       [  50.,   43.,   14.],       [  29.,   59.,   19.],       [  -2.,   59.,   18.],       [ -27.,   56.,   19.],       [ -44.,   41.,   13.],       [ -55.,   26.,   18.],       [ -69.,    3.,   12.],       [ -56.,  -26.,   10.],       [ -49.,  -51.,   12.],       [ -22.,  -59.,   19.],       [   2.,  -64.,   12.],       [  26.,  -55.,   18.],       [  46.,  -46.,   12.],       [  60.,  -28.,   16.],       [  66.,   -5.,   10.],       [  66.,   22.,   16.],       [  54.,   50.,   16.],       [  31.,   65.,   11.],       [  -2.,   66.,   14.],       [ -32.,   67.,   16.],       [ -48.,   47.,   19.],       [ -69.,   25.,   16.],       [ -74.,   -2.,   16.],       [ -63.,  -24.,   16.],       [ -53.,  -48.,   12.],       [ -27.,  -71.,   14.],       [   0.,  -74.,   15.],       [  24.,  -63.,   19.],       [  46.,  -51.,   17.],       [  63.,  -33.,   17.],       [  77.,    4.,   18.],       [  67.,   26.,   12.],       [  59.,   52.,   12.],       [  32.,   67.,   14.],       [   1.,   76.,   18.],       [ -26.,   67.,   10.],       [ -60.,   52.,   14.],       [ -77.,   31.,   18.],       [ -83.,   -4.,   11.],       [ -76.,  -35.,   18.],       [ -56.,  -59.,   16.],       [ -35.,  -72.,   18.],       [  -1.,  -82.,   10.],       [  34.,  -76.,   10.],       [  51.,  -61.,   10.],       [  71.,  -26.,   10.],       [  87.,   -2.,   17.],       [  83.,   31.,   12.],       [  55.,   62.,   10.],       [  29.,   80.,   15.],       [  -1.,   83.,   17.],       [ -34.,   74.,   11.],       [ -58.,   57.,   15.],       [ -84.,   32.,   19.],       [ -90.,    2.,   19.],       [ -75.,  -35.,   16.],       [ -65.,  -66.,   14.],       [ -31.,  -82.,   19.],       [  -4.,  -90.,   15.],       [  35.,  -81.,   12.],       [  58.,  -57.,   15.],       [  78.,  -38.,   14.],       [  92.,   -4.,   15.],       [  82.,   30.,   19.],       [  62.,   66.,   16.],       [  35.,   89.,   19.],       [  -3.,   95.,   14.],       [ -36.,   83.,   17.],       [ -63.,   64.,   12.],       [ -83.,   37.,   17.],       [ -89.,   -4.,   11.],       [ -91.,  -35.,   11.],       [ -62.,  -69.,   13.],       [ -39.,  -86.,   14.],       [   4.,  -95.,   15.],       [  33.,  -87.,   15.],       [  63.,  -64.,   15.],       [  88.,  -39.,   11.],       [ 101.,   -1.,   18.],       [  94.,   36.,   15.],       [  66.,   74.,   11.],       [  36.,   96.,   18.],       [   3.,   95.,   12.],       [ -34.,   94.,   12.],       [ -75.,   66.,   14.],       [ -92.,   38.,   16.],       [-103.,   -3.,   10.],       [ -91.,  -40.,   18.],       [ -74.,  -71.,   17.],       [ -34.,  -96.,   11.],       [   2.,  -99.,   10.],       [  37.,  -97.,   16.],       [  66.,  -75.,   11.],       [  87.,  -40.,   17.],       [  54.,    3.,   17.],       [  43.,   20.,   17.],       [  31.,   36.,   17.],       [  18.,   50.,   20.],       [  -1.,   51.,   15.],       [ -24.,   46.,   23.],       [ -37.,   39.,   17.],       [ -46.,   15.,   22.],       [ -52.,   -4.,   19.],       [ -47.,  -20.,   17.],       [ -33.,  -32.,   23.],       [ -16.,  -47.,   21.],       [   4.,  -46.,   20.],       [  21.,  -50.,   17.],       [  36.,  -37.,   21.],       [  50.,  -22.,   21.],       [  56.,    1.,   16.],       [  49.,   18.,   15.],       [  44.,   36.,   21.],       [  20.,   57.,   17.],       [   0.,   60.,   20.],       [ -19.,   52.,   20.],       [ -38.,   37.,   20.],       [ -57.,   20.,   16.],       [ -59.,    1.,   19.],       [ -55.,  -19.,   18.],       [ -43.,  -38.,   21.],       [ -26.,  -55.,   18.],       [  -2.,  -63.,   17.],       [  22.,  -51.,   19.],       [  39.,  -40.,   22.],       [  54.,  -27.,   19.],       [  66.,   -3.,   15.],       [  62.,   22.,   17.],       [  40.,   49.,   24.],       [  25.,   62.,   22.],       [  -5.,   67.,   21.],       [ -30.,   60.,   21.],       [ -49.,   48.,   15.],       [ -63.,   27.,   17.],       [ -65.,   -1.,   21.],       [ -63.,  -28.,   18.],       [ -47.,  -42.,   24.],       [ -29.,  -63.,   21.],       [   1.,  -68.,   21.],       [  20.,  -62.,   19.],       [  43.,  -49.,   23.],       [  63.,  -30.,   17.],       [  71.,    2.,   17.],       [  69.,   28.,   17.],       [  52.,   51.,   20.],       [  26.,   63.,   21.],       [   1.,   69.,   18.],       [ -25.,   61.,   20.],       [ -53.,   53.,   21.],       [ -63.,   28.,   17.],       [ -68.,   -2.,   23.],       [ -67.,  -24.,   18.],       [ -50.,  -48.,   22.],       [ -24.,  -64.,   15.],       [   2.,  -73.,   18.],       [  28.,  -67.,   20.],       [  53.,  -47.,   21.],       [  65.,  -32.,   19.],       [  82.,   -4.,   17.],       [  77.,   25.,   24.],       [  57.,   51.,   22.],       [  27.,   69.,   19.],       [   0.,   81.,   20.],       [ -34.,   68.,   23.],       [ -59.,   55.,   24.],       [ -75.,   33.,   22.],       [ -82.,    3.,   19.],       [ -72.,  -27.,   24.],       [ -54.,  -54.,   15.],       [ -26.,  -69.,   23.],       [   4.,  -78.,   22.],       [  28.,  -72.,   20.],       [  58.,  -54.,   16.],       [  76.,  -35.,   17.],       [  83.,    1.,   17.],       [  79.,   32.,   24.],       [  61.,   56.,   17.],       [  37.,   75.,   23.],       [  -4.,   89.,   23.],       [ -34.,   81.,   17.],       [ -62.,   62.,   20.],       [ -80.,   34.,   16.],       [ -82.,   -5.,   24.],       [ -76.,  -33.,   19.],       [ -65.,  -58.,   24.],       [ -29.,  -83.,   24.],       [   2.,  -88.,   23.],       [  27.,  -77.,   19.],       [  64.,  -61.,   23.],       [  83.,  -31.,   17.],       [  96.,    1.,   23.],       [  90.,   35.,   18.],       [  66.,   69.,   20.],       [  36.,   85.,   24.],       [   3.,   90.,   15.],       [ -41.,   85.,   15.],       [ -69.,   62.,   18.],       [ -82.,   39.,   16.],       [ -98.,   -5.,   24.],       [ -81.,  -38.,   21.],       [ -65.,  -70.,   19.],       [ -37.,  -90.,   16.],       [  -3.,  -89.,   19.],       [  33.,  -88.,   19.],       [  68.,  -62.,   15.],       [  90.,  -38.,   17.],       [  96.,   -1.,   17.],       [  87.,   34.,   20.],       [  73.,   75.,   23.],       [  40.,   96.,   21.],       [  -2.,   99.,   19.],       [ -38.,   90.,   19.],       [ -74.,   67.,   16.],       [ -92.,   39.,   16.],       [ -99.,   -2.,   23.],       [ -90.,  -42.,   15.],       [ -74.,  -76.,   15.],       [ -43.,  -90.,   18.],       [  -1.,  -96.,   24.],       [  39.,  -96.,   17.],       [  75.,  -68.,   15.],       [  94.,  -41.,   20.],       [  45.,    0.,   24.],       [  47.,   21.,   29.],       [  36.,   39.,   26.],       [  16.,   49.,   26.],       [   1.,   52.,   23.],       [ -20.,   49.,   22.],       [ -40.,   34.,   22.],       [ -46.,   20.,   29.],       [ -46.,   -2.,   29.],       [ -50.,  -24.,   29.],       [ -39.,  -35.,   25.],       [ -24.,  -48.,   20.],       [  -2.,  -52.,   24.],       [  15.,  -47.,   21.],       [  39.,  -38.,   21.],       [  45.,  -16.,   22.],       [  53.,    2.,   26.],       [  50.,   21.,   28.],       [  42.,   36.,   28.],       [  18.,   48.,   22.],       [  -4.,   57.,   26.],       [ -22.,   48.,   24.],       [ -44.,   40.,   29.],       [ -50.,   25.,   26.],       [ -58.,   -4.,   29.],       [ -52.,  -25.,   24.],       [ -42.,  -46.,   25.],       [ -22.,  -48.,   26.],       [   1.,  -57.,   26.],       [  25.,  -55.,   24.],       [  36.,  -46.,   22.],       [  54.,  -21.,   21.],       [  67.,    2.,   20.],       [  63.,   21.,   22.],       [  41.,   45.,   23.],       [  26.,   54.,   26.],       [  -4.,   63.,   21.],       [ -21.,   61.,   22.],       [ -51.,   41.,   26.],       [ -61.,   28.,   23.],       [ -60.,   -2.,   23.],       [ -58.,  -24.,   23.],       [ -45.,  -44.,   29.],       [ -22.,  -60.,   21.],       [  -5.,  -69.,   24.],       [  23.,  -57.,   20.],       [  46.,  -50.,   22.],       [  56.,  -29.,   21.],       [  69.,   -3.,   25.],       [  66.,   24.,   23.],       [  46.,   53.,   27.],       [  32.,   66.,   20.],       [  -5.,   73.,   23.],       [ -24.,   61.,   21.],       [ -48.,   48.,   26.],       [ -66.,   23.,   24.],       [ -76.,   -3.,   25.],       [ -65.,  -32.,   23.],       [ -55.,  -54.,   25.],       [ -26.,  -68.,   28.],       [  -4.,  -75.,   27.],       [  29.,  -62.,   26.],       [  50.,  -49.,   26.],       [  69.,  -30.,   21.],       [  75.,    0.,   23.],       [  73.,   31.,   20.],       [  56.,   60.,   29.],       [  34.,   74.,   20.],       [   2.,   79.,   26.],       [ -28.,   69.,   20.],       [ -52.,   59.,   20.],       [ -71.,   26.,   22.],       [ -77.,    3.,   26.],       [ -70.,  -31.,   20.],       [ -58.,  -53.,   26.],       [ -31.,  -75.,   29.],       [  -3.,  -77.,   21.],       [  34.,  -74.,   22.],       [  52.,  -53.,   22.],       [  76.,  -26.,   28.],       [  87.,   -4.,   21.],       [  80.,   35.,   20.],       [  65.,   58.,   22.],       [  32.,   77.,   22.],       [  -2.,   83.,   27.],       [ -33.,   82.,   24.],       [ -65.,   62.,   27.],       [ -81.,   37.,   21.],       [ -87.,   -3.,   25.],       [ -78.,  -32.,   21.],       [ -60.,  -64.,   23.],       [ -38.,  -82.,   25.],       [  -3.,  -84.,   29.],       [  35.,  -80.,   25.],       [  58.,  -61.,   22.],       [  75.,  -28.,   24.],       [  96.,    4.,   23.],       [  84.,   31.,   28.],       [  69.,   62.,   25.],       [  31.,   83.,   21.],       [   2.,   88.,   24.],       [ -36.,   82.,   27.],       [ -67.,   65.,   25.],       [ -87.,   32.,   29.],       [ -90.,   -1.,   22.],       [ -85.,  -34.,   29.],       [ -62.,  -69.,   22.],       [ -37.,  -88.,   28.],       [  -1.,  -97.,   29.],       [  31.,  -91.,   26.],       [  70.,  -71.,   26.],       [  82.,  -34.,   26.],       [  99.,   -4.,   24.],       [  92.,   36.,   24.],       [  68.,   74.,   28.],       [  34.,   87.,   20.],       [   3.,   95.,   26.],       [ -36.,   93.,   21.],       [ -67.,   66.,   28.],       [ -93.,   36.,   25.],       [ -96.,   -2.,   26.],       [ -89.,  -38.,   22.],       [ -70.,  -75.,   24.],       [ -41.,  -91.,   25.],       [   0.,  -96.,   22.],       [  38.,  -94.,   20.],       [  67.,  -71.,   25.],       [  94.,  -43.,   27.],       [  53.,    3.,   27.],       [  42.,   21.,   31.],       [  36.,   31.,   26.],       [  21.,   50.,   25.],       [  -5.,   53.,   32.],       [ -23.,   42.,   26.],       [ -37.,   35.,   33.],       [ -42.,   22.,   27.],       [ -55.,    1.,   27.],       [ -51.,  -22.,   27.],       [ -33.,  -40.,   25.],       [ -19.,  -46.,   27.],       [   3.,  -53.,   31.],       [  20.,  -49.,   32.],       [  38.,  -32.,   26.],       [  46.,  -18.,   25.],       [  53.,    3.,   31.],       [  52.,   18.,   25.],       [  38.,   39.,   32.],       [  17.,   50.,   32.],       [  -2.,   59.,   28.],       [ -18.,   53.,   29.],       [ -44.,   44.,   30.],       [ -55.,   21.,   26.],       [ -59.,   -1.,   27.],       [ -55.,  -22.,   27.],       [ -37.,  -42.,   31.],       [ -20.,  -54.,   31.],       [   4.,  -56.,   29.],       [  24.,  -58.,   30.],       [  36.,  -42.,   30.],       [  50.,  -25.,   32.],       [  63.,    4.,   30.],       [  62.,   28.,   32.],       [  42.,   42.,   29.],       [  23.,   62.,   28.],       [   3.,   64.,   29.],       [ -27.,   59.,   30.],       [ -42.,   44.,   26.],       [ -63.,   25.,   27.],       [ -64.,    2.,   27.],       [ -61.,  -24.,   28.],       [ -50.,  -50.,   30.],       [ -28.,  -57.,   32.],       [   4.,  -69.,   28.],       [  25.,  -64.,   25.],       [  41.,  -45.,   33.],       [  62.,  -28.,   29.],       [  75.,    2.,   28.],       [  64.,   24.,   34.],       [  46.,   49.,   31.],       [  24.,   66.,   25.],       [  -2.,   72.,   26.],       [ -30.,   66.,   30.],       [ -47.,   46.,   28.],       [ -64.,   30.,   27.],       [ -71.,    0.,   28.],       [ -62.,  -27.,   32.],       [ -47.,  -54.,   29.],       [ -27.,  -69.,   27.],       [   3.,  -70.,   31.],       [  28.,  -70.,   28.],       [  48.,  -54.,   29.],       [  70.,  -29.,   30.],       [  77.,   -1.,   27.],       [  75.,   32.,   33.],       [  57.,   60.,   30.],       [  33.,   76.,   32.],       [  -4.,   82.,   33.],       [ -35.,   77.,   28.],       [ -53.,   56.,   32.],       [ -71.,   31.,   31.],       [ -78.,    2.,   30.],       [ -77.,  -34.,   33.],       [ -53.,  -52.,   32.],       [ -33.,  -69.,   26.],       [   0.,  -81.,   29.],       [  28.,  -76.,   30.],       [  52.,  -52.,   34.],       [  74.,  -30.,   30.],       [  84.,   -2.,   26.],       [  81.,   29.,   30.],       [  60.,   65.,   28.],       [  29.,   82.,   33.],       [   3.,   81.,   26.],       [ -32.,   78.,   26.],       [ -58.,   60.,   33.],       [ -79.,   32.,   32.],       [ -87.,   -3.,   31.],       [ -79.,  -31.,   26.],       [ -58.,  -59.,   26.],       [ -30.,  -84.,   32.],       [  -2.,  -85.,   30.],       [  37.,  -85.,   31.],       [  61.,  -56.,   33.],       [  77.,  -37.,   32.],       [  91.,    2.,   34.],       [  84.,   40.,   28.],       [  69.,   64.,   25.],       [  34.,   87.,   27.],       [   2.,   95.,   28.],       [ -37.,   86.,   25.],       [ -63.,   61.,   25.],       [ -83.,   38.,   31.],       [ -94.,    4.,   33.],       [ -82.,  -35.,   26.],       [ -67.,  -70.,   31.],       [ -33.,  -88.,   26.],       [   3.,  -95.,   32.],       [  36.,  -85.,   28.],       [  61.,  -67.,   29.],       [  84.,  -35.,   28.],       [ 103.,    1.,   27.],       [  93.,   40.,   29.],       [  69.,   71.,   33.],       [  42.,   88.,   29.],       [   0.,   98.,   33.],       [ -40.,   91.,   29.],       [ -73.,   67.,   28.],       [ -98.,   38.,   27.],       [-105.,    1.,   26.],       [ -95.,  -42.,   25.],       [ -69.,  -72.,   30.],       [ -44.,  -93.,   25.],       [   0., -101.,   29.],       [  38.,  -94.,   30.],       [  68.,  -70.,   31.],       [  87.,  -38.,   32.],       [  45.,    4.,   32.],       [  47.,   16.,   34.],       [  31.,   32.,   37.],       [  22.,   48.,   37.],       [  -1.,   52.,   32.],       [ -17.,   43.,   35.],       [ -37.,   32.,   30.],       [ -44.,   23.,   32.],       [ -54.,   -4.,   30.],       [ -43.,  -24.,   38.],       [ -37.,  -33.,   33.],       [ -20.,  -43.,   38.],       [   2.,  -48.,   34.],       [  21.,  -44.,   32.],       [  32.,  -37.,   30.],       [  48.,  -23.,   37.],       [  54.,    4.,   36.],       [  53.,   22.,   34.],       [  41.,   38.,   35.],       [  22.,   49.,   37.],       [   1.,   58.,   38.],       [ -23.,   54.,   30.],       [ -40.,   36.,   33.],       [ -54.,   25.,   38.],       [ -59.,    3.,   30.],       [ -53.,  -22.,   34.],       [ -42.,  -37.,   38.],       [ -21.,  -58.,   36.],       [   1.,  -56.,   38.],       [  25.,  -52.,   33.],       [  40.,  -44.,   36.],       [  53.,  -27.,   31.],       [  60.,   -3.,   36.],       [  60.,   26.,   36.],       [  45.,   42.,   32.],       [  28.,   59.,   35.],       [  -1.,   62.,   39.],       [ -25.,   63.,   35.],       [ -47.,   47.,   32.],       [ -56.,   21.,   33.],       [ -65.,   -2.,   31.],       [ -61.,  -24.,   37.],       [ -50.,  -50.,   30.],       [ -27.,  -55.,   33.],       [  -5.,  -64.,   38.],       [  28.,  -56.,   31.],       [  44.,  -46.,   32.],       [  62.,  -30.,   33.],       [  68.,    1.,   35.],       [  68.,   26.,   34.],       [  53.,   55.,   32.],       [  24.,   70.,   35.],       [  -5.,   69.,   31.],       [ -27.,   70.,   34.],       [ -53.,   51.,   33.],       [ -63.,   30.,   31.],       [ -77.,    2.,   37.],       [ -65.,  -26.,   38.],       [ -51.,  -49.,   39.],       [ -32.,  -65.,   31.],       [   0.,  -72.,   32.],       [  25.,  -62.,   33.],       [  54.,  -51.,   34.],       [  65.,  -30.,   30.],       [  82.,    3.,   30.],       [  76.,   34.,   35.],       [  56.,   51.,   38.],       [  33.,   69.,   33.],       [   4.,   82.,   38.],       [ -29.,   68.,   39.],       [ -57.,   57.,   36.],       [ -75.,   25.,   33.],       [ -84.,   -3.,   39.],       [ -77.,  -31.,   38.],       [ -59.,  -58.,   30.],       [ -31.,  -74.,   33.],       [   3.,  -74.,   30.],       [  30.,  -78.,   37.],       [  57.,  -55.,   39.],       [  74.,  -27.,   35.],       [  87.,   -3.,   30.],       [  80.,   32.,   30.],       [  63.,   61.,   32.],       [  34.,   78.,   35.],       [   4.,   87.,   35.],       [ -35.,   82.,   34.],       [ -62.,   58.,   31.],       [ -79.,   36.,   36.],       [ -82.,    1.,   32.],       [ -77.,  -30.,   32.],       [ -62.,  -64.,   38.],       [ -32.,  -81.,   31.],       [   4.,  -85.,   38.],       [  30.,  -79.,   37.],       [  61.,  -65.,   30.],       [  77.,  -33.,   39.],       [  96.,   -4.,   37.],       [  80.,   37.,   35.],       [  70.,   67.,   36.],       [  32.,   89.,   35.],       [  -2.,   94.,   36.],       [ -33.,   89.,   39.],       [ -64.,   62.,   35.],       [ -91.,   35.,   31.],       [ -96.,    2.,   37.],       [ -82.,  -33.,   37.],       [ -63.,  -65.,   38.],       [ -35.,  -90.,   33.],       [   2.,  -95.,   34.],       [  31.,  -88.,   32.],       [  69.,  -69.,   32.],       [  85.,  -33.,   30.],       [  98.,    0.,   32.],       [  92.,   35.,   34.],       [  73.,   66.,   38.],       [  35.,   89.,   39.],       [   3.,   99.,   38.],       [ -41.,   90.,   32.],       [ -67.,   74.,   37.],       [ -97.,   34.,   30.],       [-103.,    3.,   37.],       [ -90.,  -37.,   31.],       [ -68.,  -74.,   35.],       [ -43.,  -91.,   33.],       [  -2., -102.,   35.],       [  34.,  -92.,   31.],       [  66.,  -67.,   36.],       [  87.,  -37.,   30.],       [  53.,   -3.,   36.],       [  43.,   22.,   44.],       [  32.,   33.,   35.],       [  20.,   47.,   37.],       [  -2.,   45.,   39.],       [ -21.,   46.,   36.],       [ -34.,   31.,   44.],       [ -49.,   15.,   40.],       [ -46.,   -3.,   37.],       [ -46.,  -19.,   38.],       [ -36.,  -33.,   38.],       [ -17.,  -44.,   40.],       [   4.,  -47.,   36.],       [  21.,  -47.,   37.],       [  34.,  -38.,   38.],       [  43.,  -18.,   36.],       [  59.,   -1.,   42.],       [  53.,   24.,   38.],       [  36.,   42.,   39.],       [  17.,   55.,   39.],       [  -4.,   55.,   40.],       [ -23.,   51.,   43.],       [ -39.,   38.,   41.],       [ -49.,   22.,   42.],       [ -60.,   -2.,   40.],       [ -58.,  -24.,   35.],       [ -46.,  -45.,   41.],       [ -19.,  -48.,   38.],       [  -3.,  -57.,   42.],       [  24.,  -58.,   38.],       [  37.,  -41.,   35.],       [  56.,  -26.,   36.],       [  60.,    0.,   39.],       [  61.,   21.,   38.],       [  47.,   46.,   41.],       [  22.,   59.,   39.],       [   3.,   66.,   39.],       [ -21.,   59.,   39.],       [ -47.,   44.,   35.],       [ -61.,   27.,   42.],       [ -60.,    2.,   35.],       [ -63.,  -21.,   35.],       [ -45.,  -42.,   39.],       [ -30.,  -55.,   43.],       [  -1.,  -66.,   41.],       [  25.,  -63.,   44.],       [  42.,  -47.,   37.],       [  60.,  -25.,   35.],       [  75.,   -3.,   41.],       [  68.,   27.,   35.],       [  49.,   49.,   43.],       [  27.,   62.,   36.],       [   3.,   74.,   39.],       [ -25.,   62.,   35.],       [ -49.,   55.,   43.],       [ -67.,   24.,   41.],       [ -70.,   -2.,   42.],       [ -67.,  -28.,   42.],       [ -51.,  -51.,   35.],       [ -24.,  -62.,   41.],       [  -1.,  -72.,   35.],       [  31.,  -67.,   40.],       [  46.,  -52.,   35.],       [  64.,  -30.,   36.],       [  81.,    4.,   36.],       [  72.,   34.,   41.],       [  57.,   59.,   40.],       [  31.,   74.,   41.],       [  -5.,   81.,   42.],       [ -35.,   68.,   44.],       [ -55.,   55.,   44.],       [ -74.,   29.,   37.],       [ -78.,    0.,   38.],       [ -70.,  -26.,   40.],       [ -52.,  -54.,   43.],       [ -34.,  -71.,   41.],       [   0.,  -79.,   42.],       [  34.,  -72.,   44.],       [  57.,  -57.,   41.],       [  72.,  -29.,   44.],       [  86.,    4.,   37.],       [  77.,   29.,   36.],       [  64.,   59.,   37.],       [  35.,   83.,   36.],       [   2.,   86.,   43.],       [ -35.,   82.,   40.],       [ -58.,   61.,   40.],       [ -79.,   35.,   35.],       [ -82.,   -5.,   38.],       [ -77.,  -36.,   43.],       [ -59.,  -63.,   38.],       [ -33.,  -78.,   41.],       [   0.,  -89.,   39.],       [  29.,  -78.,   44.],       [  57.,  -60.,   44.],       [  75.,  -37.,   39.],       [  88.,    0.,   42.],       [  86.,   37.,   38.],       [  65.,   68.,   40.],       [  40.,   87.,   41.],       [  -3.,   96.,   40.],       [ -33.,   85.,   38.],       [ -62.,   69.,   43.],       [ -84.,   37.,   36.],       [ -94.,    3.,   41.],       [ -90.,  -36.,   37.],       [ -70.,  -67.,   44.],       [ -36.,  -89.,   39.],       [   2.,  -96.,   40.],       [  38.,  -84.,   36.],       [  69.,  -65.,   41.],       [  90.,  -40.,   40.],       [ 100.,   -5.,   38.],       [  93.,   38.,   37.],       [  66.,   70.,   42.],       [  39.,   89.,   39.],       [  -3.,   96.,   36.],       [ -35.,   93.,   38.],       [ -69.,   69.,   37.],       [ -91.,   39.,   41.],       [ -98.,    1.,   37.],       [ -97.,  -39.,   37.],       [ -70.,  -68.,   44.],       [ -34.,  -96.,   44.],       [  -1., -104.,   42.],       [  36.,  -96.,   39.],       [  69.,  -69.,   42.],       [  88.,  -38.,   40.]])
        basis0 = BSplineBasis(7, np.array([ -2.2,  -1.4,   0. ,   0. ,   0. ,   0. ,   0. ,   1.1,   1.8,   2.8,   4.1,   5. ,   6.3,
         7. ,   7.8,   8.6,   9.8,  10.6,  12. ,  12. ,  12. ,  12. ,  12. ,  13.1,  13.8]),1)
        basis1 = BSplineBasis(7, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0.6,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ]))
        basis2 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.2,  2.3,  2.9,  4. ,  4. ,  4. ,  4. ,  4. ,  4. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,False)
        vol2 = vol.clone()
        vol2.insert_knot(0, [5.044]*1) # insert C5-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 26)
        vol2.insert_knot(0, [7.530]*2) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 28)
        vol2.insert_knot(0, [2.478]*3) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 31)
        vol2.insert_knot(0, [7.905]*4) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 35)
        vol2.insert_knot(0, [10.591]*5) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 40)
        vol2.insert_knot(0, [8.294]*6) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 46)
        vol2.insert_knot(1, [0.600]*1) # insert C5-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 16)
        vol2.insert_knot(1, [0.600]*2) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 18)
        vol2.insert_knot(1, [0.600]*3) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 21)
        vol2.insert_knot(1, [0.600]*4) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 25)
        vol2.insert_knot(1, [0.600]*5) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 30)
        vol2.insert_knot(1, [0.600]*6) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 36)
        vol2.insert_knot(2, [2.040]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 16)
        vol2.insert_knot(2, [1.307]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 18)
        vol2.insert_knot(2, [1.986]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 21)
        vol2.insert_knot(2, [2.156]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 25)
        vol2.insert_knot(2, [2.356]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 30)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_curve_3D_p7_C2_periodic(self):
        controlpoints = np.array([[ 103.,    0.,    2.],
       [  96.,   31.,    1.],
       [  74.,   62.,    3.],
       [  53.,   81.,   -4.],
       [  14.,   96.,    3.],
       [ -20.,  103.,   -2.],
       [ -54.,   90.,   -4.],
       [ -75.,   60.,   -5.],
       [ -91.,   29.,    0.],
       [-101.,   -4.,   -5.],
       [ -92.,  -37.,    2.],
       [ -74.,  -61.,   -4.],
       [ -46.,  -91.,   -5.],
       [ -15., -102.,    4.],
       [  15.,  -96.,    4.],
       [  53.,  -89.,   -1.],
       [  72.,  -68.,   -3.],
       [  98.,  -37.,   -3.]])
        basis0 = BSplineBasis(7, np.array([ -2.7,  -1.9,  -1.3,   0. ,   0. ,   0. ,   0. ,   0.6,   1.7,   3.3,   4.4,   5.4,   6.1,
         7.4,   7.8,   9.1,   9.6,  11. ,  12.3,  13.1,  13.7,  15. ,  15. ,  15. ,  15. ,  15.6,
        16.7,  18.3]),2)
        crv  = Curve(basis0, controlpoints,False)
        crv2 = crv.clone()
        crv2.insert_knot([4.705]*1) # insert C5-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 29)
        crv2.insert_knot([5.200]*2) # insert C4-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 31)
        crv2.insert_knot([6.277]*3) # insert C3-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 34)
        crv2.insert_knot([1.255]*4) # insert C2-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 38)
        crv2.insert_knot([13.416]*5) # insert C1-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 43)
        crv2.insert_knot([2.783]*6) # insert C0-knot
        self.assertEqual(len(crv2.knots(direction=0,with_multiplicities=True)), 49)

        u    = np.linspace(crv.start(0), crv.end(0), 13)
        pt   = crv(u)
        pt2  = crv2(u)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_surface_3D_p75_C2_periodic(self):
        controlpoints = np.array([[  59.,    2.,    1.],       [  57.,   24.,   -3.],       [  46.,   34.,    2.],       [  25.,   55.,    3.],       [   5.,   63.,    1.],       [ -13.,   55.,    1.],       [ -27.,   53.,    3.],       [ -50.,   38.,    1.],       [ -54.,   15.,    1.],       [ -64.,    0.,    2.],       [ -54.,  -20.,   -1.],       [ -43.,  -38.,    1.],       [ -33.,  -52.,   -2.],       [ -16.,  -57.,    0.],       [  15.,  -62.,   -4.],       [  29.,  -57.,    2.],       [  41.,  -43.,    2.],       [  57.,  -23.,   -1.],       [  62.,    4.,   -1.],       [  57.,   26.,    2.],       [  51.,   45.,   -1.],       [  32.,   53.,   -1.],       [   7.,   68.,    2.],       [ -13.,   61.,    1.],       [ -37.,   56.,   -4.],       [ -46.,   42.,    1.],       [ -59.,   22.,   -3.],       [ -68.,    1.,   -1.],       [ -59.,  -27.,   -2.],       [ -47.,  -41.,    2.],       [ -34.,  -60.,   -3.],       [  -7.,  -61.,    2.],       [  10.,  -66.,    3.],       [  30.,  -54.,    3.],       [  52.,  -42.,    3.],       [  60.,  -26.,   -4.],       [  69.,    2.,    3.],       [  65.,   29.,   -3.],       [  59.,   41.,    4.],       [  30.,   60.,    4.],       [  14.,   67.,   -1.],       [ -17.,   72.,   -3.],       [ -36.,   60.,    3.],       [ -56.,   44.,    1.],       [ -70.,   23.,    0.],       [ -74.,    2.,   -1.],       [ -64.,  -27.,    4.],       [ -50.,  -50.,   -5.],       [ -40.,  -60.,   -2.],       [ -13.,  -73.,   -3.],       [  12.,  -70.,    1.],       [  37.,  -61.,   -1.],       [  52.,  -44.,   -2.],       [  69.,  -22.,   -4.],       [  75.,    0.,   -2.],       [  71.,   26.,    4.],       [  63.,   49.,    0.],       [  35.,   62.,   -5.],       [  10.,   80.,    1.],       [ -15.,   79.,    0.],       [ -39.,   68.,   -4.],       [ -61.,   45.,   -1.],       [ -73.,   28.,    2.],       [ -75.,    1.,   -2.],       [ -76.,  -26.,   -4.],       [ -63.,  -53.,    4.],       [ -41.,  -68.,   -4.],       [ -12.,  -75.,   -3.],       [   8.,  -79.,   -3.],       [  41.,  -69.,   -2.],       [  57.,  -51.,    3.],       [  69.,  -29.,    3.],       [  85.,   -4.,   -2.],       [  76.,   29.,   -2.],       [  63.,   57.,    0.],       [  40.,   66.,    0.],       [  12.,   82.,   -4.],       [ -11.,   85.,   -1.],       [ -42.,   72.,    2.],       [ -65.,   48.,   -2.],       [ -81.,   29.,   -3.],       [ -84.,    0.,    1.],       [ -75.,  -32.,   -3.],       [ -59.,  -50.,    3.],       [ -42.,  -70.,   -3.],       [ -20.,  -80.,    4.],       [  18.,  -87.,   -2.],       [  43.,  -72.,    3.],       [  61.,  -58.,    2.],       [  77.,  -29.,    1.],       [  86.,   -1.,   -5.],       [  86.,   32.,   -4.],       [  69.,   60.,   -1.],       [  45.,   73.,   -5.],       [  12.,   82.,    2.],       [ -13.,   91.,    4.],       [ -47.,   75.,    2.],       [ -73.,   58.,   -3.],       [ -88.,   34.,   -5.],       [ -94.,   -4.,   -2.],       [ -85.,  -35.,    2.],       [ -69.,  -57.,   -3.],       [ -42.,  -76.,   -1.],       [ -18.,  -83.,    1.],       [  12.,  -93.,   -5.],       [  44.,  -75.,    4.],       [  69.,  -57.,    1.],       [  82.,  -28.,   -4.],       [  94.,    3.,   -3.],       [  85.,   31.,    2.],       [  72.,   63.,    0.],       [  47.,   80.,   -5.],       [  14.,   89.,   -2.],       [ -20.,   93.,    3.],       [ -52.,   83.,    2.],       [ -76.,   62.,    1.],       [ -91.,   36.,    2.],       [ -93.,   -2.,   -5.],       [ -89.,  -33.,    2.],       [ -76.,  -57.,   -5.],       [ -51.,  -80.,    1.],       [ -20.,  -98.,   -1.],       [  19.,  -91.,   -2.],       [  43.,  -85.,    3.],       [  69.,  -60.,    2.],       [  88.,  -30.,   -5.],       [ 101.,    3.,   -3.],       [  95.,   31.,   -5.],       [  77.,   67.,   -3.],       [  51.,   86.,   -2.],       [  18.,  100.,    3.],       [ -18.,  100.,    2.],       [ -47.,   85.,   -3.],       [ -78.,   60.,   -2.],       [ -97.,   38.,   -1.],       [-103.,   -1.,    1.],       [ -91.,  -33.,    1.],       [ -81.,  -64.,    2.],       [ -48.,  -85.,    4.],       [ -22., -101.,   -5.],       [  12.,  -94.,   -1.],       [  50.,  -83.,    0.],       [  75.,  -67.,    4.],       [  89.,  -31.,    3.]])
        basis0 = BSplineBasis(7, np.array([ -3.2,  -2.3,  -1.2,   0. ,   0. ,   0. ,   0. ,   1.3,   2.1,   3.2,   4.1,   5.3,   5.7,
         7.4,   8.3,   9.4,   9.7,  10.9,  11.8,  12.7,  13.8,  15. ,  15. ,  15. ,  15. ,  16.3,
        17.1,  18.2]),2)
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1. ,  2. ,  3.4,  4. ,  4. ,  4. ,  4. ,  4. ]))
        surf  = Surface(basis0, basis1, controlpoints,False)
        surf2 = surf.clone()
        surf2.insert_knot(0, [3.858]*1) # insert C5-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 29)
        surf2.insert_knot(0, [9.365]*2) # insert C4-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 31)
        surf2.insert_knot(0, [3.223]*3) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 34)
        surf2.insert_knot(0, [6.136]*4) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 38)
        surf2.insert_knot(0, [4.044]*5) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 43)
        surf2.insert_knot(0, [6.611]*6) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=0,with_multiplicities=True)), 49)
        surf2.insert_knot(1, [1.493]*1) # insert C3-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 14)
        surf2.insert_knot(1, [1.763]*2) # insert C2-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 16)
        surf2.insert_knot(1, [3.065]*3) # insert C1-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 19)
        surf2.insert_knot(1, [2.055]*4) # insert C0-knot
        self.assertEqual(len(surf2.knots(direction=1,with_multiplicities=True)), 23)

        u    = np.linspace(surf.start(0), surf.end(0), 9)
        v    = np.linspace(surf.start(1), surf.end(1), 9)
        pt   = surf(u,v)
        pt2  = surf2(u,v)

        self.assertAlmostEqual(np.max(pt-pt2), 0.0)

    def test_volume_3D_p656_C2_periodic(self):
        controlpoints = np.array([[  48.,   -1.,    2.],       [  46.,   15.,    0.],       [  37.,   34.,   -5.],       [  19.,   43.,   -4.],       [   4.,   45.,    2.],       [ -20.,   43.,    2.],       [ -40.,   38.,   -1.],       [ -46.,   18.,   -5.],       [ -52.,    4.,   -3.],       [ -47.,  -22.,    1.],       [ -34.,  -32.,    2.],       [ -16.,  -48.,   -1.],       [  -4.,  -49.,    0.],       [  16.,  -48.,   -2.],       [  31.,  -36.,   -4.],       [  49.,  -17.,    0.],       [  59.,    1.,   -5.],       [  47.,   26.,   -4.],       [  37.,   37.,   -2.],       [  19.,   52.,    1.],       [   2.,   57.,    3.],       [ -20.,   56.,    2.],       [ -44.,   38.,   -3.],       [ -54.,   21.,   -2.],       [ -54.,    0.,    1.],       [ -52.,  -19.,   -5.],       [ -40.,  -37.,   -2.],       [ -24.,  -55.,   -2.],       [  -4.,  -57.,    2.],       [  22.,  -53.,    2.],       [  37.,  -44.,    3.],       [  49.,  -22.,   -3.],       [  61.,   -4.,   -2.],       [  58.,   26.,    0.],       [  42.,   50.,   -4.],       [  22.,   61.,    1.],       [   4.,   68.,   -4.],       [ -20.,   59.,    1.],       [ -46.,   42.,    2.],       [ -60.,   23.,   -1.],       [ -66.,    4.,   -5.],       [ -61.,  -20.,    3.],       [ -48.,  -41.,   -3.],       [ -22.,  -55.,    2.],       [   0.,  -62.,   -4.],       [  27.,  -61.,   -4.],       [  44.,  -47.,    0.],       [  55.,  -23.,   -5.],       [  72.,    3.,   -2.],       [  62.,   29.,    2.],       [  49.,   49.,    4.],       [  31.,   68.,    3.],       [   3.,   67.,   -1.],       [ -27.,   65.,   -2.],       [ -55.,   54.,    4.],       [ -63.,   30.,    3.],       [ -70.,    3.,   -4.],       [ -69.,  -31.,   -1.],       [ -47.,  -50.,    4.],       [ -32.,  -63.,   -4.],       [  -1.,  -73.,    0.],       [  32.,  -64.,   -5.],       [  49.,  -51.,   -2.],       [  64.,  -25.,   -5.],       [  75.,    3.,   -4.],       [  71.,   28.,    1.],       [  58.,   55.,    3.],       [  25.,   71.,   -3.],       [   0.,   80.,   -1.],       [ -32.,   69.,   -3.],       [ -58.,   57.,    4.],       [ -74.,   27.,   -5.],       [ -84.,   -1.,   -5.],       [ -71.,  -27.,    0.],       [ -60.,  -59.,    2.],       [ -26.,  -69.,   -5.],       [   3.,  -81.,    2.],       [  27.,  -69.,   -4.],       [  55.,  -59.,   -2.],       [  74.,  -32.,   -4.],       [  82.,    0.,   -5.],       [  78.,   29.,   -2.],       [  59.,   57.,   -4.],       [  30.,   83.,   -5.],       [  -1.,   90.,    4.],       [ -34.,   80.,    4.],       [ -62.,   57.,    0.],       [ -77.,   35.,    0.],       [ -91.,    4.,    0.],       [ -82.,  -36.,   -1.],       [ -60.,  -57.,   -3.],       [ -31.,  -81.,   -3.],       [  -2.,  -83.,   -2.],       [  31.,  -82.,   -5.],       [  62.,  -57.,    3.],       [  80.,  -30.,   -3.],       [  91.,    1.,   -3.],       [  90.,   33.,    1.],       [  66.,   61.,    3.],       [  37.,   87.,    1.],       [  -2.,   88.,    2.],       [ -39.,   84.,    3.],       [ -64.,   66.,   -2.],       [ -90.,   34.,   -1.],       [ -92.,    0.,    1.],       [ -87.,  -37.,   -2.],       [ -62.,  -63.,   -4.],       [ -35.,  -90.,   -3.],       [   3.,  -91.,   -3.],       [  35.,  -87.,    4.],       [  63.,  -66.,    2.],       [  87.,  -33.,    1.],       [ 104.,    3.,   -5.],       [  88.,   38.,   -4.],       [  70.,   71.,    2.],       [  39.,   93.,   -1.],       [  -3.,  102.,    0.],       [ -36.,   96.,   -5.],       [ -68.,   71.,   -5.],       [ -90.,   40.,    1.],       [-100.,   -1.,   -5.],       [ -95.,  -37.,   -5.],       [ -68.,  -69.,    2.],       [ -42.,  -92.,   -5.],       [  -2.,  -97.,   -4.],       [  36.,  -95.,    0.],       [  67.,  -71.,   -5.],       [  92.,  -36.,   -1.],       [  48.,    0.,    7.],       [  42.,   14.,    4.],       [  31.,   37.,    5.],       [  15.,   46.,    5.],       [  -4.,   54.,    8.],       [ -15.,   46.,    7.],       [ -33.,   35.,    6.],       [ -48.,   19.,    4.],       [ -49.,    1.,    7.],       [ -50.,  -18.,    8.],       [ -37.,  -34.,   10.],       [ -20.,  -43.,    5.],       [   0.,  -54.,    7.],       [  15.,  -51.,    3.],       [  31.,  -31.,    5.],       [  45.,  -15.,    9.],       [  59.,   -2.,    2.],       [  52.,   18.,   10.],       [  36.,   45.,    4.],       [  17.,   55.,    7.],       [   0.,   58.,    9.],       [ -27.,   55.,    9.],       [ -39.,   44.,    2.],       [ -56.,   26.,   10.],       [ -59.,    2.,    6.],       [ -54.,  -21.,    4.],       [ -44.,  -44.,    7.],       [ -18.,  -49.,    6.],       [  -1.,  -59.,    4.],       [  25.,  -55.,   10.],       [  35.,  -44.,   10.],       [  55.,  -19.,    5.],       [  68.,    2.,    6.],       [  58.,   28.,   10.],       [  49.,   44.,    8.],       [  22.,   59.,    1.],       [   4.,   60.,    8.],       [ -21.,   60.,    4.],       [ -48.,   47.,    3.],       [ -55.,   29.,    0.],       [ -66.,    4.,    7.],       [ -59.,  -27.,    5.],       [ -46.,  -48.,    5.],       [ -28.,  -60.,    0.],       [   2.,  -60.,    6.],       [  27.,  -56.,    6.],       [  45.,  -48.,    1.],       [  58.,  -28.,    1.],       [  68.,    0.,    6.],       [  69.,   23.,    2.],       [  53.,   49.,    3.],       [  31.,   70.,    9.],       [   1.,   70.,    6.],       [ -31.,   69.,   10.],       [ -56.,   49.,    3.],       [ -71.,   27.,    4.],       [ -69.,    0.,    7.],       [ -62.,  -32.,    4.],       [ -46.,  -47.,    4.],       [ -23.,  -70.,    2.],       [   3.,  -68.,   10.],       [  28.,  -67.,    5.],       [  48.,  -54.,    3.],       [  63.,  -31.,    1.],       [  83.,    1.,    8.],       [  70.,   29.,    6.],       [  52.,   57.,    9.],       [  28.,   73.,    8.],       [   3.,   80.,    1.],       [ -26.,   76.,    1.],       [ -60.,   56.,    3.],       [ -69.,   27.,    3.],       [ -81.,    4.,    8.],       [ -78.,  -30.,    8.],       [ -55.,  -60.,    3.],       [ -31.,  -69.,   10.],       [  -1.,  -82.,    9.],       [  26.,  -68.,    9.],       [  57.,  -54.,   10.],       [  72.,  -36.,    6.],       [  86.,   -3.,    8.],       [  77.,   35.,    9.],       [  59.,   62.,    1.],       [  37.,   83.,    9.],       [  -1.,   84.,    5.],       [ -35.,   79.,    9.],       [ -63.,   60.,    6.],       [ -75.,   28.,    2.],       [ -84.,   -4.,    9.],       [ -82.,  -35.,    3.],       [ -61.,  -64.,    8.],       [ -30.,  -85.,    6.],       [  -5.,  -82.,    3.],       [  36.,  -83.,    1.],       [  57.,  -63.,    5.],       [  83.,  -36.,    4.],       [  93.,    0.,    4.],       [  81.,   40.,    1.],       [  66.,   67.,    1.],       [  30.,   82.,    9.],       [  -4.,   90.,    4.],       [ -39.,   90.,    7.],       [ -63.,   67.,    3.],       [ -89.,   40.,    4.],       [ -90.,    1.,    8.],       [ -91.,  -36.,    8.],       [ -65.,  -69.,   10.],       [ -39.,  -90.,    2.],       [  -5.,  -95.,    1.],       [  38.,  -89.,    9.],       [  63.,  -67.,    9.],       [  89.,  -32.,    1.],       [  96.,   -2.,    3.],       [  92.,   40.,    7.],       [  68.,   69.,    9.],       [  40.,   90.,    8.],       [  -2.,   98.,    4.],       [ -42.,   95.,    0.],       [ -75.,   70.,    5.],       [ -97.,   41.,    7.],       [-100.,    2.,    1.],       [ -93.,  -42.,    4.],       [ -66.,  -67.,    6.],       [ -41.,  -91.,    0.],       [  -2.,  -96.,    6.],       [  42.,  -98.,    2.],       [  73.,  -67.,    6.],       [  88.,  -42.,    8.],       [  53.,   -2.,   13.],       [  47.,   20.,    9.],       [  31.,   35.,   15.],       [  15.,   43.,   15.],       [   3.,   54.,   10.],       [ -21.,   46.,    8.],       [ -35.,   33.,   12.],       [ -46.,   19.,   15.],       [ -47.,   -4.,   11.],       [ -42.,  -16.,   15.],       [ -37.,  -31.,    9.],       [ -16.,  -49.,   13.],       [   4.,  -46.,   11.],       [  19.,  -48.,   11.],       [  34.,  -39.,   14.],       [  45.,  -24.,   14.],       [  53.,   -2.,    9.],       [  55.,   18.,    7.],       [  44.,   36.,   11.],       [  23.,   49.,   13.],       [  -4.,   54.,   13.],       [ -21.,   53.,   15.],       [ -37.,   43.,   15.],       [ -55.,   22.,   10.],       [ -55.,   -2.,    8.],       [ -56.,  -23.,   10.],       [ -37.,  -45.,   16.],       [ -24.,  -56.,   15.],       [   3.,  -59.,   15.],       [  21.,  -55.,    6.],       [  38.,  -41.,   11.],       [  55.,  -21.,   11.],       [  62.,    4.,    6.],       [  58.,   28.,   11.],       [  44.,   43.,   13.],       [  24.,   58.,    9.],       [   2.,   66.,   16.],       [ -20.,   63.,   15.],       [ -48.,   49.,   10.],       [ -63.,   28.,    8.],       [ -62.,   -2.,   11.],       [ -63.,  -27.,   15.],       [ -45.,  -44.,    8.],       [ -27.,  -56.,   14.],       [  -5.,  -65.,   15.],       [  21.,  -57.,   15.],       [  48.,  -42.,   12.],       [  57.,  -28.,   12.],       [  73.,   -2.,   16.],       [  68.,   32.,    9.],       [  49.,   45.,    8.],       [  23.,   70.,   11.],       [   1.,   68.,    6.],       [ -28.,   65.,   10.],       [ -56.,   51.,    8.],       [ -65.,   30.,    7.],       [ -72.,    3.,   12.],       [ -64.,  -29.,   11.],       [ -48.,  -52.,   15.],       [ -32.,  -69.,    6.],       [   4.,  -75.,    9.],       [  28.,  -71.,   14.],       [  48.,  -53.,   10.],       [  66.,  -27.,   15.],       [  77.,   -3.,   12.],       [  72.,   31.,    6.],       [  52.,   58.,   15.],       [  25.,   72.,    7.],       [  -3.,   80.,   13.],       [ -34.,   69.,   15.],       [ -55.,   53.,   11.],       [ -71.,   26.,   15.],       [ -75.,   -5.,   13.],       [ -78.,  -33.,   11.],       [ -55.,  -54.,   15.],       [ -31.,  -76.,   16.],       [   1.,  -81.,    6.],       [  32.,  -69.,    7.],       [  58.,  -55.,   15.],       [  73.,  -35.,    7.],       [  89.,    0.,   11.],       [  74.,   33.,   12.],       [  57.,   61.,    6.],       [  32.,   77.,   14.],       [  -2.,   90.,   14.],       [ -34.,   77.,   12.],       [ -61.,   57.,    8.],       [ -79.,   34.,    6.],       [ -88.,   -2.,   10.],       [ -79.,  -37.,   16.],       [ -63.,  -63.,   13.],       [ -30.,  -77.,    6.],       [  -4.,  -90.,    8.],       [  30.,  -80.,   10.],       [  55.,  -60.,    9.],       [  79.,  -32.,   11.],       [  93.,    2.,   10.],       [  86.,   38.,   12.],       [  65.,   70.,   11.],       [  36.,   82.,   15.],       [  -1.,   93.,    8.],       [ -40.,   86.,   10.],       [ -69.,   63.,   13.],       [ -87.,   32.,   16.],       [ -92.,   -2.,    6.],       [ -91.,  -33.,   12.],       [ -63.,  -67.,   10.],       [ -34.,  -88.,   15.],       [   0.,  -93.,    9.],       [  31.,  -91.,   10.],       [  66.,  -67.,    9.],       [  89.,  -36.,   14.],       [ 102.,   -4.,    7.],       [  94.,   42.,   15.],       [  71.,   70.,    7.],       [  33.,   95.,   13.],       [   0.,  100.,    9.],       [ -34.,   94.,   16.],       [ -66.,   66.,   11.],       [ -98.,   34.,   14.],       [-101.,    4.,    7.],       [ -95.,  -39.,   10.],       [ -75.,  -72.,   16.],       [ -35.,  -92.,   14.],       [   3., -101.,   11.],       [  34.,  -95.,    7.],       [  70.,  -73.,    7.],       [  87.,  -42.,   10.],       [  48.,   -4.,   15.],       [  47.,   19.,   19.],       [  36.,   35.,   16.],       [  21.,   51.,   19.],       [   1.,   53.,   18.],       [ -18.,   49.,   19.],       [ -39.,   36.,   14.],       [ -48.,   17.,   17.],       [ -52.,    4.,   20.],       [ -49.,  -22.,   16.],       [ -39.,  -36.,   17.],       [ -24.,  -50.,   20.],       [  -1.,  -55.,   20.],       [  22.,  -50.,   12.],       [  32.,  -39.,   21.],       [  49.,  -17.,   20.],       [  60.,    3.,   19.],       [  52.,   24.,   17.],       [  40.,   37.,   21.],       [  22.,   57.,   20.],       [  -2.,   55.,   20.],       [ -27.,   51.,   14.],       [ -39.,   44.,   18.],       [ -52.,   21.,   17.],       [ -57.,   -2.,   18.],       [ -55.,  -23.,   16.],       [ -41.,  -38.,   18.],       [ -21.,  -56.,   21.],       [   1.,  -53.,   21.],       [  26.,  -54.,   21.],       [  37.,  -41.,   16.],       [  48.,  -19.,   19.],       [  61.,   -5.,   19.],       [  63.,   22.,   20.],       [  45.,   47.,   21.],       [  27.,   61.,   19.],       [  -5.,   61.,   17.],       [ -23.,   63.,   12.],       [ -44.,   45.,   17.],       [ -64.,   26.,   13.],       [ -62.,    4.,   14.],       [ -59.,  -27.,   13.],       [ -47.,  -42.,   19.],       [ -24.,  -56.,   21.],       [  -2.,  -63.,   13.],       [  25.,  -58.,   20.],       [  41.,  -51.,   17.],       [  63.,  -27.,   17.],       [  72.,    4.,   12.],       [  63.,   25.,   19.],       [  46.,   48.,   17.],       [  25.,   65.,   13.],       [  -1.,   74.,   20.],       [ -27.,   67.,   18.],       [ -53.,   54.,   12.],       [ -68.,   27.,   12.],       [ -76.,   -3.,   14.],       [ -71.,  -28.,   18.],       [ -53.,  -54.,   16.],       [ -25.,  -63.,   16.],       [   0.,  -70.,   20.],       [  29.,  -71.,   13.],       [  45.,  -49.,   13.],       [  66.,  -29.,   14.],       [  83.,   -2.,   14.],       [  77.,   28.,   16.],       [  58.,   60.,   18.],       [  34.,   75.,   14.],       [  -5.,   81.,   13.],       [ -26.,   74.,   20.],       [ -58.,   52.,   17.],       [ -78.,   26.,   19.],       [ -75.,   -2.,   15.],       [ -71.,  -27.,   13.],       [ -52.,  -60.,   16.],       [ -32.,  -75.,   15.],       [   1.,  -79.,   12.],       [  30.,  -69.,   14.],       [  58.,  -61.,   17.],       [  69.,  -35.,   17.],       [  83.,   -2.,   12.],       [  80.,   34.,   18.],       [  56.,   64.,   19.],       [  36.,   83.,   21.],       [   0.,   86.,   21.],       [ -37.,   75.,   14.],       [ -65.,   59.,   16.],       [ -76.,   29.,   13.],       [ -83.,    0.,   16.],       [ -78.,  -30.,   20.],       [ -60.,  -59.,   13.],       [ -35.,  -79.,   19.],       [  -2.,  -87.,   16.],       [  37.,  -82.,   19.],       [  58.,  -57.,   16.],       [  83.,  -29.,   18.],       [  91.,   -5.,   17.],       [  88.,   31.,   17.],       [  65.,   69.,   14.],       [  39.,   88.,   14.],       [  -2.,   90.,   13.],       [ -35.,   86.,   19.],       [ -66.,   63.,   22.],       [ -81.,   33.,   13.],       [ -90.,    0.,   19.],       [ -90.,  -37.,   18.],       [ -67.,  -69.,   18.],       [ -31.,  -89.,   19.],       [   1.,  -89.,   13.],       [  37.,  -85.,   16.],       [  69.,  -65.,   19.],       [  82.,  -38.,   13.],       [  99.,   -2.,   14.],       [  92.,   37.,   19.],       [  66.,   73.,   14.],       [  34.,   95.,   12.],       [   3.,   95.,   21.],       [ -42.,   89.,   16.],       [ -69.,   70.,   17.],       [ -91.,   39.,   15.],       [ -99.,    4.,   19.],       [ -93.,  -41.,   17.],       [ -73.,  -69.,   16.],       [ -39.,  -97.,   19.],       [   4., -104.,   14.],       [  36.,  -94.,   15.],       [  66.,  -73.,   19.],       [  94.,  -34.,   20.],       [  52.,   -3.,   18.],       [  42.,   23.,   26.],       [  36.,   33.,   18.],       [  21.,   45.,   23.],       [   1.,   52.,   25.],       [ -19.,   49.,   23.],       [ -40.,   37.,   21.],       [ -49.,   22.,   27.],       [ -49.,   -1.,   19.],       [ -46.,  -21.,   20.],       [ -36.,  -32.,   25.],       [ -16.,  -51.,   19.],       [  -4.,  -51.,   17.],       [  23.,  -46.,   21.],       [  32.,  -34.,   24.],       [  48.,  -20.,   21.],       [  59.,   -3.,   26.],       [  50.,   23.,   24.],       [  37.,   44.,   22.],       [  17.,   56.,   23.],       [  -4.,   61.,   25.],       [ -27.,   56.,   18.],       [ -39.,   40.,   25.],       [ -52.,   20.,   22.],       [ -58.,    1.,   20.],       [ -57.,  -26.,   20.],       [ -42.,  -45.,   19.],       [ -26.,  -51.,   23.],       [   3.,  -55.,   22.],       [  23.,  -55.,   27.],       [  36.,  -38.,   22.],       [  52.,  -22.,   19.],       [  62.,   -2.,   25.],       [  55.,   26.,   23.],       [  43.,   42.,   22.],       [  20.,   54.,   23.],       [   2.,   66.,   26.],       [ -26.,   55.,   19.],       [ -50.,   41.,   19.],       [ -59.,   25.,   22.],       [ -67.,    0.,   24.],       [ -57.,  -30.,   26.],       [ -41.,  -51.,   18.],       [ -25.,  -59.,   19.],       [   1.,  -65.,   18.],       [  28.,  -55.,   18.],       [  47.,  -50.,   27.],       [  56.,  -23.,   19.],       [  71.,   -5.,   18.],       [  63.,   23.,   18.],       [  53.,   52.,   21.],       [  25.,   68.,   18.],       [   0.,   75.,   23.],       [ -27.,   63.,   25.],       [ -54.,   51.,   27.],       [ -65.,   24.,   19.],       [ -76.,    3.,   24.],       [ -70.,  -29.,   18.],       [ -47.,  -47.,   22.],       [ -26.,  -70.,   18.],       [  -3.,  -70.,   25.],       [  26.,  -63.,   23.],       [  51.,  -51.,   19.],       [  67.,  -24.,   18.],       [  79.,    2.,   24.],       [  74.,   32.,   19.],       [  57.,   57.,   25.],       [  34.,   77.,   17.],       [   2.,   74.,   24.],       [ -31.,   74.,   25.],       [ -56.,   58.,   26.],       [ -69.,   32.,   26.],       [ -83.,   -2.,   23.],       [ -73.,  -31.,   18.],       [ -56.,  -52.,   23.],       [ -34.,  -71.,   22.],       [   2.,  -80.,   23.],       [  25.,  -75.,   26.],       [  56.,  -59.,   23.],       [  73.,  -28.,   24.],       [  89.,    3.,   20.],       [  74.,   33.,   23.],       [  62.,   64.,   21.],       [  32.,   78.,   26.],       [  -3.,   85.,   22.],       [ -32.,   82.,   26.],       [ -63.,   58.,   19.],       [ -77.,   33.,   25.],       [ -88.,   -1.,   20.],       [ -75.,  -38.,   21.],       [ -64.,  -60.,   25.],       [ -31.,  -81.,   21.],       [  -1.,  -82.,   18.],       [  34.,  -79.,   22.],       [  58.,  -64.,   25.],       [  75.,  -31.,   25.],       [  93.,    0.,   24.],       [  88.,   30.,   20.],       [  67.,   70.,   24.],       [  33.,   87.,   26.],       [   1.,   95.,   25.],       [ -40.,   90.,   19.],       [ -70.,   66.,   25.],       [ -87.,   35.,   19.],       [ -98.,    0.,   18.],       [ -82.,  -31.,   26.],       [ -67.,  -61.,   25.],       [ -40.,  -85.,   25.],       [   3.,  -95.,   21.],       [  36.,  -85.,   23.],       [  61.,  -67.,   27.],       [  88.,  -36.,   17.],       [ 100.,   -3.,   18.],       [  87.,   33.,   19.],       [  71.,   68.,   25.],       [  33.,   93.,   20.],       [  -4.,  104.,   22.],       [ -35.,   95.,   22.],       [ -70.,   73.,   18.],       [ -94.,   39.,   21.],       [-102.,   -4.,   22.],       [ -90.,  -42.,   25.],       [ -75.,  -68.,   21.],       [ -36.,  -95.,   26.],       [   4., -100.,   23.],       [  40.,  -95.,   24.],       [  67.,  -67.,   23.],       [  92.,  -39.,   25.],       [  45.,   -3.,   29.],       [  42.,   22.,   28.],       [  30.,   32.,   30.],       [  14.,   49.,   28.],       [  -1.,   53.,   27.],       [ -18.,   45.,   32.],       [ -37.,   37.,   32.],       [ -49.,   17.,   25.],       [ -48.,    0.,   27.],       [ -47.,  -16.,   32.],       [ -34.,  -37.,   23.],       [ -21.,  -42.,   26.],       [  -3.,  -48.,   28.],       [  23.,  -45.,   31.],       [  37.,  -38.,   27.],       [  45.,  -23.,   31.],       [  53.,   -2.,   23.],       [  50.,   17.,   30.],       [  42.,   38.,   32.],       [  17.,   56.,   30.],       [   0.,   57.,   23.],       [ -22.,   49.,   26.],       [ -45.,   41.,   25.],       [ -53.,   25.,   24.],       [ -53.,    4.,   30.],       [ -51.,  -22.,   33.],       [ -38.,  -46.,   27.],       [ -20.,  -55.,   24.],       [  -2.,  -53.,   24.],       [  17.,  -49.,   26.],       [  41.,  -41.,   27.],       [  54.,  -26.,   25.],       [  69.,   -3.,   31.],       [  61.,   22.,   32.],       [  49.,   41.,   24.],       [  24.,   58.,   30.],       [  -4.,   65.,   29.],       [ -22.,   56.,   27.],       [ -47.,   46.,   27.],       [ -57.,   24.,   26.],       [ -60.,    2.,   27.],       [ -63.,  -23.,   32.],       [ -46.,  -49.,   29.],       [ -23.,  -62.,   28.],       [  -2.,  -69.,   24.],       [  26.,  -59.,   28.],       [  40.,  -42.,   25.],       [  56.,  -26.,   28.],       [  74.,    2.,   31.],       [  67.,   25.,   26.],       [  48.,   47.,   32.],       [  26.,   68.,   25.],       [  -5.,   75.,   28.],       [ -25.,   61.,   28.],       [ -51.,   53.,   32.],       [ -63.,   24.,   26.],       [ -71.,    3.,   28.],       [ -65.,  -23.,   33.],       [ -52.,  -53.,   28.],       [ -28.,  -65.,   29.],       [   1.,  -72.,   29.],       [  31.,  -64.,   23.],       [  54.,  -55.,   32.],       [  70.,  -26.,   28.],       [  75.,   -4.,   25.],       [  75.,   28.,   26.],       [  53.,   52.,   30.],       [  28.,   72.,   27.],       [  -4.,   76.,   27.],       [ -29.,   75.,   26.],       [ -58.,   56.,   30.],       [ -78.,   26.,   30.],       [ -78.,    2.,   25.],       [ -78.,  -35.,   31.],       [ -54.,  -51.,   26.],       [ -34.,  -72.,   26.],       [  -3.,  -82.,   24.],       [  32.,  -76.,   30.],       [  57.,  -51.,   28.],       [  73.,  -31.,   24.],       [  81.,    4.,   29.],       [  82.,   27.,   29.],       [  64.,   62.,   25.],       [  30.,   74.,   24.],       [   0.,   89.,   28.],       [ -32.,   83.,   31.],       [ -64.,   59.,   26.],       [ -78.,   31.,   30.],       [ -84.,    0.,   23.],       [ -84.,  -32.,   29.],       [ -61.,  -63.,   32.],       [ -32.,  -83.,   31.],       [   1.,  -86.,   25.],       [  35.,  -78.,   29.],       [  62.,  -60.,   25.],       [  84.,  -33.,   29.],       [  92.,    3.,   30.],       [  80.,   36.,   26.],       [  64.,   63.,   27.],       [  32.,   84.,   26.],       [   1.,   91.,   24.],       [ -36.,   83.,   31.],       [ -69.,   64.,   30.],       [ -84.,   31.,   24.],       [ -92.,   -4.,   28.],       [ -82.,  -38.,   26.],       [ -66.,  -69.,   27.],       [ -38.,  -84.,   31.],       [  -5.,  -89.,   30.],       [  33.,  -91.,   26.],       [  68.,  -61.,   32.],       [  85.,  -32.,   32.],       [ 100.,   -2.,   32.],       [  94.,   41.,   28.],       [  71.,   67.,   25.],       [  39.,   90.,   33.],       [  -3.,   97.,   31.],       [ -42.,   90.,   28.],       [ -75.,   65.,   31.],       [ -94.,   33.,   33.],       [-102.,   -2.,   31.],       [ -95.,  -42.,   31.],       [ -68.,  -74.,   29.],       [ -39.,  -95.,   28.],       [  -1.,  -98.,   29.],       [  38.,  -91.,   28.],       [  71.,  -72.,   25.],       [  94.,  -35.,   30.],       [  48.,    4.,   31.],       [  43.,   21.,   34.],       [  30.,   37.,   30.],       [  22.,   47.,   32.],       [   0.,   51.,   35.],       [ -18.,   41.,   29.],       [ -32.,   32.,   37.],       [ -49.,   22.,   35.],       [ -52.,    2.,   35.],       [ -49.,  -15.,   35.],       [ -38.,  -37.,   31.],       [ -17.,  -44.,   36.],       [  -4.,  -51.,   33.],       [  21.,  -43.,   37.],       [  39.,  -32.,   35.],       [  43.,  -17.,   30.],       [  56.,   -4.,   34.],       [  50.,   22.,   32.],       [  44.,   39.,   31.],       [  21.,   50.,   31.],       [  -3.,   55.,   38.],       [ -22.,   54.,   38.],       [ -44.,   44.,   37.],       [ -50.,   22.,   32.],       [ -53.,    0.,   35.],       [ -51.,  -19.,   34.],       [ -43.,  -37.,   37.],       [ -24.,  -51.,   37.],       [  -4.,  -56.,   29.],       [  21.,  -49.,   34.],       [  43.,  -40.,   37.],       [  49.,  -24.,   36.],       [  68.,    2.,   32.],       [  54.,   29.,   36.],       [  41.,   45.,   30.],       [  28.,   58.,   38.],       [  -5.,   62.,   38.],       [ -24.,   60.,   32.],       [ -51.,   45.,   34.],       [ -59.,   22.,   30.],       [ -66.,    1.,   35.],       [ -63.,  -21.,   32.],       [ -50.,  -42.,   29.],       [ -21.,  -55.,   34.],       [   2.,  -60.,   30.],       [  21.,  -56.,   33.],       [  41.,  -46.,   32.],       [  56.,  -29.,   31.],       [  69.,    1.,   38.],       [  65.,   28.,   36.],       [  50.,   54.,   31.],       [  22.,   69.,   31.],       [  -4.,   73.,   30.],       [ -29.,   63.,   37.],       [ -52.,   49.,   38.],       [ -64.,   22.,   38.],       [ -69.,    0.,   30.],       [ -69.,  -23.,   29.],       [ -56.,  -50.,   32.],       [ -31.,  -64.,   33.],       [   1.,  -76.,   38.],       [  31.,  -66.,   38.],       [  45.,  -49.,   37.],       [  65.,  -33.,   34.],       [  75.,   -4.,   37.],       [  77.,   35.,   35.],       [  59.,   58.,   31.],       [  29.,   68.,   30.],       [  -5.,   80.,   30.],       [ -34.,   73.,   39.],       [ -57.,   54.,   31.],       [ -74.,   33.,   32.],       [ -81.,    3.,   30.],       [ -76.,  -30.,   36.],       [ -56.,  -59.,   37.],       [ -30.,  -70.,   34.],       [  -3.,  -79.,   30.],       [  29.,  -71.,   35.],       [  56.,  -60.,   29.],       [  70.,  -33.,   35.],       [  81.,   -4.,   32.],       [  83.,   36.,   39.],       [  64.,   56.,   37.],       [  30.,   79.,   29.],       [   2.,   90.,   38.],       [ -31.,   82.,   38.],       [ -66.,   65.,   36.],       [ -84.,   36.,   29.],       [ -89.,    3.,   30.],       [ -76.,  -32.,   31.],       [ -60.,  -64.,   34.],       [ -33.,  -75.,   38.],       [  -4.,  -84.,   37.],       [  28.,  -83.,   35.],       [  62.,  -61.,   32.],       [  81.,  -35.,   35.],       [  97.,   -3.,   36.],       [  87.,   35.,   30.],       [  63.,   67.,   34.],       [  32.,   86.,   35.],       [  -1.,   90.,   32.],       [ -38.,   85.,   32.],       [ -69.,   63.,   30.],       [ -82.,   37.,   36.],       [ -91.,    3.,   33.],       [ -87.,  -36.,   30.],       [ -62.,  -66.,   32.],       [ -39.,  -83.,   33.],       [  -5.,  -93.,   31.],       [  36.,  -87.,   37.],       [  66.,  -64.,   32.],       [  82.,  -35.,   38.],       [  97.,   -5.,   37.],       [  92.,   33.,   37.],       [  75.,   68.,   31.],       [  33.,   89.,   33.],       [  -1.,  104.,   30.],       [ -41.,   89.,   29.],       [ -69.,   67.,   29.],       [ -96.,   36.,   37.],       [-105.,    2.,   29.],       [ -88.,  -36.,   35.],       [ -67.,  -69.,   36.],       [ -40.,  -90.,   30.],       [   2.,  -96.,   38.],       [  37.,  -92.,   32.],       [  75.,  -69.,   33.],       [  96.,  -42.,   36.],       [  53.,    1.,   44.],       [  43.,   15.,   37.],       [  37.,   38.,   37.],       [  21.,   44.,   44.],       [   0.,   54.,   35.],       [ -18.,   43.,   35.],       [ -36.,   38.,   40.],       [ -48.,   20.,   41.],       [ -55.,   -3.,   40.],       [ -42.,  -20.,   36.],       [ -36.,  -40.,   37.],       [ -23.,  -42.,   42.],       [  -5.,  -47.,   44.],       [  22.,  -46.,   41.],       [  40.,  -39.,   39.],       [  47.,  -24.,   40.],       [  57.,    2.,   43.],       [  50.,   22.,   41.],       [  38.,   36.,   37.],       [  20.,   51.,   39.],       [   0.,   61.,   40.],       [ -19.,   48.,   36.],       [ -40.,   44.,   37.],       [ -49.,   20.,   44.],       [ -55.,   -3.,   42.],       [ -49.,  -24.,   37.],       [ -45.,  -42.,   44.],       [ -19.,  -57.,   38.],       [  -4.,  -54.,   39.],       [  17.,  -56.,   38.],       [  37.,  -39.,   37.],       [  53.,  -23.,   36.],       [  66.,    0.,   44.],       [  60.,   20.,   38.],       [  48.,   43.,   37.],       [  22.,   60.,   41.],       [   3.,   66.,   44.],       [ -29.,   55.,   36.],       [ -43.,   48.,   42.],       [ -62.,   22.,   37.],       [ -68.,    3.,   36.],       [ -65.,  -28.,   36.],       [ -43.,  -42.,   43.],       [ -26.,  -64.,   39.],       [   4.,  -68.,   37.],       [  26.,  -55.,   35.],       [  44.,  -51.,   42.],       [  57.,  -25.,   37.],       [  69.,   -4.,   35.],       [  69.,   25.,   44.],       [  46.,   50.,   44.],       [  31.,   62.,   43.],       [  -4.,   69.,   38.],       [ -24.,   70.,   39.],       [ -48.,   50.,   42.],       [ -69.,   26.,   41.],       [ -74.,    0.,   39.],       [ -62.,  -24.,   41.],       [ -50.,  -47.,   41.],       [ -30.,  -62.,   35.],       [   0.,  -67.,   44.],       [  27.,  -67.,   41.],       [  53.,  -54.,   40.],       [  62.,  -29.,   43.],       [  73.,   -5.,   40.],       [  71.,   34.,   44.],       [  52.,   56.,   44.],       [  32.,   72.,   42.],       [   1.,   81.,   40.],       [ -31.,   77.,   43.],       [ -52.,   55.,   44.],       [ -77.,   27.,   43.],       [ -76.,   -3.,   36.],       [ -75.,  -31.,   40.],       [ -53.,  -57.,   44.],       [ -27.,  -72.,   38.],       [  -4.,  -77.,   44.],       [  32.,  -69.,   44.],       [  52.,  -51.,   39.],       [  73.,  -30.,   42.],       [  83.,   -2.,   42.],       [  78.,   31.,   38.],       [  64.,   57.,   40.],       [  28.,   75.,   44.],       [  -1.,   89.,   41.],       [ -38.,   77.,   39.],       [ -62.,   65.,   36.],       [ -84.,   36.,   43.],       [ -87.,    3.,   44.],       [ -82.,  -34.,   35.],       [ -64.,  -59.,   41.],       [ -34.,  -78.,   42.],       [   3.,  -90.,   35.],       [  30.,  -81.,   38.],       [  56.,  -65.,   38.],       [  79.,  -32.,   36.],       [  95.,   -1.,   42.],       [  85.,   39.,   38.],       [  61.,   62.,   40.],       [  36.,   87.,   38.],       [  -1.,   88.,   42.],       [ -40.,   84.,   42.],       [ -66.,   68.,   35.],       [ -89.,   31.,   35.],       [ -95.,   -5.,   41.],       [ -85.,  -38.,   41.],       [ -66.,  -66.,   39.],       [ -37.,  -86.,   43.],       [   4.,  -96.,   41.],       [  38.,  -88.,   43.],       [  66.,  -69.,   37.],       [  83.,  -33.,   41.],       [ 102.,    0.,   44.],       [  96.,   36.,   35.],       [  74.,   75.,   38.],       [  34.,   91.,   35.],       [   2.,  104.,   35.],       [ -38.,   97.,   44.],       [ -70.,   72.,   35.],       [ -94.,   36.,   42.],       [ -96.,   -1.,   37.],       [ -97.,  -43.,   38.],       [ -73.,  -74.,   44.],       [ -36.,  -89.,   39.],       [  -3., -101.,   40.],       [  39.,  -91.,   40.],       [  75.,  -76.,   40.],       [  96.,  -39.,   37.]])
        basis0 = BSplineBasis(6, np.array([ -2.6,  -2.1,  -1. ,   0. ,   0. ,   0. ,   1.4,   1.7,   2.8,   4.3,   5. ,   6.4,   7.4,
         7.7,   9.4,   9.8,  11.4,  11.9,  13. ,  14. ,  14. ,  14. ,  15.4,  15.7,  16.8]),2)
        basis1 = BSplineBasis(5, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1. ,  1.6,  3.4,  4. ,  4. ,  4. ,  4. ,  4. ]))
        basis2 = BSplineBasis(6, np.array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.3,  2.2,  3. ,  3. ,  3. ,  3. ,  3. ,  3. ]))
        vol  = Volume(basis0, basis1, basis2, controlpoints,False)
        vol2 = vol.clone()
        vol2.insert_knot(0, [10.897]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 26)
        vol2.insert_knot(0, [9.396]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 28)
        vol2.insert_knot(0, [3.729]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 31)
        vol2.insert_knot(0, [2.652]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 35)
        vol2.insert_knot(0, [7.675]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=0,with_multiplicities=True)), 40)
        vol2.insert_knot(1, [1.218]*1) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 14)
        vol2.insert_knot(1, [2.628]*2) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 16)
        vol2.insert_knot(1, [2.722]*3) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 19)
        vol2.insert_knot(1, [1.880]*4) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=1,with_multiplicities=True)), 23)
        vol2.insert_knot(2, [1.916]*1) # insert C4-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 15)
        vol2.insert_knot(2, [1.945]*2) # insert C3-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 17)
        vol2.insert_knot(2, [1.831]*3) # insert C2-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 20)
        vol2.insert_knot(2, [1.342]*4) # insert C1-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 24)
        vol2.insert_knot(2, [1.923]*5) # insert C0-knot
        self.assertEqual(len(vol2.knots(direction=2,with_multiplicities=True)), 29)

        u    = np.linspace(vol.start(0), vol.end(0), 7)
        v    = np.linspace(vol.start(1), vol.end(1), 7)
        w    = np.linspace(vol.start(2), vol.end(2), 7)
        pt   = vol(u,v,w)
        pt2  = vol2(u,v,w)
        self.assertAlmostEqual(np.max(pt-pt2), 0.0)


if __name__ == '__main__':
    unittest.main()
